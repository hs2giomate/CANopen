
CANopen_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ab0  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e4  20000000  00003ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000201e4  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000201e4  2**0
                  CONTENTS
  4 .bss          000000c0  200001e4  00003c94  000201e4  2**2
                  ALLOC
  5 .stack        00010004  200002a4  00003d54  000201e4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
  8 .debug_info   000288fc  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003117  00000000  00000000  00048b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000aaf9  00000000  00000000  0004bc7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000980  00000000  00000000  00056777  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d00  00000000  00000000  000570f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033d63  00000000  00000000  00057df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001260e  00000000  00000000  0008bb5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011a6b2  00000000  00000000  0009e168  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000244c  00000000  00000000  001b881c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 02 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      cc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	99 0d 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     164:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     174:	e5 02 00 00 e5 02 00 00 0d 0c 00 00 e5 02 00 00     ................
     184:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1f4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     224:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200001e4 	.word	0x200001e4
     280:	00000000 	.word	0x00000000
     284:	00003ab0 	.word	0x00003ab0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00003ab0 	.word	0x00003ab0
     2c4:	200001e8 	.word	0x200001e8
     2c8:	00003ab0 	.word	0x00003ab0
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	stdio_redirect_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	0000049d 	.word	0x0000049d
     2e0:	000014b5 	.word	0x000014b5

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	00003ab0 	.word	0x00003ab0
     364:	200001e4 	.word	0x200001e4
     368:	200002a4 	.word	0x200002a4
     36c:	200001e4 	.word	0x200001e4
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	000014d5 	.word	0x000014d5
     37c:	00000fdd 	.word	0x00000fdd

00000380 <TARGET_IO_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     380:	4b10      	ldr	r3, [pc, #64]	; (3c4 <TARGET_IO_PORT_init+0x44>)
     382:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     386:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     38a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     38e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     392:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     396:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     39a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     39e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     3a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3aa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ae:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b2:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3b6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3ba:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3be:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     3c2:	4770      	bx	lr
     3c4:	41008000 	.word	0x41008000

000003c8 <TARGET_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3c8:	4b06      	ldr	r3, [pc, #24]	; (3e4 <TARGET_IO_CLOCK_init+0x1c>)
     3ca:	2240      	movs	r2, #64	; 0x40
     3cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     3d0:	2243      	movs	r2, #67	; 0x43
     3d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     3d6:	4a04      	ldr	r2, [pc, #16]	; (3e8 <TARGET_IO_CLOCK_init+0x20>)
     3d8:	6993      	ldr	r3, [r2, #24]
     3da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     3de:	6193      	str	r3, [r2, #24]
     3e0:	4770      	bx	lr
     3e2:	bf00      	nop
     3e4:	40001c00 	.word	0x40001c00
     3e8:	40000800 	.word	0x40000800

000003ec <TARGET_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void TARGET_IO_init(void)
{
     3ec:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
     3ee:	4b05      	ldr	r3, [pc, #20]	; (404 <TARGET_IO_init+0x18>)
     3f0:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM3, (void *)NULL);
     3f2:	2200      	movs	r2, #0
     3f4:	4904      	ldr	r1, [pc, #16]	; (408 <TARGET_IO_init+0x1c>)
     3f6:	4805      	ldr	r0, [pc, #20]	; (40c <TARGET_IO_init+0x20>)
     3f8:	4b05      	ldr	r3, [pc, #20]	; (410 <TARGET_IO_init+0x24>)
     3fa:	4798      	blx	r3
	TARGET_IO_PORT_init();
     3fc:	4b05      	ldr	r3, [pc, #20]	; (414 <TARGET_IO_init+0x28>)
     3fe:	4798      	blx	r3
     400:	bd08      	pop	{r3, pc}
     402:	bf00      	nop
     404:	000003c9 	.word	0x000003c9
     408:	41014000 	.word	0x41014000
     40c:	20000264 	.word	0x20000264
     410:	00000799 	.word	0x00000799
     414:	00000381 	.word	0x00000381

00000418 <CAN_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     418:	4b10      	ldr	r3, [pc, #64]	; (45c <CAN_0_PORT_init+0x44>)
     41a:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     41e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     422:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     426:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     42a:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     42e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     432:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     436:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     43a:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     43e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     442:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     446:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     44a:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     44e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     452:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     456:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
     45a:	4770      	bx	lr
     45c:	41008000 	.word	0x41008000

00000460 <CAN_0_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_0_init(void)
{
     460:	b508      	push	{r3, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     462:	4a08      	ldr	r2, [pc, #32]	; (484 <CAN_0_init+0x24>)
     464:	6913      	ldr	r3, [r2, #16]
     466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
     46a:	6113      	str	r3, [r2, #16]
     46c:	2242      	movs	r2, #66	; 0x42
     46e:	4b06      	ldr	r3, [pc, #24]	; (488 <CAN_0_init+0x28>)
     470:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_0, CAN1);
     474:	4905      	ldr	r1, [pc, #20]	; (48c <CAN_0_init+0x2c>)
     476:	4806      	ldr	r0, [pc, #24]	; (490 <CAN_0_init+0x30>)
     478:	4b06      	ldr	r3, [pc, #24]	; (494 <CAN_0_init+0x34>)
     47a:	4798      	blx	r3
	CAN_0_PORT_init();
     47c:	4b06      	ldr	r3, [pc, #24]	; (498 <CAN_0_init+0x38>)
     47e:	4798      	blx	r3
     480:	bd08      	pop	{r3, pc}
     482:	bf00      	nop
     484:	40000800 	.word	0x40000800
     488:	40001c00 	.word	0x40001c00
     48c:	42000400 	.word	0x42000400
     490:	2000023c 	.word	0x2000023c
     494:	00000509 	.word	0x00000509
     498:	00000419 	.word	0x00000419

0000049c <system_init>:
}

void system_init(void)
{
     49c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     49e:	4b0e      	ldr	r3, [pc, #56]	; (4d8 <system_init+0x3c>)
     4a0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4a2:	4b0e      	ldr	r3, [pc, #56]	; (4dc <system_init+0x40>)
     4a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     4a8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4ac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4b0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     4b4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     4b8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     4bc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c0:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     4c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4c8:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);

	TARGET_IO_init();
     4cc:	4b04      	ldr	r3, [pc, #16]	; (4e0 <system_init+0x44>)
     4ce:	4798      	blx	r3
	CAN_0_init();
     4d0:	4b04      	ldr	r3, [pc, #16]	; (4e4 <system_init+0x48>)
     4d2:	4798      	blx	r3
     4d4:	bd08      	pop	{r3, pc}
     4d6:	bf00      	nop
     4d8:	00000c89 	.word	0x00000c89
     4dc:	41008000 	.word	0x41008000
     4e0:	000003ed 	.word	0x000003ed
     4e4:	00000461 	.word	0x00000461

000004e8 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
     4e8:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
     4ea:	69c3      	ldr	r3, [r0, #28]
     4ec:	b103      	cbz	r3, 4f0 <can_tx_done+0x8>
		descr->cb.tx_done(descr);
     4ee:	4798      	blx	r3
     4f0:	bd08      	pop	{r3, pc}

000004f2 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
     4f2:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
     4f4:	6a03      	ldr	r3, [r0, #32]
     4f6:	b103      	cbz	r3, 4fa <can_rx_done+0x8>
		descr->cb.rx_done(descr);
     4f8:	4798      	blx	r3
     4fa:	bd08      	pop	{r3, pc}

000004fc <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
     4fc:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
     4fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
     500:	b103      	cbz	r3, 504 <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
     502:	4798      	blx	r3
     504:	bd08      	pop	{r3, pc}
	...

00000508 <can_async_init>:
{
     508:	b538      	push	{r3, r4, r5, lr}
     50a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     50c:	4604      	mov	r4, r0
     50e:	b1a0      	cbz	r0, 53a <can_async_init+0x32>
     510:	1c08      	adds	r0, r1, #0
     512:	bf18      	it	ne
     514:	2001      	movne	r0, #1
     516:	2241      	movs	r2, #65	; 0x41
     518:	4909      	ldr	r1, [pc, #36]	; (540 <can_async_init+0x38>)
     51a:	4b0a      	ldr	r3, [pc, #40]	; (544 <can_async_init+0x3c>)
     51c:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
     51e:	4629      	mov	r1, r5
     520:	4620      	mov	r0, r4
     522:	4b09      	ldr	r3, [pc, #36]	; (548 <can_async_init+0x40>)
     524:	4798      	blx	r3
	if (rc) {
     526:	4603      	mov	r3, r0
     528:	b928      	cbnz	r0, 536 <can_async_init+0x2e>
	descr->dev.cb.tx_done     = can_tx_done;
     52a:	4a08      	ldr	r2, [pc, #32]	; (54c <can_async_init+0x44>)
     52c:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
     52e:	4a08      	ldr	r2, [pc, #32]	; (550 <can_async_init+0x48>)
     530:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
     532:	4a08      	ldr	r2, [pc, #32]	; (554 <can_async_init+0x4c>)
     534:	60e2      	str	r2, [r4, #12]
}
     536:	4618      	mov	r0, r3
     538:	bd38      	pop	{r3, r4, r5, pc}
     53a:	2000      	movs	r0, #0
     53c:	e7eb      	b.n	516 <can_async_init+0xe>
     53e:	bf00      	nop
     540:	00003230 	.word	0x00003230
     544:	0000080d 	.word	0x0000080d
     548:	00000851 	.word	0x00000851
     54c:	000004e9 	.word	0x000004e9
     550:	000004f3 	.word	0x000004f3
     554:	000004fd 	.word	0x000004fd

00000558 <can_async_enable>:
{
     558:	b510      	push	{r4, lr}
	ASSERT(descr);
     55a:	4604      	mov	r4, r0
     55c:	225c      	movs	r2, #92	; 0x5c
     55e:	4905      	ldr	r1, [pc, #20]	; (574 <can_async_enable+0x1c>)
     560:	3000      	adds	r0, #0
     562:	bf18      	it	ne
     564:	2001      	movne	r0, #1
     566:	4b04      	ldr	r3, [pc, #16]	; (578 <can_async_enable+0x20>)
     568:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
     56a:	4620      	mov	r0, r4
     56c:	4b03      	ldr	r3, [pc, #12]	; (57c <can_async_enable+0x24>)
     56e:	4798      	blx	r3
}
     570:	bd10      	pop	{r4, pc}
     572:	bf00      	nop
     574:	00003230 	.word	0x00003230
     578:	0000080d 	.word	0x0000080d
     57c:	0000096d 	.word	0x0000096d

00000580 <can_async_read>:
{
     580:	b538      	push	{r3, r4, r5, lr}
     582:	460c      	mov	r4, r1
	ASSERT(descr && msg);
     584:	4605      	mov	r5, r0
     586:	b158      	cbz	r0, 5a0 <can_async_read+0x20>
     588:	1c08      	adds	r0, r1, #0
     58a:	bf18      	it	ne
     58c:	2001      	movne	r0, #1
     58e:	226e      	movs	r2, #110	; 0x6e
     590:	4904      	ldr	r1, [pc, #16]	; (5a4 <can_async_read+0x24>)
     592:	4b05      	ldr	r3, [pc, #20]	; (5a8 <can_async_read+0x28>)
     594:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
     596:	4621      	mov	r1, r4
     598:	4628      	mov	r0, r5
     59a:	4b04      	ldr	r3, [pc, #16]	; (5ac <can_async_read+0x2c>)
     59c:	4798      	blx	r3
}
     59e:	bd38      	pop	{r3, r4, r5, pc}
     5a0:	2000      	movs	r0, #0
     5a2:	e7f4      	b.n	58e <can_async_read+0xe>
     5a4:	00003230 	.word	0x00003230
     5a8:	0000080d 	.word	0x0000080d
     5ac:	0000097d 	.word	0x0000097d

000005b0 <can_async_write>:
{
     5b0:	b538      	push	{r3, r4, r5, lr}
     5b2:	460c      	mov	r4, r1
	ASSERT(descr && msg);
     5b4:	4605      	mov	r5, r0
     5b6:	b158      	cbz	r0, 5d0 <can_async_write+0x20>
     5b8:	1c08      	adds	r0, r1, #0
     5ba:	bf18      	it	ne
     5bc:	2001      	movne	r0, #1
     5be:	2277      	movs	r2, #119	; 0x77
     5c0:	4904      	ldr	r1, [pc, #16]	; (5d4 <can_async_write+0x24>)
     5c2:	4b05      	ldr	r3, [pc, #20]	; (5d8 <can_async_write+0x28>)
     5c4:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
     5c6:	4621      	mov	r1, r4
     5c8:	4628      	mov	r0, r5
     5ca:	4b04      	ldr	r3, [pc, #16]	; (5dc <can_async_write+0x2c>)
     5cc:	4798      	blx	r3
}
     5ce:	bd38      	pop	{r3, r4, r5, pc}
     5d0:	2000      	movs	r0, #0
     5d2:	e7f4      	b.n	5be <can_async_write+0xe>
     5d4:	00003230 	.word	0x00003230
     5d8:	0000080d 	.word	0x0000080d
     5dc:	00000a31 	.word	0x00000a31

000005e0 <can_async_register_callback>:
{
     5e0:	b570      	push	{r4, r5, r6, lr}
     5e2:	460c      	mov	r4, r1
     5e4:	4616      	mov	r6, r2
	ASSERT(descr);
     5e6:	4605      	mov	r5, r0
     5e8:	2281      	movs	r2, #129	; 0x81
     5ea:	490e      	ldr	r1, [pc, #56]	; (624 <can_async_register_callback+0x44>)
     5ec:	3000      	adds	r0, #0
     5ee:	bf18      	it	ne
     5f0:	2001      	movne	r0, #1
     5f2:	4b0d      	ldr	r3, [pc, #52]	; (628 <can_async_register_callback+0x48>)
     5f4:	4798      	blx	r3
	switch (type) {
     5f6:	2c01      	cmp	r4, #1
     5f8:	d00f      	beq.n	61a <can_async_register_callback+0x3a>
     5fa:	b124      	cbz	r4, 606 <can_async_register_callback+0x26>
     5fc:	2c02      	cmp	r4, #2
     5fe:	d00e      	beq.n	61e <can_async_register_callback+0x3e>
		return ERR_INVALID_ARG;
     600:	f06f 000c 	mvn.w	r0, #12
}
     604:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
     606:	622e      	str	r6, [r5, #32]
	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
     608:	1c32      	adds	r2, r6, #0
     60a:	bf18      	it	ne
     60c:	2201      	movne	r2, #1
     60e:	4621      	mov	r1, r4
     610:	4628      	mov	r0, r5
     612:	4b06      	ldr	r3, [pc, #24]	; (62c <can_async_register_callback+0x4c>)
     614:	4798      	blx	r3
	return ERR_NONE;
     616:	2000      	movs	r0, #0
     618:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
     61a:	61ee      	str	r6, [r5, #28]
		break;
     61c:	e7f4      	b.n	608 <can_async_register_callback+0x28>
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
     61e:	626e      	str	r6, [r5, #36]	; 0x24
		break;
     620:	e7f2      	b.n	608 <can_async_register_callback+0x28>
     622:	bf00      	nop
     624:	00003230 	.word	0x00003230
     628:	0000080d 	.word	0x0000080d
     62c:	00000b49 	.word	0x00000b49

00000630 <can_async_set_filter>:
{
     630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     632:	460d      	mov	r5, r1
     634:	4616      	mov	r6, r2
     636:	461f      	mov	r7, r3
	ASSERT(descr);
     638:	4604      	mov	r4, r0
     63a:	22b8      	movs	r2, #184	; 0xb8
     63c:	4906      	ldr	r1, [pc, #24]	; (658 <can_async_set_filter+0x28>)
     63e:	3000      	adds	r0, #0
     640:	bf18      	it	ne
     642:	2001      	movne	r0, #1
     644:	4b05      	ldr	r3, [pc, #20]	; (65c <can_async_set_filter+0x2c>)
     646:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
     648:	463b      	mov	r3, r7
     64a:	4632      	mov	r2, r6
     64c:	4629      	mov	r1, r5
     64e:	4620      	mov	r0, r4
     650:	4c03      	ldr	r4, [pc, #12]	; (660 <can_async_set_filter+0x30>)
     652:	47a0      	blx	r4
}
     654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     656:	bf00      	nop
     658:	00003230 	.word	0x00003230
     65c:	0000080d 	.word	0x0000080d
     660:	00000b8d 	.word	0x00000b8d

00000664 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     664:	b570      	push	{r4, r5, r6, lr}
     666:	460d      	mov	r5, r1
     668:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     66a:	4604      	mov	r4, r0
     66c:	b160      	cbz	r0, 688 <io_write+0x24>
     66e:	1c08      	adds	r0, r1, #0
     670:	bf18      	it	ne
     672:	2001      	movne	r0, #1
     674:	2234      	movs	r2, #52	; 0x34
     676:	4905      	ldr	r1, [pc, #20]	; (68c <io_write+0x28>)
     678:	4b05      	ldr	r3, [pc, #20]	; (690 <io_write+0x2c>)
     67a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     67c:	6823      	ldr	r3, [r4, #0]
     67e:	4632      	mov	r2, r6
     680:	4629      	mov	r1, r5
     682:	4620      	mov	r0, r4
     684:	4798      	blx	r3
}
     686:	bd70      	pop	{r4, r5, r6, pc}
     688:	2000      	movs	r0, #0
     68a:	e7f3      	b.n	674 <io_write+0x10>
     68c:	0000324c 	.word	0x0000324c
     690:	0000080d 	.word	0x0000080d

00000694 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     694:	b570      	push	{r4, r5, r6, lr}
     696:	460d      	mov	r5, r1
     698:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     69a:	4604      	mov	r4, r0
     69c:	b160      	cbz	r0, 6b8 <io_read+0x24>
     69e:	1c08      	adds	r0, r1, #0
     6a0:	bf18      	it	ne
     6a2:	2001      	movne	r0, #1
     6a4:	223d      	movs	r2, #61	; 0x3d
     6a6:	4905      	ldr	r1, [pc, #20]	; (6bc <io_read+0x28>)
     6a8:	4b05      	ldr	r3, [pc, #20]	; (6c0 <io_read+0x2c>)
     6aa:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     6ac:	6863      	ldr	r3, [r4, #4]
     6ae:	4632      	mov	r2, r6
     6b0:	4629      	mov	r1, r5
     6b2:	4620      	mov	r0, r4
     6b4:	4798      	blx	r3
}
     6b6:	bd70      	pop	{r4, r5, r6, pc}
     6b8:	2000      	movs	r0, #0
     6ba:	e7f3      	b.n	6a4 <io_read+0x10>
     6bc:	0000324c 	.word	0x0000324c
     6c0:	0000080d 	.word	0x0000080d

000006c4 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     6c8:	460f      	mov	r7, r1
     6ca:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     6cc:	4604      	mov	r4, r0
     6ce:	b328      	cbz	r0, 71c <usart_sync_write+0x58>
     6d0:	b331      	cbz	r1, 720 <usart_sync_write+0x5c>
     6d2:	1c10      	adds	r0, r2, #0
     6d4:	bf18      	it	ne
     6d6:	2001      	movne	r0, #1
     6d8:	22f1      	movs	r2, #241	; 0xf1
     6da:	4912      	ldr	r1, [pc, #72]	; (724 <usart_sync_write+0x60>)
     6dc:	4b12      	ldr	r3, [pc, #72]	; (728 <usart_sync_write+0x64>)
     6de:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     6e0:	3408      	adds	r4, #8
     6e2:	4d12      	ldr	r5, [pc, #72]	; (72c <usart_sync_write+0x68>)
     6e4:	4620      	mov	r0, r4
     6e6:	47a8      	blx	r5
     6e8:	2800      	cmp	r0, #0
     6ea:	d0fb      	beq.n	6e4 <usart_sync_write+0x20>
     6ec:	3f01      	subs	r7, #1
     6ee:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     6f0:	f8df 9040 	ldr.w	r9, [pc, #64]	; 734 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     6f4:	4d0d      	ldr	r5, [pc, #52]	; (72c <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     6f6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     6fa:	4620      	mov	r0, r4
     6fc:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     6fe:	4620      	mov	r0, r4
     700:	47a8      	blx	r5
     702:	2800      	cmp	r0, #0
     704:	d0fb      	beq.n	6fe <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     706:	3601      	adds	r6, #1
     708:	4546      	cmp	r6, r8
     70a:	d3f4      	bcc.n	6f6 <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     70c:	4d08      	ldr	r5, [pc, #32]	; (730 <usart_sync_write+0x6c>)
     70e:	4620      	mov	r0, r4
     710:	47a8      	blx	r5
     712:	2800      	cmp	r0, #0
     714:	d0fb      	beq.n	70e <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     716:	4630      	mov	r0, r6
     718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     71c:	2000      	movs	r0, #0
     71e:	e7db      	b.n	6d8 <usart_sync_write+0x14>
     720:	2000      	movs	r0, #0
     722:	e7d9      	b.n	6d8 <usart_sync_write+0x14>
     724:	00003260 	.word	0x00003260
     728:	0000080d 	.word	0x0000080d
     72c:	00000f0f 	.word	0x00000f0f
     730:	00000f19 	.word	0x00000f19
     734:	00000f01 	.word	0x00000f01

00000738 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     73c:	460f      	mov	r7, r1
     73e:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     740:	4604      	mov	r4, r0
     742:	b1e0      	cbz	r0, 77e <usart_sync_read+0x46>
     744:	b1e9      	cbz	r1, 782 <usart_sync_read+0x4a>
     746:	1c10      	adds	r0, r2, #0
     748:	bf18      	it	ne
     74a:	2001      	movne	r0, #1
     74c:	f44f 7286 	mov.w	r2, #268	; 0x10c
     750:	490d      	ldr	r1, [pc, #52]	; (788 <usart_sync_read+0x50>)
     752:	4b0e      	ldr	r3, [pc, #56]	; (78c <usart_sync_read+0x54>)
     754:	4798      	blx	r3
     756:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     758:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     75a:	3408      	adds	r4, #8
     75c:	4d0c      	ldr	r5, [pc, #48]	; (790 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     75e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 794 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     762:	4620      	mov	r0, r4
     764:	47a8      	blx	r5
     766:	2800      	cmp	r0, #0
     768:	d0fb      	beq.n	762 <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     76a:	4620      	mov	r0, r4
     76c:	47c8      	blx	r9
     76e:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     772:	3601      	adds	r6, #1
     774:	4546      	cmp	r6, r8
     776:	d3f4      	bcc.n	762 <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     778:	4630      	mov	r0, r6
     77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     77e:	2000      	movs	r0, #0
     780:	e7e4      	b.n	74c <usart_sync_read+0x14>
     782:	2000      	movs	r0, #0
     784:	e7e2      	b.n	74c <usart_sync_read+0x14>
     786:	bf00      	nop
     788:	00003260 	.word	0x00003260
     78c:	0000080d 	.word	0x0000080d
     790:	00000f23 	.word	0x00000f23
     794:	00000f07 	.word	0x00000f07

00000798 <usart_sync_init>:
{
     798:	b538      	push	{r3, r4, r5, lr}
     79a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     79c:	4604      	mov	r4, r0
     79e:	b198      	cbz	r0, 7c8 <usart_sync_init+0x30>
     7a0:	1c08      	adds	r0, r1, #0
     7a2:	bf18      	it	ne
     7a4:	2001      	movne	r0, #1
     7a6:	2234      	movs	r2, #52	; 0x34
     7a8:	4908      	ldr	r1, [pc, #32]	; (7cc <usart_sync_init+0x34>)
     7aa:	4b09      	ldr	r3, [pc, #36]	; (7d0 <usart_sync_init+0x38>)
     7ac:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     7ae:	4629      	mov	r1, r5
     7b0:	f104 0008 	add.w	r0, r4, #8
     7b4:	4b07      	ldr	r3, [pc, #28]	; (7d4 <usart_sync_init+0x3c>)
     7b6:	4798      	blx	r3
	if (init_status) {
     7b8:	4603      	mov	r3, r0
     7ba:	b918      	cbnz	r0, 7c4 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     7bc:	4a06      	ldr	r2, [pc, #24]	; (7d8 <usart_sync_init+0x40>)
     7be:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     7c0:	4a06      	ldr	r2, [pc, #24]	; (7dc <usart_sync_init+0x44>)
     7c2:	6022      	str	r2, [r4, #0]
}
     7c4:	4618      	mov	r0, r3
     7c6:	bd38      	pop	{r3, r4, r5, pc}
     7c8:	2000      	movs	r0, #0
     7ca:	e7ec      	b.n	7a6 <usart_sync_init+0xe>
     7cc:	00003260 	.word	0x00003260
     7d0:	0000080d 	.word	0x0000080d
     7d4:	00000ec1 	.word	0x00000ec1
     7d8:	00000739 	.word	0x00000739
     7dc:	000006c5 	.word	0x000006c5

000007e0 <usart_sync_enable>:
{
     7e0:	b510      	push	{r4, lr}
	ASSERT(descr);
     7e2:	4604      	mov	r4, r0
     7e4:	2253      	movs	r2, #83	; 0x53
     7e6:	4906      	ldr	r1, [pc, #24]	; (800 <usart_sync_enable+0x20>)
     7e8:	3000      	adds	r0, #0
     7ea:	bf18      	it	ne
     7ec:	2001      	movne	r0, #1
     7ee:	4b05      	ldr	r3, [pc, #20]	; (804 <usart_sync_enable+0x24>)
     7f0:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     7f2:	f104 0008 	add.w	r0, r4, #8
     7f6:	4b04      	ldr	r3, [pc, #16]	; (808 <usart_sync_enable+0x28>)
     7f8:	4798      	blx	r3
}
     7fa:	2000      	movs	r0, #0
     7fc:	bd10      	pop	{r4, pc}
     7fe:	bf00      	nop
     800:	00003260 	.word	0x00003260
     804:	0000080d 	.word	0x0000080d
     808:	00000eed 	.word	0x00000eed

0000080c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     80c:	b900      	cbnz	r0, 810 <assert+0x4>
		__asm("BKPT #0");
     80e:	be00      	bkpt	0x0000
     810:	4770      	bx	lr
	...

00000814 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     814:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     816:	4a06      	ldr	r2, [pc, #24]	; (830 <_sbrk+0x1c>)
     818:	6812      	ldr	r2, [r2, #0]
     81a:	b122      	cbz	r2, 826 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     81c:	4a04      	ldr	r2, [pc, #16]	; (830 <_sbrk+0x1c>)
     81e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     820:	4403      	add	r3, r0
     822:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     824:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     826:	4903      	ldr	r1, [pc, #12]	; (834 <_sbrk+0x20>)
     828:	4a01      	ldr	r2, [pc, #4]	; (830 <_sbrk+0x1c>)
     82a:	6011      	str	r1, [r2, #0]
     82c:	e7f6      	b.n	81c <_sbrk+0x8>
     82e:	bf00      	nop
     830:	20000200 	.word	0x20000200
     834:	200102a8 	.word	0x200102a8

00000838 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     838:	f04f 30ff 	mov.w	r0, #4294967295
     83c:	4770      	bx	lr

0000083e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     83e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     842:	604b      	str	r3, [r1, #4]

	return 0;
}
     844:	2000      	movs	r0, #0
     846:	4770      	bx	lr

00000848 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     848:	2001      	movs	r0, #1
     84a:	4770      	bx	lr

0000084c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     84c:	2000      	movs	r0, #0
     84e:	4770      	bx	lr

00000850 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
     850:	b410      	push	{r4}
	dev->hw = hw;
     852:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
     854:	698b      	ldr	r3, [r1, #24]
     856:	f043 0301 	orr.w	r3, r3, #1
     85a:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
     85c:	6802      	ldr	r2, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
     85e:	6993      	ldr	r3, [r2, #24]
     860:	f013 0f01 	tst.w	r3, #1
     864:	d0fb      	beq.n	85e <_can_async_init+0xe>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
     866:	6993      	ldr	r3, [r2, #24]
     868:	f043 0302 	orr.w	r3, r3, #2
     86c:	6193      	str	r3, [r2, #24]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
     86e:	4b38      	ldr	r3, [pc, #224]	; (950 <_can_async_init+0x100>)
     870:	4299      	cmp	r1, r3
     872:	d012      	beq.n	89a <_can_async_init+0x4a>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
     874:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
     876:	6993      	ldr	r3, [r2, #24]
     878:	f023 0302 	bic.w	r3, r3, #2
     87c:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
     87e:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
     880:	6993      	ldr	r3, [r2, #24]
     882:	f023 0301 	bic.w	r3, r3, #1
     886:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
     888:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
     88a:	6993      	ldr	r3, [r2, #24]
     88c:	f013 0f01 	tst.w	r3, #1
     890:	d1fb      	bne.n	88a <_can_async_init+0x3a>
	};

	return ERR_NONE;
}
     892:	2000      	movs	r0, #0
     894:	f85d 4b04 	ldr.w	r4, [sp], #4
     898:	4770      	bx	lr
		_can1_dev    = dev;
     89a:	4b2e      	ldr	r3, [pc, #184]	; (954 <_can_async_init+0x104>)
     89c:	461a      	mov	r2, r3
     89e:	f842 0b04 	str.w	r0, [r2], #4
		dev->context = (void *)&_can1_context;
     8a2:	492d      	ldr	r1, [pc, #180]	; (958 <_can_async_init+0x108>)
     8a4:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
     8a6:	6804      	ldr	r4, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
     8a8:	69a1      	ldr	r1, [r4, #24]
     8aa:	f441 7140 	orr.w	r1, r1, #768	; 0x300
     8ae:	61a1      	str	r1, [r4, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
     8b0:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
     8b2:	2402      	movs	r4, #2
     8b4:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
     8b6:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
     8b8:	4c28      	ldr	r4, [pc, #160]	; (95c <_can_async_init+0x10c>)
     8ba:	61cc      	str	r4, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
     8bc:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
     8be:	f640 5443 	movw	r4, #3395	; 0xd43
     8c2:	60cc      	str	r4, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
     8c4:	6804      	ldr	r4, [r0, #0]
     8c6:	4926      	ldr	r1, [pc, #152]	; (960 <_can_async_init+0x110>)
     8c8:	b289      	uxth	r1, r1
     8ca:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
     8ce:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
     8d2:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
     8d6:	6804      	ldr	r4, [r0, #0]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
     8d8:	2100      	movs	r1, #0
     8da:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
     8de:	6804      	ldr	r4, [r0, #0]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
     8e0:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
     8e4:	6804      	ldr	r4, [r0, #0]
     8e6:	491f      	ldr	r1, [pc, #124]	; (964 <_can_async_init+0x114>)
     8e8:	b289      	uxth	r1, r1
     8ea:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
	((Can *)hw)->TXBC.reg = data;
     8ee:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
     8f2:	6801      	ldr	r1, [r0, #0]
     8f4:	b292      	uxth	r2, r2
     8f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
     8fa:	f8c1 20f0 	str.w	r2, [r1, #240]	; 0xf0
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
     8fe:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->GFC.reg = data;
     900:	2128      	movs	r1, #40	; 0x28
     902:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
     906:	6801      	ldr	r1, [r0, #0]
     908:	f103 0214 	add.w	r2, r3, #20
     90c:	b292      	uxth	r2, r2
     90e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Can *)hw)->SIDFC.reg = data;
     912:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
     916:	6802      	ldr	r2, [r0, #0]
     918:	331c      	adds	r3, #28
     91a:	b29b      	uxth	r3, r3
     91c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Can *)hw)->XIDFC.reg = data;
     920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
     924:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->XIDAM.reg = data;
     926:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
     92a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     92e:	4b0e      	ldr	r3, [pc, #56]	; (968 <_can_async_init+0x118>)
     930:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
     938:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     93c:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     940:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     944:	609a      	str	r2, [r3, #8]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
     946:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
     948:	2201      	movs	r2, #1
     94a:	65da      	str	r2, [r3, #92]	; 0x5c
     94c:	e792      	b.n	874 <_can_async_init+0x24>
     94e:	bf00      	nop
     950:	42000400 	.word	0x42000400
     954:	20000204 	.word	0x20000204
     958:	20000000 	.word	0x20000000
     95c:	1c003a13 	.word	0x1c003a13
     960:	20000280 	.word	0x20000280
     964:	20000270 	.word	0x20000270
     968:	e000e100 	.word	0xe000e100

0000096c <_can_async_enable>:
/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
	hri_can_clear_CCCR_INIT_bit(dev->hw);
     96c:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
     96e:	6993      	ldr	r3, [r2, #24]
     970:	f023 0301 	bic.w	r3, r3, #1
     974:	6193      	str	r3, [r2, #24]
	return ERR_NONE;
}
     976:	2000      	movs	r0, #0
     978:	4770      	bx	lr
	...

0000097c <_can_async_read>:
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
	struct _can_rx_fifo_entry *f = NULL;
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
     97c:	6803      	ldr	r3, [r0, #0]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
     97e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
     982:	f012 0f7f 	tst.w	r2, #127	; 0x7f
     986:	d045      	beq.n	a14 <_can_async_read+0x98>
{
     988:	b5f0      	push	{r4, r5, r6, r7, lr}
     98a:	b085      	sub	sp, #20
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
     98c:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
	if (dev->hw == CAN0) {
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
     990:	4a23      	ldr	r2, [pc, #140]	; (a20 <_can_async_read+0xa4>)
     992:	4293      	cmp	r3, r2
     994:	d002      	beq.n	99c <_can_async_read+0x20>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
	}
#endif

	if (f == NULL) {
		return ERR_NO_RESOURCE;
     996:	f06f 001b 	mvn.w	r0, #27
     99a:	e032      	b.n	a02 <_can_async_read+0x86>
     99c:	f3c5 2505 	ubfx	r5, r5, #8, #6
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
     9a0:	012a      	lsls	r2, r5, #4
     9a2:	4b20      	ldr	r3, [pc, #128]	; (a24 <_can_async_read+0xa8>)
	if (f == NULL) {
     9a4:	18d6      	adds	r6, r2, r3
     9a6:	d038      	beq.n	a1a <_can_async_read+0x9e>
	}

	if (f->R0.bit.XTD == 1) {
     9a8:	58d4      	ldr	r4, [r2, r3]
     9aa:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
     9ae:	d12a      	bne.n	a06 <_can_async_read+0x8a>
		msg->fmt = CAN_FMT_EXTID;
		msg->id  = f->R0.bit.ID;
	} else {
		msg->fmt = CAN_FMT_STDID;
     9b0:	2400      	movs	r4, #0
     9b2:	734c      	strb	r4, [r1, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
     9b4:	58d4      	ldr	r4, [r2, r3]
     9b6:	f3c4 448a 	ubfx	r4, r4, #18, #11
     9ba:	600c      	str	r4, [r1, #0]
	}

	if (f->R0.bit.RTR == 1) {
     9bc:	58d3      	ldr	r3, [r2, r3]
     9be:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
		msg->type = CAN_TYPE_REMOTE;
     9c2:	bf1c      	itt	ne
     9c4:	2301      	movne	r3, #1
     9c6:	710b      	strbne	r3, [r1, #4]
     9c8:	460c      	mov	r4, r1
     9ca:	4607      	mov	r7, r0
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
     9cc:	4b16      	ldr	r3, [pc, #88]	; (a28 <_can_async_read+0xac>)
     9ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     9d0:	f10d 0e10 	add.w	lr, sp, #16
     9d4:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
     9d8:	6873      	ldr	r3, [r6, #4]
     9da:	f3c3 4303 	ubfx	r3, r3, #16, #4
     9de:	4473      	add	r3, lr
     9e0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
     9e4:	7322      	strb	r2, [r4, #12]

	memcpy(msg->data, f->data, msg->len);
     9e6:	f106 0108 	add.w	r1, r6, #8
     9ea:	68a0      	ldr	r0, [r4, #8]
     9ec:	4b0f      	ldr	r3, [pc, #60]	; (a2c <_can_async_read+0xb0>)
     9ee:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
     9f0:	683a      	ldr	r2, [r7, #0]
	tmp = ((Can *)hw)->RXF0A.reg;
     9f2:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	tmp &= ~CAN_RXF0A_F0AI_Msk;
     9f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	tmp |= CAN_RXF0A_F0AI(data);
     9fa:	431d      	orrs	r5, r3
	((Can *)hw)->RXF0A.reg = tmp;
     9fc:	f8c2 50a8 	str.w	r5, [r2, #168]	; 0xa8

	return ERR_NONE;
     a00:	2000      	movs	r0, #0
}
     a02:	b005      	add	sp, #20
     a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg->fmt = CAN_FMT_EXTID;
     a06:	2401      	movs	r4, #1
     a08:	734c      	strb	r4, [r1, #13]
		msg->id  = f->R0.bit.ID;
     a0a:	58d4      	ldr	r4, [r2, r3]
     a0c:	f3c4 041c 	ubfx	r4, r4, #0, #29
     a10:	600c      	str	r4, [r1, #0]
     a12:	e7d3      	b.n	9bc <_can_async_read+0x40>
		return ERR_NOT_FOUND;
     a14:	f06f 0009 	mvn.w	r0, #9
     a18:	4770      	bx	lr
		return ERR_NO_RESOURCE;
     a1a:	f06f 001b 	mvn.w	r0, #27
     a1e:	e7f0      	b.n	a02 <_can_async_read+0x86>
     a20:	42000400 	.word	0x42000400
     a24:	20000280 	.word	0x20000280
     a28:	0000327c 	.word	0x0000327c
     a2c:	0000151d 	.word	0x0000151d

00000a30 <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
     a30:	b538      	push	{r3, r4, r5, lr}
	struct _can_tx_fifo_entry *f = NULL;
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
     a32:	6803      	ldr	r3, [r0, #0]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
     a34:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
     a38:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
     a3c:	d177      	bne.n	b2e <_can_async_write+0xfe>
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
     a3e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
	if (dev->hw == CAN0) {
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
     a42:	4c3e      	ldr	r4, [pc, #248]	; (b3c <_can_async_write+0x10c>)
     a44:	42a3      	cmp	r3, r4
     a46:	d002      	beq.n	a4e <_can_async_write+0x1e>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
	}
#endif
	if (f == NULL) {
		return ERR_NO_RESOURCE;
     a48:	f06f 001b 	mvn.w	r0, #27
     a4c:	bd38      	pop	{r3, r4, r5, pc}
     a4e:	f3c2 4204 	ubfx	r2, r2, #16, #5
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
     a52:	0112      	lsls	r2, r2, #4
     a54:	4d3a      	ldr	r5, [pc, #232]	; (b40 <_can_async_write+0x110>)
	if (f == NULL) {
     a56:	1953      	adds	r3, r2, r5
     a58:	d06c      	beq.n	b34 <_can_async_write+0x104>
	}

	if (msg->fmt == CAN_FMT_EXTID) {
     a5a:	7b4c      	ldrb	r4, [r1, #13]
     a5c:	2c01      	cmp	r4, #1
		f->T0.val     = msg->id;
     a5e:	680c      	ldr	r4, [r1, #0]
     a60:	bf03      	ittte	eq
     a62:	5154      	streq	r4, [r2, r5]
		f->T0.bit.XTD = 1;
     a64:	5954      	ldreq	r4, [r2, r5]
     a66:	f044 4480 	orreq.w	r4, r4, #1073741824	; 0x40000000
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
     a6a:	04a4      	lslne	r4, r4, #18
     a6c:	5154      	str	r4, [r2, r5]
	}

	if (msg->len <= 8) {
     a6e:	7b0a      	ldrb	r2, [r1, #12]
     a70:	2a08      	cmp	r2, #8
     a72:	d825      	bhi.n	ac0 <_can_async_write+0x90>
		f->T1.bit.DLC = msg->len;
     a74:	685c      	ldr	r4, [r3, #4]
     a76:	f362 4413 	bfi	r4, r2, #16, #4
     a7a:	605c      	str	r4, [r3, #4]
     a7c:	4604      	mov	r4, r0
		f->T1.bit.DLC = 0xE;
	} else if (msg->len <= 64) {
		f->T1.bit.DLC = 0xF;
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
     a7e:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
     a80:	6992      	ldr	r2, [r2, #24]
	return (bool)tmp;
     a82:	f3c2 2200 	ubfx	r2, r2, #8, #1
     a86:	6858      	ldr	r0, [r3, #4]
     a88:	f362 5055 	bfi	r0, r2, #21, #1
     a8c:	6058      	str	r0, [r3, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
     a8e:	6822      	ldr	r2, [r4, #0]
	tmp = ((Can *)hw)->CCCR.reg;
     a90:	6992      	ldr	r2, [r2, #24]
	return (bool)tmp;
     a92:	f3c2 2240 	ubfx	r2, r2, #9, #1
     a96:	6858      	ldr	r0, [r3, #4]
     a98:	f362 5014 	bfi	r0, r2, #20, #1
     a9c:	6058      	str	r0, [r3, #4]

	memcpy(f->data, msg->data, msg->len);
     a9e:	7b0a      	ldrb	r2, [r1, #12]
     aa0:	6889      	ldr	r1, [r1, #8]
     aa2:	f103 0008 	add.w	r0, r3, #8
     aa6:	4b27      	ldr	r3, [pc, #156]	; (b44 <_can_async_write+0x114>)
     aa8:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
     aaa:	6821      	ldr	r1, [r4, #0]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
     aac:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
     ab0:	f3c2 4204 	ubfx	r2, r2, #16, #5
     ab4:	2301      	movs	r3, #1
     ab6:	4093      	lsls	r3, r2
	((Can *)hw)->TXBAR.reg = data;
     ab8:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
	return ERR_NONE;
     abc:	2000      	movs	r0, #0
     abe:	bd38      	pop	{r3, r4, r5, pc}
	} else if (msg->len <= 12) {
     ac0:	2a0c      	cmp	r2, #12
     ac2:	d805      	bhi.n	ad0 <_can_async_write+0xa0>
		f->T1.bit.DLC = 0x9;
     ac4:	685a      	ldr	r2, [r3, #4]
     ac6:	2409      	movs	r4, #9
     ac8:	f364 4213 	bfi	r2, r4, #16, #4
     acc:	605a      	str	r2, [r3, #4]
     ace:	e7d5      	b.n	a7c <_can_async_write+0x4c>
	} else if (msg->len <= 16) {
     ad0:	2a10      	cmp	r2, #16
     ad2:	d805      	bhi.n	ae0 <_can_async_write+0xb0>
		f->T1.bit.DLC = 0xA;
     ad4:	685a      	ldr	r2, [r3, #4]
     ad6:	240a      	movs	r4, #10
     ad8:	f364 4213 	bfi	r2, r4, #16, #4
     adc:	605a      	str	r2, [r3, #4]
     ade:	e7cd      	b.n	a7c <_can_async_write+0x4c>
	} else if (msg->len <= 20) {
     ae0:	2a14      	cmp	r2, #20
     ae2:	d805      	bhi.n	af0 <_can_async_write+0xc0>
		f->T1.bit.DLC = 0xB;
     ae4:	685a      	ldr	r2, [r3, #4]
     ae6:	240b      	movs	r4, #11
     ae8:	f364 4213 	bfi	r2, r4, #16, #4
     aec:	605a      	str	r2, [r3, #4]
     aee:	e7c5      	b.n	a7c <_can_async_write+0x4c>
	} else if (msg->len <= 24) {
     af0:	2a18      	cmp	r2, #24
     af2:	d805      	bhi.n	b00 <_can_async_write+0xd0>
		f->T1.bit.DLC = 0xC;
     af4:	685a      	ldr	r2, [r3, #4]
     af6:	240c      	movs	r4, #12
     af8:	f364 4213 	bfi	r2, r4, #16, #4
     afc:	605a      	str	r2, [r3, #4]
     afe:	e7bd      	b.n	a7c <_can_async_write+0x4c>
	} else if (msg->len <= 32) {
     b00:	2a20      	cmp	r2, #32
     b02:	d805      	bhi.n	b10 <_can_async_write+0xe0>
		f->T1.bit.DLC = 0xD;
     b04:	685a      	ldr	r2, [r3, #4]
     b06:	240d      	movs	r4, #13
     b08:	f364 4213 	bfi	r2, r4, #16, #4
     b0c:	605a      	str	r2, [r3, #4]
     b0e:	e7b5      	b.n	a7c <_can_async_write+0x4c>
	} else if (msg->len <= 48) {
     b10:	2a30      	cmp	r2, #48	; 0x30
     b12:	d805      	bhi.n	b20 <_can_async_write+0xf0>
		f->T1.bit.DLC = 0xE;
     b14:	685a      	ldr	r2, [r3, #4]
     b16:	240e      	movs	r4, #14
     b18:	f364 4213 	bfi	r2, r4, #16, #4
     b1c:	605a      	str	r2, [r3, #4]
     b1e:	e7ad      	b.n	a7c <_can_async_write+0x4c>
	} else if (msg->len <= 64) {
     b20:	2a40      	cmp	r2, #64	; 0x40
     b22:	d8ab      	bhi.n	a7c <_can_async_write+0x4c>
		f->T1.bit.DLC = 0xF;
     b24:	685a      	ldr	r2, [r3, #4]
     b26:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
     b2a:	605a      	str	r2, [r3, #4]
     b2c:	e7a6      	b.n	a7c <_can_async_write+0x4c>
		return ERR_NO_RESOURCE;
     b2e:	f06f 001b 	mvn.w	r0, #27
     b32:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_NO_RESOURCE;
     b34:	f06f 001b 	mvn.w	r0, #27
}
     b38:	bd38      	pop	{r3, r4, r5, pc}
     b3a:	bf00      	nop
     b3c:	42000400 	.word	0x42000400
     b40:	20000270 	.word	0x20000270
     b44:	0000151d 	.word	0x0000151d

00000b48 <_can_async_set_irq_state>:
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
     b48:	b121      	cbz	r1, b54 <_can_async_set_irq_state+0xc>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
	} else if (type == CAN_ASYNC_TX_CB) {
     b4a:	2901      	cmp	r1, #1
     b4c:	d009      	beq.n	b62 <_can_async_set_irq_state+0x1a>
		hri_can_write_IE_TCE_bit(dev->hw, state);
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
	} else if (type == CAN_ASYNC_IRQ_CB) {
     b4e:	2902      	cmp	r1, #2
     b50:	d014      	beq.n	b7c <_can_async_set_irq_state+0x34>
     b52:	4770      	bx	lr
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
     b54:	6801      	ldr	r1, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
     b56:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~CAN_IE_RF0NE;
     b58:	f023 0301 	bic.w	r3, r3, #1
	tmp |= value << CAN_IE_RF0NE_Pos;
     b5c:	431a      	orrs	r2, r3
	((Can *)hw)->IE.reg = tmp;
     b5e:	654a      	str	r2, [r1, #84]	; 0x54
     b60:	4770      	bx	lr
		hri_can_write_IE_TCE_bit(dev->hw, state);
     b62:	6801      	ldr	r1, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
     b64:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~CAN_IE_TCE;
     b66:	f423 7300 	bic.w	r3, r3, #512	; 0x200
	tmp |= value << CAN_IE_TCE_Pos;
     b6a:	ea43 2242 	orr.w	r2, r3, r2, lsl #9
	((Can *)hw)->IE.reg = tmp;
     b6e:	654a      	str	r2, [r1, #84]	; 0x54
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
     b70:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->TXBTIE.reg = data;
     b72:	f04f 32ff 	mov.w	r2, #4294967295
     b76:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     b7a:	4770      	bx	lr
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
     b7c:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
     b7e:	6d53      	ldr	r3, [r2, #84]	; 0x54
	tmp &= mask;
     b80:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
     b84:	059b      	lsls	r3, r3, #22
     b86:	0d9b      	lsrs	r3, r3, #22
	((Can *)hw)->IE.reg = data;
     b88:	6553      	str	r3, [r2, #84]	; 0x54
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
     b8a:	e7e2      	b.n	b52 <_can_async_set_irq_state+0xa>

00000b8c <_can_async_set_filter>:
                              struct can_filter *filter)
{
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
     b8c:	6980      	ldr	r0, [r0, #24]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];

	if (fmt == CAN_FMT_STDID) {
     b8e:	b9f2      	cbnz	r2, bce <_can_async_set_filter+0x42>
	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
     b90:	68c2      	ldr	r2, [r0, #12]
		if (filter == NULL) {
     b92:	b1cb      	cbz	r3, bc8 <_can_async_set_filter+0x3c>
			sf->S0.val = 0;
			return ERR_NONE;
		}
		sf->S0.val       = filter->mask;
     b94:	6858      	ldr	r0, [r3, #4]
     b96:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
		sf->S0.bit.SFID1 = filter->id;
     b9a:	6818      	ldr	r0, [r3, #0]
     b9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
     ba0:	f360 431a 	bfi	r3, r0, #16, #11
     ba4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
     ba8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
     bac:	2002      	movs	r0, #2
     bae:	f360 739f 	bfi	r3, r0, #30, #2
     bb2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
     bb6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
     bba:	2001      	movs	r0, #1
     bbc:	f360 63dd 	bfi	r3, r0, #27, #3
     bc0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		ef->F1.val      = filter->mask;
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
	}

	return ERR_NONE;
}
     bc4:	2000      	movs	r0, #0
     bc6:	4770      	bx	lr
			sf->S0.val = 0;
     bc8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			return ERR_NONE;
     bcc:	e7fa      	b.n	bc4 <_can_async_set_filter+0x38>
{
     bce:	b430      	push	{r4, r5}
	} else if (fmt == CAN_FMT_EXTID) {
     bd0:	2a01      	cmp	r2, #1
     bd2:	d002      	beq.n	bda <_can_async_set_filter+0x4e>
}
     bd4:	2000      	movs	r0, #0
     bd6:	bc30      	pop	{r4, r5}
     bd8:	4770      	bx	lr
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
     bda:	6902      	ldr	r2, [r0, #16]
     bdc:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
		if (filter == NULL) {
     be0:	b18b      	cbz	r3, c06 <_can_async_set_filter+0x7a>
		ef->F0.val      = filter->id;
     be2:	681c      	ldr	r4, [r3, #0]
     be4:	f842 4031 	str.w	r4, [r2, r1, lsl #3]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
     be8:	f852 4031 	ldr.w	r4, [r2, r1, lsl #3]
     bec:	2501      	movs	r5, #1
     bee:	f365 745f 	bfi	r4, r5, #29, #3
     bf2:	f842 4031 	str.w	r4, [r2, r1, lsl #3]
		ef->F1.val      = filter->mask;
     bf6:	685b      	ldr	r3, [r3, #4]
     bf8:	6043      	str	r3, [r0, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
     bfa:	6843      	ldr	r3, [r0, #4]
     bfc:	2202      	movs	r2, #2
     bfe:	f362 739f 	bfi	r3, r2, #30, #2
     c02:	6043      	str	r3, [r0, #4]
     c04:	e7e6      	b.n	bd4 <_can_async_set_filter+0x48>
			ef->F0.val = 0;
     c06:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
			return ERR_NONE;
     c0a:	e7e3      	b.n	bd4 <_can_async_set_filter+0x48>

00000c0c <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
     c0c:	b538      	push	{r3, r4, r5, lr}
	struct _can_async_device *dev = _can1_dev;
     c0e:	4b1d      	ldr	r3, [pc, #116]	; (c84 <CAN1_Handler+0x78>)
     c10:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
     c12:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
     c14:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
     c16:	f014 0f01 	tst.w	r4, #1
     c1a:	d11c      	bne.n	c56 <CAN1_Handler+0x4a>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
     c1c:	f414 7f00 	tst.w	r4, #512	; 0x200
     c20:	d11d      	bne.n	c5e <CAN1_Handler+0x52>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
     c22:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
     c26:	d11e      	bne.n	c66 <CAN1_Handler+0x5a>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
     c28:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
     c2c:	d120      	bne.n	c70 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
     c2e:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
     c32:	d00a      	beq.n	c4a <CAN1_Handler+0x3e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
     c34:	68ea      	ldr	r2, [r5, #12]
     c36:	682b      	ldr	r3, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
     c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     c3a:	f3c3 1340 	ubfx	r3, r3, #5, #1
     c3e:	2b00      	cmp	r3, #0
     c40:	bf14      	ite	ne
     c42:	2102      	movne	r1, #2
     c44:	2101      	moveq	r1, #1
     c46:	4628      	mov	r0, r5
     c48:	4790      	blx	r2
	}

	if (ir & CAN_IR_RF0L) {
     c4a:	f014 0f08 	tst.w	r4, #8
     c4e:	d114      	bne.n	c7a <CAN1_Handler+0x6e>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
     c50:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
     c52:	651c      	str	r4, [r3, #80]	; 0x50
     c54:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
     c56:	68ab      	ldr	r3, [r5, #8]
     c58:	4628      	mov	r0, r5
     c5a:	4798      	blx	r3
     c5c:	e7de      	b.n	c1c <CAN1_Handler+0x10>
		dev->cb.tx_done(dev);
     c5e:	686b      	ldr	r3, [r5, #4]
     c60:	4628      	mov	r0, r5
     c62:	4798      	blx	r3
     c64:	e7dd      	b.n	c22 <CAN1_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
     c66:	68eb      	ldr	r3, [r5, #12]
     c68:	2103      	movs	r1, #3
     c6a:	4628      	mov	r0, r5
     c6c:	4798      	blx	r3
     c6e:	e7db      	b.n	c28 <CAN1_Handler+0x1c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
     c70:	68eb      	ldr	r3, [r5, #12]
     c72:	2100      	movs	r1, #0
     c74:	4628      	mov	r0, r5
     c76:	4798      	blx	r3
     c78:	e7d9      	b.n	c2e <CAN1_Handler+0x22>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
     c7a:	68eb      	ldr	r3, [r5, #12]
     c7c:	2104      	movs	r1, #4
     c7e:	4628      	mov	r0, r5
     c80:	4798      	blx	r3
     c82:	e7e5      	b.n	c50 <CAN1_Handler+0x44>
     c84:	20000204 	.word	0x20000204

00000c88 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     c88:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     c8a:	4a09      	ldr	r2, [pc, #36]	; (cb0 <_init_chip+0x28>)
     c8c:	8813      	ldrh	r3, [r2, #0]
     c8e:	b29b      	uxth	r3, r3
     c90:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
     c94:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     c96:	4b07      	ldr	r3, [pc, #28]	; (cb4 <_init_chip+0x2c>)
     c98:	4798      	blx	r3
	_oscctrl_init_sources();
     c9a:	4b07      	ldr	r3, [pc, #28]	; (cb8 <_init_chip+0x30>)
     c9c:	4798      	blx	r3
	_mclk_init();
     c9e:	4b07      	ldr	r3, [pc, #28]	; (cbc <_init_chip+0x34>)
     ca0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     ca2:	4b07      	ldr	r3, [pc, #28]	; (cc0 <_init_chip+0x38>)
     ca4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     ca6:	f640 70ff 	movw	r0, #4095	; 0xfff
     caa:	4b06      	ldr	r3, [pc, #24]	; (cc4 <_init_chip+0x3c>)
     cac:	4798      	blx	r3
     cae:	bd08      	pop	{r3, pc}
     cb0:	41004000 	.word	0x41004000
     cb4:	00000d31 	.word	0x00000d31
     cb8:	00000d51 	.word	0x00000d51
     cbc:	00000d25 	.word	0x00000d25
     cc0:	00000d55 	.word	0x00000d55
     cc4:	00000cc9 	.word	0x00000cc9

00000cc8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     cc8:	f010 0f01 	tst.w	r0, #1
     ccc:	d008      	beq.n	ce0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     cce:	4a11      	ldr	r2, [pc, #68]	; (d14 <_gclk_init_generators_by_fref+0x4c>)
     cd0:	4b11      	ldr	r3, [pc, #68]	; (d18 <_gclk_init_generators_by_fref+0x50>)
     cd2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     cd4:	4619      	mov	r1, r3
     cd6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     cda:	684b      	ldr	r3, [r1, #4]
     cdc:	4213      	tst	r3, r2
     cde:	d1fc      	bne.n	cda <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
     ce0:	f010 0f04 	tst.w	r0, #4
     ce4:	d008      	beq.n	cf8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     ce6:	4a0d      	ldr	r2, [pc, #52]	; (d1c <_gclk_init_generators_by_fref+0x54>)
     ce8:	4b0b      	ldr	r3, [pc, #44]	; (d18 <_gclk_init_generators_by_fref+0x50>)
     cea:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     cec:	4619      	mov	r1, r3
     cee:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     cf2:	684b      	ldr	r3, [r1, #4]
     cf4:	4213      	tst	r3, r2
     cf6:	d1fc      	bne.n	cf2 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     cf8:	f010 0f08 	tst.w	r0, #8
     cfc:	d008      	beq.n	d10 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     cfe:	4a08      	ldr	r2, [pc, #32]	; (d20 <_gclk_init_generators_by_fref+0x58>)
     d00:	4b05      	ldr	r3, [pc, #20]	; (d18 <_gclk_init_generators_by_fref+0x50>)
     d02:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     d04:	4619      	mov	r1, r3
     d06:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     d0a:	684b      	ldr	r3, [r1, #4]
     d0c:	4213      	tst	r3, r2
     d0e:	d1fc      	bne.n	d0a <_gclk_init_generators_by_fref+0x42>
     d10:	4770      	bx	lr
     d12:	bf00      	nop
     d14:	00010107 	.word	0x00010107
     d18:	40001c00 	.word	0x40001c00
     d1c:	00030107 	.word	0x00030107
     d20:	00010105 	.word	0x00010105

00000d24 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     d24:	2201      	movs	r2, #1
     d26:	4b01      	ldr	r3, [pc, #4]	; (d2c <_mclk_init+0x8>)
     d28:	715a      	strb	r2, [r3, #5]
     d2a:	4770      	bx	lr
     d2c:	40000800 	.word	0x40000800

00000d30 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     d30:	4b06      	ldr	r3, [pc, #24]	; (d4c <_osc32kctrl_init_sources+0x1c>)
     d32:	f242 028e 	movw	r2, #8334	; 0x208e
     d36:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     d38:	2200      	movs	r2, #0
     d3a:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     d3c:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     d3e:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     d40:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     d44:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     d46:	2201      	movs	r2, #1
     d48:	741a      	strb	r2, [r3, #16]
     d4a:	4770      	bx	lr
     d4c:	40001400 	.word	0x40001400

00000d50 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
     d50:	4770      	bx	lr
	...

00000d54 <_oscctrl_init_referenced_generators>:

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
     d54:	4a0e      	ldr	r2, [pc, #56]	; (d90 <_oscctrl_init_referenced_generators+0x3c>)
     d56:	4b0f      	ldr	r3, [pc, #60]	; (d94 <_oscctrl_init_referenced_generators+0x40>)
     d58:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
     d5a:	461a      	mov	r2, r3
     d5c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
     d5e:	f013 0f06 	tst.w	r3, #6
     d62:	d1fb      	bne.n	d5c <_oscctrl_init_referenced_generators+0x8>

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
     d64:	4b0b      	ldr	r3, [pc, #44]	; (d94 <_oscctrl_init_referenced_generators+0x40>)
     d66:	f44f 6202 	mov.w	r2, #2080	; 0x820
     d6a:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
     d6c:	2202      	movs	r2, #2
     d6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
     d72:	461a      	mov	r2, r3
     d74:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
     d76:	f013 0f02 	tst.w	r3, #2
     d7a:	d1fb      	bne.n	d74 <_oscctrl_init_referenced_generators+0x20>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
     d7c:	4b05      	ldr	r3, [pc, #20]	; (d94 <_oscctrl_init_referenced_generators+0x40>)
     d7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
     d80:	f012 0f01 	tst.w	r2, #1
     d84:	d103      	bne.n	d8e <_oscctrl_init_referenced_generators+0x3a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
     d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     d88:	f012 0f02 	tst.w	r2, #2
     d8c:	d0f7      	beq.n	d7e <_oscctrl_init_referenced_generators+0x2a>
     d8e:	4770      	bx	lr
     d90:	00020e4d 	.word	0x00020e4d
     d94:	40001000 	.word	0x40001000

00000d98 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     d98:	b500      	push	{lr}
     d9a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     d9c:	4b0d      	ldr	r3, [pc, #52]	; (dd4 <RAMECC_Handler+0x3c>)
     d9e:	789b      	ldrb	r3, [r3, #2]
     da0:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     da2:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     da4:	9b01      	ldr	r3, [sp, #4]
     da6:	f013 0f02 	tst.w	r3, #2
     daa:	d006      	beq.n	dba <RAMECC_Handler+0x22>
     dac:	4b0a      	ldr	r3, [pc, #40]	; (dd8 <RAMECC_Handler+0x40>)
     dae:	681b      	ldr	r3, [r3, #0]
     db0:	b11b      	cbz	r3, dba <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     db2:	4a08      	ldr	r2, [pc, #32]	; (dd4 <RAMECC_Handler+0x3c>)
     db4:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     db6:	4798      	blx	r3
     db8:	e009      	b.n	dce <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     dba:	9b01      	ldr	r3, [sp, #4]
     dbc:	f013 0f01 	tst.w	r3, #1
     dc0:	d005      	beq.n	dce <RAMECC_Handler+0x36>
     dc2:	4b05      	ldr	r3, [pc, #20]	; (dd8 <RAMECC_Handler+0x40>)
     dc4:	685b      	ldr	r3, [r3, #4]
     dc6:	b113      	cbz	r3, dce <RAMECC_Handler+0x36>
     dc8:	4a02      	ldr	r2, [pc, #8]	; (dd4 <RAMECC_Handler+0x3c>)
     dca:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     dcc:	4798      	blx	r3
	} else {
		return;
	}
}
     dce:	b003      	add	sp, #12
     dd0:	f85d fb04 	ldr.w	pc, [sp], #4
     dd4:	41020000 	.word	0x41020000
     dd8:	20000290 	.word	0x20000290

00000ddc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     ddc:	b470      	push	{r4, r5, r6}
     dde:	b089      	sub	sp, #36	; 0x24
     de0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     de2:	466c      	mov	r4, sp
     de4:	4d0d      	ldr	r5, [pc, #52]	; (e1c <_sercom_get_hardware_index+0x40>)
     de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     dea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     dee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     df2:	9b00      	ldr	r3, [sp, #0]
     df4:	42b3      	cmp	r3, r6
     df6:	d00d      	beq.n	e14 <_sercom_get_hardware_index+0x38>
     df8:	4631      	mov	r1, r6
     dfa:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dfc:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     dfe:	f853 2b04 	ldr.w	r2, [r3], #4
     e02:	428a      	cmp	r2, r1
     e04:	d007      	beq.n	e16 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e06:	3001      	adds	r0, #1
     e08:	2808      	cmp	r0, #8
     e0a:	d1f8      	bne.n	dfe <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
     e0c:	2000      	movs	r0, #0
}
     e0e:	b009      	add	sp, #36	; 0x24
     e10:	bc70      	pop	{r4, r5, r6}
     e12:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e14:	2000      	movs	r0, #0
			return i;
     e16:	b2c0      	uxtb	r0, r0
     e18:	e7f9      	b.n	e0e <_sercom_get_hardware_index+0x32>
     e1a:	bf00      	nop
     e1c:	0000328c 	.word	0x0000328c

00000e20 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     e20:	b510      	push	{r4, lr}
     e22:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     e24:	4b21      	ldr	r3, [pc, #132]	; (eac <_usart_init+0x8c>)
     e26:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
     e28:	2803      	cmp	r0, #3
     e2a:	d005      	beq.n	e38 <_usart_init+0x18>
	ASSERT(false);
     e2c:	f240 2247 	movw	r2, #583	; 0x247
     e30:	491f      	ldr	r1, [pc, #124]	; (eb0 <_usart_init+0x90>)
     e32:	2000      	movs	r0, #0
     e34:	4b1f      	ldr	r3, [pc, #124]	; (eb4 <_usart_init+0x94>)
     e36:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     e38:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     e3a:	f013 0f01 	tst.w	r3, #1
     e3e:	d119      	bne.n	e74 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e40:	69e3      	ldr	r3, [r4, #28]
     e42:	f013 0f03 	tst.w	r3, #3
     e46:	d1fb      	bne.n	e40 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     e48:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     e4a:	f013 0f02 	tst.w	r3, #2
     e4e:	d00b      	beq.n	e68 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     e50:	6823      	ldr	r3, [r4, #0]
     e52:	f023 0302 	bic.w	r3, r3, #2
     e56:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e58:	69e3      	ldr	r3, [r4, #28]
     e5a:	f013 0f03 	tst.w	r3, #3
     e5e:	d1fb      	bne.n	e58 <_usart_init+0x38>
     e60:	69e3      	ldr	r3, [r4, #28]
     e62:	f013 0f02 	tst.w	r3, #2
     e66:	d1fb      	bne.n	e60 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e68:	2305      	movs	r3, #5
     e6a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e6c:	69e3      	ldr	r3, [r4, #28]
     e6e:	f013 0f03 	tst.w	r3, #3
     e72:	d1fb      	bne.n	e6c <_usart_init+0x4c>
     e74:	69e3      	ldr	r3, [r4, #28]
     e76:	f013 0f01 	tst.w	r3, #1
     e7a:	d1fb      	bne.n	e74 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e7c:	4b0e      	ldr	r3, [pc, #56]	; (eb8 <_usart_init+0x98>)
     e7e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e80:	69e3      	ldr	r3, [r4, #28]
     e82:	f013 0f03 	tst.w	r3, #3
     e86:	d1fb      	bne.n	e80 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     e88:	f44f 3340 	mov.w	r3, #196608	; 0x30000
     e8c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e8e:	69e3      	ldr	r3, [r4, #28]
     e90:	f013 0f1f 	tst.w	r3, #31
     e94:	d1fb      	bne.n	e8e <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     e96:	4b09      	ldr	r3, [pc, #36]	; (ebc <_usart_init+0x9c>)
     e98:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     e9a:	f64f 4311 	movw	r3, #64529	; 0xfc11
     e9e:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     ea0:	2000      	movs	r0, #0
     ea2:	73a0      	strb	r0, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     ea4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     ea8:	bd10      	pop	{r4, pc}
     eaa:	bf00      	nop
     eac:	00000ddd 	.word	0x00000ddd
     eb0:	000032c4 	.word	0x000032c4
     eb4:	0000080d 	.word	0x0000080d
     eb8:	40100004 	.word	0x40100004
     ebc:	00700002 	.word	0x00700002

00000ec0 <_usart_sync_init>:
{
     ec0:	b538      	push	{r3, r4, r5, lr}
     ec2:	460c      	mov	r4, r1
	ASSERT(device);
     ec4:	4605      	mov	r5, r0
     ec6:	22bb      	movs	r2, #187	; 0xbb
     ec8:	4905      	ldr	r1, [pc, #20]	; (ee0 <_usart_sync_init+0x20>)
     eca:	3000      	adds	r0, #0
     ecc:	bf18      	it	ne
     ece:	2001      	movne	r0, #1
     ed0:	4b04      	ldr	r3, [pc, #16]	; (ee4 <_usart_sync_init+0x24>)
     ed2:	4798      	blx	r3
	device->hw = hw;
     ed4:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     ed6:	4620      	mov	r0, r4
     ed8:	4b03      	ldr	r3, [pc, #12]	; (ee8 <_usart_sync_init+0x28>)
     eda:	4798      	blx	r3
}
     edc:	bd38      	pop	{r3, r4, r5, pc}
     ede:	bf00      	nop
     ee0:	000032c4 	.word	0x000032c4
     ee4:	0000080d 	.word	0x0000080d
     ee8:	00000e21 	.word	0x00000e21

00000eec <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     eec:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     eee:	6813      	ldr	r3, [r2, #0]
     ef0:	f043 0302 	orr.w	r3, r3, #2
     ef4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ef6:	69d3      	ldr	r3, [r2, #28]
     ef8:	f013 0f03 	tst.w	r3, #3
     efc:	d1fb      	bne.n	ef6 <_usart_sync_enable+0xa>
}
     efe:	4770      	bx	lr

00000f00 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     f00:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
     f02:	6299      	str	r1, [r3, #40]	; 0x28
     f04:	4770      	bx	lr

00000f06 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     f06:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     f08:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
     f0a:	b2c0      	uxtb	r0, r0
     f0c:	4770      	bx	lr

00000f0e <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     f0e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     f10:	7e18      	ldrb	r0, [r3, #24]
}
     f12:	f000 0001 	and.w	r0, r0, #1
     f16:	4770      	bx	lr

00000f18 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     f18:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     f1a:	7e18      	ldrb	r0, [r3, #24]
}
     f1c:	f3c0 0040 	ubfx	r0, r0, #1, #1
     f20:	4770      	bx	lr

00000f22 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     f22:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     f24:	7e18      	ldrb	r0, [r3, #24]
}
     f26:	f3c0 0080 	ubfx	r0, r0, #2, #1
     f2a:	4770      	bx	lr

00000f2c <CAN_std_tx_callback>:
	(void)descr;
	printf("  CAN Transmission done \r\n");
}

static void CAN_std_tx_callback(struct can_async_descriptor *const descr)
{
     f2c:	b508      	push	{r3, lr}
	(void)descr;

	/* Enable the FDOE and BRSE in register configuration*/
	hri_can_set_CCCR_INIT_bit(CAN_0.dev.hw);
     f2e:	4b0d      	ldr	r3, [pc, #52]	; (f64 <CAN_std_tx_callback+0x38>)
     f30:	681a      	ldr	r2, [r3, #0]
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
     f32:	6993      	ldr	r3, [r2, #24]
     f34:	f043 0301 	orr.w	r3, r3, #1
     f38:	6193      	str	r3, [r2, #24]
	tmp = ((Can *)hw)->CCCR.reg;
     f3a:	6993      	ldr	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(CAN_0.dev.hw) == 0)
     f3c:	f013 0f01 	tst.w	r3, #1
     f40:	d0fb      	beq.n	f3a <CAN_std_tx_callback+0xe>
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
     f42:	6993      	ldr	r3, [r2, #24]
     f44:	f043 0302 	orr.w	r3, r3, #2
     f48:	6193      	str	r3, [r2, #24]
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
     f4a:	6993      	ldr	r3, [r2, #24]
     f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     f50:	6193      	str	r3, [r2, #24]
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
     f52:	6993      	ldr	r3, [r2, #24]
     f54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     f58:	6193      	str	r3, [r2, #24]
	hri_can_set_CCCR_CCE_bit(CAN_0.dev.hw);

	hri_can_set_CCCR_FDOE_bit(CAN_0.dev.hw);
	hri_can_set_CCCR_BRSE_bit(CAN_0.dev.hw);

	printf("  CAN Transmission done \r\n");
     f5a:	4803      	ldr	r0, [pc, #12]	; (f68 <CAN_std_tx_callback+0x3c>)
     f5c:	4b03      	ldr	r3, [pc, #12]	; (f6c <CAN_std_tx_callback+0x40>)
     f5e:	4798      	blx	r3
     f60:	bd08      	pop	{r3, pc}
     f62:	bf00      	nop
     f64:	2000023c 	.word	0x2000023c
     f68:	000032e0 	.word	0x000032e0
     f6c:	0000162d 	.word	0x0000162d

00000f70 <CAN_0_tx_callback>:
{
     f70:	b508      	push	{r3, lr}
	printf("  CAN Transmission done \r\n");
     f72:	4802      	ldr	r0, [pc, #8]	; (f7c <CAN_0_tx_callback+0xc>)
     f74:	4b02      	ldr	r3, [pc, #8]	; (f80 <CAN_0_tx_callback+0x10>)
     f76:	4798      	blx	r3
     f78:	bd08      	pop	{r3, pc}
     f7a:	bf00      	nop
     f7c:	000032e0 	.word	0x000032e0
     f80:	0000162d 	.word	0x0000162d

00000f84 <CAN_0_rx_callback>:
}

static void CAN_0_rx_callback(struct can_async_descriptor *const descr)
{
     f84:	b570      	push	{r4, r5, r6, lr}
     f86:	b094      	sub	sp, #80	; 0x50
	struct can_message msg;
	uint8_t            data[64];
	msg.data = data;
     f88:	f8cd d048 	str.w	sp, [sp, #72]	; 0x48
	can_async_read(descr, &msg);
     f8c:	a910      	add	r1, sp, #64	; 0x40
     f8e:	4b0d      	ldr	r3, [pc, #52]	; (fc4 <CAN_0_rx_callback+0x40>)
     f90:	4798      	blx	r3

	printf("\n\r CAN Message received . The received data is: \r\n");
     f92:	480d      	ldr	r0, [pc, #52]	; (fc8 <CAN_0_rx_callback+0x44>)
     f94:	4b0d      	ldr	r3, [pc, #52]	; (fcc <CAN_0_rx_callback+0x48>)
     f96:	4798      	blx	r3
	for (uint8_t i = 0; i < msg.len; i++) {
     f98:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     f9c:	b163      	cbz	r3, fb8 <CAN_0_rx_callback+0x34>
     f9e:	2400      	movs	r4, #0
		printf("  %d", msg.data[i]);
     fa0:	4e0b      	ldr	r6, [pc, #44]	; (fd0 <CAN_0_rx_callback+0x4c>)
     fa2:	4d0c      	ldr	r5, [pc, #48]	; (fd4 <CAN_0_rx_callback+0x50>)
     fa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
     fa6:	5d19      	ldrb	r1, [r3, r4]
     fa8:	4630      	mov	r0, r6
     faa:	47a8      	blx	r5
	for (uint8_t i = 0; i < msg.len; i++) {
     fac:	3401      	adds	r4, #1
     fae:	b2e4      	uxtb	r4, r4
     fb0:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     fb4:	42a3      	cmp	r3, r4
     fb6:	d8f5      	bhi.n	fa4 <CAN_0_rx_callback+0x20>
	}
	printf("\r\n\r\n");
     fb8:	4807      	ldr	r0, [pc, #28]	; (fd8 <CAN_0_rx_callback+0x54>)
     fba:	4b04      	ldr	r3, [pc, #16]	; (fcc <CAN_0_rx_callback+0x48>)
     fbc:	4798      	blx	r3
	return;
}
     fbe:	b014      	add	sp, #80	; 0x50
     fc0:	bd70      	pop	{r4, r5, r6, pc}
     fc2:	bf00      	nop
     fc4:	00000581 	.word	0x00000581
     fc8:	000032fc 	.word	0x000032fc
     fcc:	0000162d 	.word	0x0000162d
     fd0:	00003330 	.word	0x00003330
     fd4:	00001545 	.word	0x00001545
     fd8:	000035ec 	.word	0x000035ec

00000fdc <main>:

int main(void)
{
     fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
     fde:	b0ab      	sub	sp, #172	; 0xac
	uint8_t tx_message_0[64];
	uint8_t tx_message_1[64];
	uint8_t tx_message_2[8];

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     fe0:	4bb4      	ldr	r3, [pc, #720]	; (12b4 <main+0x2d8>)
     fe2:	4798      	blx	r3
	printf("Menu :\r\n"
     fe4:	48b4      	ldr	r0, [pc, #720]	; (12b8 <main+0x2dc>)
     fe6:	4bb5      	ldr	r3, [pc, #724]	; (12bc <main+0x2e0>)
     fe8:	4798      	blx	r3
     fea:	a913      	add	r1, sp, #76	; 0x4c
     fec:	a823      	add	r0, sp, #140	; 0x8c
     fee:	460b      	mov	r3, r1
	display_menu();

	/* Initialize the data to be used later */
	for (uint8_t i = 0; i < 64; i++) {
		tx_message_0[i] = i;
     ff0:	1a5a      	subs	r2, r3, r1
     ff2:	f803 2b01 	strb.w	r2, [r3], #1
	for (uint8_t i = 0; i < 64; i++) {
     ff6:	4283      	cmp	r3, r0
     ff8:	d1fa      	bne.n	ff0 <main+0x14>
     ffa:	f10d 020b 	add.w	r2, sp, #11
     ffe:	2380      	movs	r3, #128	; 0x80
	}

	for (uint8_t j = 128; j < 192; j++) {
		tx_message_1[j - 128] = j;
    1000:	f802 3f01 	strb.w	r3, [r2, #1]!
	for (uint8_t j = 128; j < 192; j++) {
    1004:	3301      	adds	r3, #1
    1006:	b2db      	uxtb	r3, r3
    1008:	2bc0      	cmp	r3, #192	; 0xc0
    100a:	d1f9      	bne.n	1000 <main+0x24>
    100c:	a901      	add	r1, sp, #4
    100e:	a803      	add	r0, sp, #12
    1010:	460b      	mov	r3, r1
	}

	for (uint8_t k = 0; k < 8; k++) {
		tx_message_2[k] = k;
    1012:	1a5a      	subs	r2, r3, r1
    1014:	f803 2b01 	strb.w	r2, [r3], #1
	for (uint8_t k = 0; k < 8; k++) {
    1018:	4298      	cmp	r0, r3
    101a:	d1fa      	bne.n	1012 <main+0x36>
	}

	while (1) {
		scanf("%c", (char *)&key);
    101c:	4da8      	ldr	r5, [pc, #672]	; (12c0 <main+0x2e4>)
    101e:	4ca9      	ldr	r4, [pc, #676]	; (12c4 <main+0x2e8>)
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_std_tx_callback);
			can_async_enable(&CAN_0);
			can_async_write(&CAN_0, &msg);
			break;
		case 'f':
			printf("  a: Send normal standard message with ID: 0x45A and 8 byte data 0 to 7. \r\n");
    1020:	4ea9      	ldr	r6, [pc, #676]	; (12c8 <main+0x2ec>)
    1022:	e002      	b.n	102a <main+0x4e>
	printf("Menu :\r\n"
    1024:	48a4      	ldr	r0, [pc, #656]	; (12b8 <main+0x2dc>)
    1026:	4ba5      	ldr	r3, [pc, #660]	; (12bc <main+0x2e0>)
    1028:	4798      	blx	r3
		scanf("%c", (char *)&key);
    102a:	f10d 01a7 	add.w	r1, sp, #167	; 0xa7
    102e:	4628      	mov	r0, r5
    1030:	47a0      	blx	r4
		switch (key) {
    1032:	f89d 30a7 	ldrb.w	r3, [sp, #167]	; 0xa7
    1036:	3b30      	subs	r3, #48	; 0x30
    1038:	2b38      	cmp	r3, #56	; 0x38
    103a:	d8f6      	bhi.n	102a <main+0x4e>
    103c:	a201      	add	r2, pc, #4	; (adr r2, 1044 <main+0x68>)
    103e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1042:	bf00      	nop
    1044:	00001129 	.word	0x00001129
    1048:	00001151 	.word	0x00001151
    104c:	00001179 	.word	0x00001179
    1050:	000011b5 	.word	0x000011b5
    1054:	000011f1 	.word	0x000011f1
    1058:	00001217 	.word	0x00001217
    105c:	0000123f 	.word	0x0000123f
    1060:	00001279 	.word	0x00001279
    1064:	0000102b 	.word	0x0000102b
    1068:	0000102b 	.word	0x0000102b
    106c:	0000102b 	.word	0x0000102b
    1070:	0000102b 	.word	0x0000102b
    1074:	0000102b 	.word	0x0000102b
    1078:	0000102b 	.word	0x0000102b
    107c:	0000102b 	.word	0x0000102b
    1080:	0000102b 	.word	0x0000102b
    1084:	0000102b 	.word	0x0000102b
    1088:	0000102b 	.word	0x0000102b
    108c:	0000102b 	.word	0x0000102b
    1090:	0000102b 	.word	0x0000102b
    1094:	0000102b 	.word	0x0000102b
    1098:	0000102b 	.word	0x0000102b
    109c:	0000102b 	.word	0x0000102b
    10a0:	0000102b 	.word	0x0000102b
    10a4:	0000102b 	.word	0x0000102b
    10a8:	0000102b 	.word	0x0000102b
    10ac:	0000102b 	.word	0x0000102b
    10b0:	0000102b 	.word	0x0000102b
    10b4:	0000102b 	.word	0x0000102b
    10b8:	0000102b 	.word	0x0000102b
    10bc:	0000102b 	.word	0x0000102b
    10c0:	0000102b 	.word	0x0000102b
    10c4:	0000102b 	.word	0x0000102b
    10c8:	0000102b 	.word	0x0000102b
    10cc:	0000102b 	.word	0x0000102b
    10d0:	0000102b 	.word	0x0000102b
    10d4:	0000102b 	.word	0x0000102b
    10d8:	0000102b 	.word	0x0000102b
    10dc:	0000102b 	.word	0x0000102b
    10e0:	0000102b 	.word	0x0000102b
    10e4:	0000102b 	.word	0x0000102b
    10e8:	0000102b 	.word	0x0000102b
    10ec:	0000102b 	.word	0x0000102b
    10f0:	0000102b 	.word	0x0000102b
    10f4:	0000102b 	.word	0x0000102b
    10f8:	0000102b 	.word	0x0000102b
    10fc:	0000102b 	.word	0x0000102b
    1100:	0000102b 	.word	0x0000102b
    1104:	0000102b 	.word	0x0000102b
    1108:	00001311 	.word	0x00001311
    110c:	0000102b 	.word	0x0000102b
    1110:	0000102b 	.word	0x0000102b
    1114:	0000102b 	.word	0x0000102b
    1118:	0000102b 	.word	0x0000102b
    111c:	00001379 	.word	0x00001379
    1120:	0000102b 	.word	0x0000102b
    1124:	00001025 	.word	0x00001025
			printf("  0: Set standard filter ID 0: 0x45A, store into Rx buffer. \r\n");
    1128:	4868      	ldr	r0, [pc, #416]	; (12cc <main+0x2f0>)
    112a:	4b64      	ldr	r3, [pc, #400]	; (12bc <main+0x2e0>)
    112c:	4798      	blx	r3
			can_async_register_callback(&CAN_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_0_rx_callback);
    112e:	4f68      	ldr	r7, [pc, #416]	; (12d0 <main+0x2f4>)
    1130:	4a68      	ldr	r2, [pc, #416]	; (12d4 <main+0x2f8>)
    1132:	2100      	movs	r1, #0
    1134:	4638      	mov	r0, r7
    1136:	4b68      	ldr	r3, [pc, #416]	; (12d8 <main+0x2fc>)
    1138:	4798      	blx	r3
			filter.id   = 0x45A;
    113a:	f240 435a 	movw	r3, #1114	; 0x45a
    113e:	9323      	str	r3, [sp, #140]	; 0x8c
			filter.mask = 0;
    1140:	2100      	movs	r1, #0
    1142:	9124      	str	r1, [sp, #144]	; 0x90
			can_async_set_filter(&CAN_0, 0, CAN_FMT_STDID, &filter);
    1144:	ab23      	add	r3, sp, #140	; 0x8c
    1146:	460a      	mov	r2, r1
    1148:	4638      	mov	r0, r7
    114a:	4f64      	ldr	r7, [pc, #400]	; (12dc <main+0x300>)
    114c:	47b8      	blx	r7
			break;
    114e:	e76c      	b.n	102a <main+0x4e>
			printf("  1: Set standard filter ID 1: 0x469, store into Rx FIFO 0. \r\n");
    1150:	4863      	ldr	r0, [pc, #396]	; (12e0 <main+0x304>)
    1152:	4b5a      	ldr	r3, [pc, #360]	; (12bc <main+0x2e0>)
    1154:	4798      	blx	r3
			can_async_register_callback(&CAN_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_0_rx_callback);
    1156:	4f5e      	ldr	r7, [pc, #376]	; (12d0 <main+0x2f4>)
    1158:	4a5e      	ldr	r2, [pc, #376]	; (12d4 <main+0x2f8>)
    115a:	2100      	movs	r1, #0
    115c:	4638      	mov	r0, r7
    115e:	4b5e      	ldr	r3, [pc, #376]	; (12d8 <main+0x2fc>)
    1160:	4798      	blx	r3
			filter.id   = 0x469;
    1162:	f240 4369 	movw	r3, #1129	; 0x469
    1166:	9323      	str	r3, [sp, #140]	; 0x8c
			filter.mask = 0;
    1168:	2200      	movs	r2, #0
    116a:	9224      	str	r2, [sp, #144]	; 0x90
			can_async_set_filter(&CAN_0, 1, CAN_FMT_STDID, &filter);
    116c:	ab23      	add	r3, sp, #140	; 0x8c
    116e:	2101      	movs	r1, #1
    1170:	4638      	mov	r0, r7
    1172:	4f5a      	ldr	r7, [pc, #360]	; (12dc <main+0x300>)
    1174:	47b8      	blx	r7
			break;
    1176:	e758      	b.n	102a <main+0x4e>
			printf("  2: Send standard message with ID: 0x45A and 64 byte data 0 to 63. \r\n");
    1178:	485a      	ldr	r0, [pc, #360]	; (12e4 <main+0x308>)
    117a:	4b50      	ldr	r3, [pc, #320]	; (12bc <main+0x2e0>)
    117c:	4798      	blx	r3
			msg.id   = 0x45A;
    117e:	f240 435a 	movw	r3, #1114	; 0x45a
    1182:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
    1184:	2300      	movs	r3, #0
    1186:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_0;
    118a:	aa13      	add	r2, sp, #76	; 0x4c
    118c:	9227      	str	r2, [sp, #156]	; 0x9c
			msg.len  = 8;
    118e:	2208      	movs	r2, #8
    1190:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_STDID;
    1194:	f88d 30a1 	strb.w	r3, [sp, #161]	; 0xa1
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_0_tx_callback);
    1198:	4f4d      	ldr	r7, [pc, #308]	; (12d0 <main+0x2f4>)
    119a:	4a53      	ldr	r2, [pc, #332]	; (12e8 <main+0x30c>)
    119c:	2101      	movs	r1, #1
    119e:	4638      	mov	r0, r7
    11a0:	4b4d      	ldr	r3, [pc, #308]	; (12d8 <main+0x2fc>)
    11a2:	4798      	blx	r3
			can_async_enable(&CAN_0);
    11a4:	4638      	mov	r0, r7
    11a6:	4b51      	ldr	r3, [pc, #324]	; (12ec <main+0x310>)
    11a8:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
    11aa:	a925      	add	r1, sp, #148	; 0x94
    11ac:	4638      	mov	r0, r7
    11ae:	4b50      	ldr	r3, [pc, #320]	; (12f0 <main+0x314>)
    11b0:	4798      	blx	r3
			break;
    11b2:	e73a      	b.n	102a <main+0x4e>
			printf("  3: Send standard message with ID: 0x469 and 64 byte data 128 to 191. \r\n");
    11b4:	484f      	ldr	r0, [pc, #316]	; (12f4 <main+0x318>)
    11b6:	4b41      	ldr	r3, [pc, #260]	; (12bc <main+0x2e0>)
    11b8:	4798      	blx	r3
			msg.id   = 0x469;
    11ba:	f240 4369 	movw	r3, #1129	; 0x469
    11be:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
    11c0:	2300      	movs	r3, #0
    11c2:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_1;
    11c6:	aa03      	add	r2, sp, #12
    11c8:	9227      	str	r2, [sp, #156]	; 0x9c
			msg.len  = 8;
    11ca:	2208      	movs	r2, #8
    11cc:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_STDID;
    11d0:	f88d 30a1 	strb.w	r3, [sp, #161]	; 0xa1
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_0_tx_callback);
    11d4:	4f3e      	ldr	r7, [pc, #248]	; (12d0 <main+0x2f4>)
    11d6:	4a44      	ldr	r2, [pc, #272]	; (12e8 <main+0x30c>)
    11d8:	2101      	movs	r1, #1
    11da:	4638      	mov	r0, r7
    11dc:	4b3e      	ldr	r3, [pc, #248]	; (12d8 <main+0x2fc>)
    11de:	4798      	blx	r3
			can_async_enable(&CAN_0);
    11e0:	4638      	mov	r0, r7
    11e2:	4b42      	ldr	r3, [pc, #264]	; (12ec <main+0x310>)
    11e4:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
    11e6:	a925      	add	r1, sp, #148	; 0x94
    11e8:	4638      	mov	r0, r7
    11ea:	4b41      	ldr	r3, [pc, #260]	; (12f0 <main+0x314>)
    11ec:	4798      	blx	r3
			break;
    11ee:	e71c      	b.n	102a <main+0x4e>
			printf("  4: Set extended filter ID 0: 0x100000A5, store into Rx buffer. \r\n");
    11f0:	4841      	ldr	r0, [pc, #260]	; (12f8 <main+0x31c>)
    11f2:	4b32      	ldr	r3, [pc, #200]	; (12bc <main+0x2e0>)
    11f4:	4798      	blx	r3
			can_async_register_callback(&CAN_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_0_rx_callback);
    11f6:	4f36      	ldr	r7, [pc, #216]	; (12d0 <main+0x2f4>)
    11f8:	4a36      	ldr	r2, [pc, #216]	; (12d4 <main+0x2f8>)
    11fa:	2100      	movs	r1, #0
    11fc:	4638      	mov	r0, r7
    11fe:	4b36      	ldr	r3, [pc, #216]	; (12d8 <main+0x2fc>)
    1200:	4798      	blx	r3
			filter.id   = 0x100000A5;
    1202:	4b3e      	ldr	r3, [pc, #248]	; (12fc <main+0x320>)
    1204:	9323      	str	r3, [sp, #140]	; 0x8c
			filter.mask = 0;
    1206:	2100      	movs	r1, #0
    1208:	9124      	str	r1, [sp, #144]	; 0x90
			can_async_set_filter(&CAN_0, 0, CAN_FMT_EXTID, &filter);
    120a:	ab23      	add	r3, sp, #140	; 0x8c
    120c:	2201      	movs	r2, #1
    120e:	4638      	mov	r0, r7
    1210:	4f32      	ldr	r7, [pc, #200]	; (12dc <main+0x300>)
    1212:	47b8      	blx	r7
			break;
    1214:	e709      	b.n	102a <main+0x4e>
			printf("  5: Set extended filter ID 1: 0x10000096, store into Rx FIFO 1. \r\n");
    1216:	483a      	ldr	r0, [pc, #232]	; (1300 <main+0x324>)
    1218:	4b28      	ldr	r3, [pc, #160]	; (12bc <main+0x2e0>)
    121a:	4798      	blx	r3
			can_async_register_callback(&CAN_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_0_rx_callback);
    121c:	4f2c      	ldr	r7, [pc, #176]	; (12d0 <main+0x2f4>)
    121e:	4a2d      	ldr	r2, [pc, #180]	; (12d4 <main+0x2f8>)
    1220:	2100      	movs	r1, #0
    1222:	4638      	mov	r0, r7
    1224:	4b2c      	ldr	r3, [pc, #176]	; (12d8 <main+0x2fc>)
    1226:	4798      	blx	r3
			filter.id   = 0x10000096;
    1228:	4b36      	ldr	r3, [pc, #216]	; (1304 <main+0x328>)
    122a:	9323      	str	r3, [sp, #140]	; 0x8c
			filter.mask = 0;
    122c:	2300      	movs	r3, #0
    122e:	9324      	str	r3, [sp, #144]	; 0x90
			can_async_set_filter(&CAN_0, 1, CAN_FMT_EXTID, &filter);
    1230:	ab23      	add	r3, sp, #140	; 0x8c
    1232:	2201      	movs	r2, #1
    1234:	4611      	mov	r1, r2
    1236:	4638      	mov	r0, r7
    1238:	4f28      	ldr	r7, [pc, #160]	; (12dc <main+0x300>)
    123a:	47b8      	blx	r7
			break;
    123c:	e6f5      	b.n	102a <main+0x4e>
			printf("  6: Send extended message with ID: 0x100000A5 and 64 byte data 0 to 63. \r\n");
    123e:	4832      	ldr	r0, [pc, #200]	; (1308 <main+0x32c>)
    1240:	4b1e      	ldr	r3, [pc, #120]	; (12bc <main+0x2e0>)
    1242:	4798      	blx	r3
			msg.id   = 0x100000A5;
    1244:	4b2d      	ldr	r3, [pc, #180]	; (12fc <main+0x320>)
    1246:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
    1248:	2300      	movs	r3, #0
    124a:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_0;
    124e:	ab13      	add	r3, sp, #76	; 0x4c
    1250:	9327      	str	r3, [sp, #156]	; 0x9c
			msg.len  = 8;
    1252:	2308      	movs	r3, #8
    1254:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_EXTID;
    1258:	2101      	movs	r1, #1
    125a:	f88d 10a1 	strb.w	r1, [sp, #161]	; 0xa1
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_0_tx_callback);
    125e:	4f1c      	ldr	r7, [pc, #112]	; (12d0 <main+0x2f4>)
    1260:	4a21      	ldr	r2, [pc, #132]	; (12e8 <main+0x30c>)
    1262:	4638      	mov	r0, r7
    1264:	4b1c      	ldr	r3, [pc, #112]	; (12d8 <main+0x2fc>)
    1266:	4798      	blx	r3
			can_async_enable(&CAN_0);
    1268:	4638      	mov	r0, r7
    126a:	4b20      	ldr	r3, [pc, #128]	; (12ec <main+0x310>)
    126c:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
    126e:	a925      	add	r1, sp, #148	; 0x94
    1270:	4638      	mov	r0, r7
    1272:	4b1f      	ldr	r3, [pc, #124]	; (12f0 <main+0x314>)
    1274:	4798      	blx	r3
			break;
    1276:	e6d8      	b.n	102a <main+0x4e>
			printf("  7: Send extended message with ID: 0x10000096 and 64 byte data 128 to 191. \r\n");
    1278:	4824      	ldr	r0, [pc, #144]	; (130c <main+0x330>)
    127a:	4b10      	ldr	r3, [pc, #64]	; (12bc <main+0x2e0>)
    127c:	4798      	blx	r3
			msg.id   = 0x10000096;
    127e:	4b21      	ldr	r3, [pc, #132]	; (1304 <main+0x328>)
    1280:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
    1282:	2300      	movs	r3, #0
    1284:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_1;
    1288:	ab03      	add	r3, sp, #12
    128a:	9327      	str	r3, [sp, #156]	; 0x9c
			msg.len  = 8;
    128c:	2308      	movs	r3, #8
    128e:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_EXTID;
    1292:	2101      	movs	r1, #1
    1294:	f88d 10a1 	strb.w	r1, [sp, #161]	; 0xa1
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_0_tx_callback);
    1298:	4f0d      	ldr	r7, [pc, #52]	; (12d0 <main+0x2f4>)
    129a:	4a13      	ldr	r2, [pc, #76]	; (12e8 <main+0x30c>)
    129c:	4638      	mov	r0, r7
    129e:	4b0e      	ldr	r3, [pc, #56]	; (12d8 <main+0x2fc>)
    12a0:	4798      	blx	r3
			can_async_enable(&CAN_0);
    12a2:	4638      	mov	r0, r7
    12a4:	4b11      	ldr	r3, [pc, #68]	; (12ec <main+0x310>)
    12a6:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
    12a8:	a925      	add	r1, sp, #148	; 0x94
    12aa:	4638      	mov	r0, r7
    12ac:	4b10      	ldr	r3, [pc, #64]	; (12f0 <main+0x314>)
    12ae:	4798      	blx	r3
			break;
    12b0:	e6bb      	b.n	102a <main+0x4e>
    12b2:	bf00      	nop
    12b4:	000002d1 	.word	0x000002d1
    12b8:	00003338 	.word	0x00003338
    12bc:	0000162d 	.word	0x0000162d
    12c0:	000035f0 	.word	0x000035f0
    12c4:	0000163d 	.word	0x0000163d
    12c8:	00003878 	.word	0x00003878
    12cc:	000035f4 	.word	0x000035f4
    12d0:	2000023c 	.word	0x2000023c
    12d4:	00000f85 	.word	0x00000f85
    12d8:	000005e1 	.word	0x000005e1
    12dc:	00000631 	.word	0x00000631
    12e0:	00003634 	.word	0x00003634
    12e4:	00003674 	.word	0x00003674
    12e8:	00000f71 	.word	0x00000f71
    12ec:	00000559 	.word	0x00000559
    12f0:	000005b1 	.word	0x000005b1
    12f4:	000036bc 	.word	0x000036bc
    12f8:	00003708 	.word	0x00003708
    12fc:	100000a5 	.word	0x100000a5
    1300:	0000374c 	.word	0x0000374c
    1304:	10000096 	.word	0x10000096
    1308:	00003790 	.word	0x00003790
    130c:	000037dc 	.word	0x000037dc
			printf("  a: Send normal standard message with ID: 0x469 and 8 byte data 0 to 7. \r\n");
    1310:	4833      	ldr	r0, [pc, #204]	; (13e0 <main+0x404>)
    1312:	4b34      	ldr	r3, [pc, #208]	; (13e4 <main+0x408>)
    1314:	4798      	blx	r3
			msg.id   = 0x469;
    1316:	f240 4369 	movw	r3, #1129	; 0x469
    131a:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
    131c:	2300      	movs	r3, #0
    131e:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_2;
    1322:	aa01      	add	r2, sp, #4
    1324:	9227      	str	r2, [sp, #156]	; 0x9c
			msg.len  = 8;
    1326:	2208      	movs	r2, #8
    1328:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_STDID;
    132c:	f88d 30a1 	strb.w	r3, [sp, #161]	; 0xa1
			hri_can_set_CCCR_INIT_bit(CAN_0.dev.hw);
    1330:	4b2d      	ldr	r3, [pc, #180]	; (13e8 <main+0x40c>)
    1332:	681a      	ldr	r2, [r3, #0]
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    1334:	6993      	ldr	r3, [r2, #24]
    1336:	f043 0301 	orr.w	r3, r3, #1
    133a:	6193      	str	r3, [r2, #24]
	tmp = ((Can *)hw)->CCCR.reg;
    133c:	6993      	ldr	r3, [r2, #24]
			while (hri_can_get_CCCR_INIT_bit(CAN_0.dev.hw) == 0)
    133e:	f013 0f01 	tst.w	r3, #1
    1342:	d0fb      	beq.n	133c <main+0x360>
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    1344:	6993      	ldr	r3, [r2, #24]
    1346:	f043 0302 	orr.w	r3, r3, #2
    134a:	6193      	str	r3, [r2, #24]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_FDOE;
    134c:	6993      	ldr	r3, [r2, #24]
    134e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1352:	6193      	str	r3, [r2, #24]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_BRSE;
    1354:	6993      	ldr	r3, [r2, #24]
    1356:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    135a:	6193      	str	r3, [r2, #24]
			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_std_tx_callback);
    135c:	4f22      	ldr	r7, [pc, #136]	; (13e8 <main+0x40c>)
    135e:	4a23      	ldr	r2, [pc, #140]	; (13ec <main+0x410>)
    1360:	2101      	movs	r1, #1
    1362:	4638      	mov	r0, r7
    1364:	4b22      	ldr	r3, [pc, #136]	; (13f0 <main+0x414>)
    1366:	4798      	blx	r3
			can_async_enable(&CAN_0);
    1368:	4638      	mov	r0, r7
    136a:	4b22      	ldr	r3, [pc, #136]	; (13f4 <main+0x418>)
    136c:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
    136e:	a925      	add	r1, sp, #148	; 0x94
    1370:	4638      	mov	r0, r7
    1372:	4b21      	ldr	r3, [pc, #132]	; (13f8 <main+0x41c>)
    1374:	4798      	blx	r3
			break;
    1376:	e658      	b.n	102a <main+0x4e>
			printf("  a: Send normal standard message with ID: 0x45A and 8 byte data 0 to 7. \r\n");
    1378:	4630      	mov	r0, r6
    137a:	4b1a      	ldr	r3, [pc, #104]	; (13e4 <main+0x408>)
    137c:	4798      	blx	r3
			msg.id   = 0x45A;
    137e:	f240 435a 	movw	r3, #1114	; 0x45a
    1382:	9325      	str	r3, [sp, #148]	; 0x94
			msg.type = CAN_TYPE_DATA;
    1384:	2300      	movs	r3, #0
    1386:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
			msg.data = tx_message_1;
    138a:	aa03      	add	r2, sp, #12
    138c:	9227      	str	r2, [sp, #156]	; 0x9c
			msg.len  = 8;
    138e:	2208      	movs	r2, #8
    1390:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
			msg.fmt  = CAN_FMT_STDID;
    1394:	f88d 30a1 	strb.w	r3, [sp, #161]	; 0xa1

			/* Disable the FDOE and BRSE from register configuration
			 * and enable them again in callback */
			hri_can_set_CCCR_INIT_bit(CAN_0.dev.hw);
    1398:	4b13      	ldr	r3, [pc, #76]	; (13e8 <main+0x40c>)
    139a:	681a      	ldr	r2, [r3, #0]
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    139c:	6993      	ldr	r3, [r2, #24]
    139e:	f043 0301 	orr.w	r3, r3, #1
    13a2:	6193      	str	r3, [r2, #24]
	tmp = ((Can *)hw)->CCCR.reg;
    13a4:	6993      	ldr	r3, [r2, #24]
			while (hri_can_get_CCCR_INIT_bit(CAN_0.dev.hw) == 0)
    13a6:	f013 0f01 	tst.w	r3, #1
    13aa:	d0fb      	beq.n	13a4 <main+0x3c8>
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    13ac:	6993      	ldr	r3, [r2, #24]
    13ae:	f043 0302 	orr.w	r3, r3, #2
    13b2:	6193      	str	r3, [r2, #24]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_FDOE;
    13b4:	6993      	ldr	r3, [r2, #24]
    13b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    13ba:	6193      	str	r3, [r2, #24]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_BRSE;
    13bc:	6993      	ldr	r3, [r2, #24]
    13be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    13c2:	6193      	str	r3, [r2, #24]
			hri_can_set_CCCR_CCE_bit(CAN_0.dev.hw);

			hri_can_clear_CCCR_FDOE_bit(CAN_0.dev.hw);
			hri_can_clear_CCCR_BRSE_bit(CAN_0.dev.hw);

			can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_std_tx_callback);
    13c4:	4f08      	ldr	r7, [pc, #32]	; (13e8 <main+0x40c>)
    13c6:	4a09      	ldr	r2, [pc, #36]	; (13ec <main+0x410>)
    13c8:	2101      	movs	r1, #1
    13ca:	4638      	mov	r0, r7
    13cc:	4b08      	ldr	r3, [pc, #32]	; (13f0 <main+0x414>)
    13ce:	4798      	blx	r3
			can_async_enable(&CAN_0);
    13d0:	4638      	mov	r0, r7
    13d2:	4b08      	ldr	r3, [pc, #32]	; (13f4 <main+0x418>)
    13d4:	4798      	blx	r3
			can_async_write(&CAN_0, &msg);
    13d6:	a925      	add	r1, sp, #148	; 0x94
    13d8:	4638      	mov	r0, r7
    13da:	4b07      	ldr	r3, [pc, #28]	; (13f8 <main+0x41c>)
    13dc:	4798      	blx	r3
			break;
    13de:	e624      	b.n	102a <main+0x4e>
    13e0:	0000382c 	.word	0x0000382c
    13e4:	0000162d 	.word	0x0000162d
    13e8:	2000023c 	.word	0x2000023c
    13ec:	00000f2d 	.word	0x00000f2d
    13f0:	000005e1 	.word	0x000005e1
    13f4:	00000559 	.word	0x00000559
    13f8:	000005b1 	.word	0x000005b1

000013fc <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    13fc:	b940      	cbnz	r0, 1410 <_read+0x14>
{
    13fe:	b508      	push	{r3, lr}
    1400:	460b      	mov	r3, r1
    1402:	4611      	mov	r1, r2
    1404:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    1406:	4b04      	ldr	r3, [pc, #16]	; (1418 <_read+0x1c>)
    1408:	4798      	blx	r3
    140a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    140e:	bd08      	pop	{r3, pc}
		return -1;
    1410:	f04f 30ff 	mov.w	r0, #4294967295
    1414:	4770      	bx	lr
    1416:	bf00      	nop
    1418:	0000146d 	.word	0x0000146d

0000141c <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    141c:	3801      	subs	r0, #1
    141e:	2802      	cmp	r0, #2
    1420:	d808      	bhi.n	1434 <_write+0x18>
{
    1422:	b508      	push	{r3, lr}
    1424:	460b      	mov	r3, r1
    1426:	4611      	mov	r1, r2
    1428:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    142a:	4b04      	ldr	r3, [pc, #16]	; (143c <_write+0x20>)
    142c:	4798      	blx	r3
    142e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    1432:	bd08      	pop	{r3, pc}
		return -1;
    1434:	f04f 30ff 	mov.w	r0, #4294967295
    1438:	4770      	bx	lr
    143a:	bf00      	nop
    143c:	00001491 	.word	0x00001491

00001440 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    1440:	b570      	push	{r4, r5, r6, lr}
    1442:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    1444:	4d06      	ldr	r5, [pc, #24]	; (1460 <stdio_io_init+0x20>)
    1446:	682b      	ldr	r3, [r5, #0]
    1448:	2100      	movs	r1, #0
    144a:	6898      	ldr	r0, [r3, #8]
    144c:	4c05      	ldr	r4, [pc, #20]	; (1464 <stdio_io_init+0x24>)
    144e:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1450:	682b      	ldr	r3, [r5, #0]
    1452:	2100      	movs	r1, #0
    1454:	6858      	ldr	r0, [r3, #4]
    1456:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    1458:	4b03      	ldr	r3, [pc, #12]	; (1468 <stdio_io_init+0x28>)
    145a:	601e      	str	r6, [r3, #0]
    145c:	bd70      	pop	{r4, r5, r6, pc}
    145e:	bf00      	nop
    1460:	20000014 	.word	0x20000014
    1464:	0000166d 	.word	0x0000166d
    1468:	20000230 	.word	0x20000230

0000146c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    146c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    146e:	4b06      	ldr	r3, [pc, #24]	; (1488 <stdio_io_read+0x1c>)
    1470:	681b      	ldr	r3, [r3, #0]
    1472:	b133      	cbz	r3, 1482 <stdio_io_read+0x16>
    1474:	460a      	mov	r2, r1
    1476:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    1478:	b292      	uxth	r2, r2
    147a:	4618      	mov	r0, r3
    147c:	4b03      	ldr	r3, [pc, #12]	; (148c <stdio_io_read+0x20>)
    147e:	4798      	blx	r3
    1480:	bd08      	pop	{r3, pc}
		return 0;
    1482:	2000      	movs	r0, #0
}
    1484:	bd08      	pop	{r3, pc}
    1486:	bf00      	nop
    1488:	20000230 	.word	0x20000230
    148c:	00000695 	.word	0x00000695

00001490 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1490:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    1492:	4b06      	ldr	r3, [pc, #24]	; (14ac <stdio_io_write+0x1c>)
    1494:	681b      	ldr	r3, [r3, #0]
    1496:	b133      	cbz	r3, 14a6 <stdio_io_write+0x16>
    1498:	460a      	mov	r2, r1
    149a:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    149c:	b292      	uxth	r2, r2
    149e:	4618      	mov	r0, r3
    14a0:	4b03      	ldr	r3, [pc, #12]	; (14b0 <stdio_io_write+0x20>)
    14a2:	4798      	blx	r3
    14a4:	bd08      	pop	{r3, pc}
		return 0;
    14a6:	2000      	movs	r0, #0
}
    14a8:	bd08      	pop	{r3, pc}
    14aa:	bf00      	nop
    14ac:	20000230 	.word	0x20000230
    14b0:	00000665 	.word	0x00000665

000014b4 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    14b4:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    14b6:	4c04      	ldr	r4, [pc, #16]	; (14c8 <stdio_redirect_init+0x14>)
    14b8:	4620      	mov	r0, r4
    14ba:	4b04      	ldr	r3, [pc, #16]	; (14cc <stdio_redirect_init+0x18>)
    14bc:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    14be:	4620      	mov	r0, r4
    14c0:	4b03      	ldr	r3, [pc, #12]	; (14d0 <stdio_redirect_init+0x1c>)
    14c2:	4798      	blx	r3
    14c4:	bd10      	pop	{r4, pc}
    14c6:	bf00      	nop
    14c8:	20000264 	.word	0x20000264
    14cc:	000007e1 	.word	0x000007e1
    14d0:	00001441 	.word	0x00001441

000014d4 <__libc_init_array>:
    14d4:	b570      	push	{r4, r5, r6, lr}
    14d6:	4e0d      	ldr	r6, [pc, #52]	; (150c <__libc_init_array+0x38>)
    14d8:	4c0d      	ldr	r4, [pc, #52]	; (1510 <__libc_init_array+0x3c>)
    14da:	1ba4      	subs	r4, r4, r6
    14dc:	10a4      	asrs	r4, r4, #2
    14de:	2500      	movs	r5, #0
    14e0:	42a5      	cmp	r5, r4
    14e2:	d109      	bne.n	14f8 <__libc_init_array+0x24>
    14e4:	4e0b      	ldr	r6, [pc, #44]	; (1514 <__libc_init_array+0x40>)
    14e6:	4c0c      	ldr	r4, [pc, #48]	; (1518 <__libc_init_array+0x44>)
    14e8:	f002 fad2 	bl	3a90 <_init>
    14ec:	1ba4      	subs	r4, r4, r6
    14ee:	10a4      	asrs	r4, r4, #2
    14f0:	2500      	movs	r5, #0
    14f2:	42a5      	cmp	r5, r4
    14f4:	d105      	bne.n	1502 <__libc_init_array+0x2e>
    14f6:	bd70      	pop	{r4, r5, r6, pc}
    14f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    14fc:	4798      	blx	r3
    14fe:	3501      	adds	r5, #1
    1500:	e7ee      	b.n	14e0 <__libc_init_array+0xc>
    1502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1506:	4798      	blx	r3
    1508:	3501      	adds	r5, #1
    150a:	e7f2      	b.n	14f2 <__libc_init_array+0x1e>
    150c:	00003a9c 	.word	0x00003a9c
    1510:	00003a9c 	.word	0x00003a9c
    1514:	00003a9c 	.word	0x00003a9c
    1518:	00003aa0 	.word	0x00003aa0

0000151c <memcpy>:
    151c:	b510      	push	{r4, lr}
    151e:	1e43      	subs	r3, r0, #1
    1520:	440a      	add	r2, r1
    1522:	4291      	cmp	r1, r2
    1524:	d100      	bne.n	1528 <memcpy+0xc>
    1526:	bd10      	pop	{r4, pc}
    1528:	f811 4b01 	ldrb.w	r4, [r1], #1
    152c:	f803 4f01 	strb.w	r4, [r3, #1]!
    1530:	e7f7      	b.n	1522 <memcpy+0x6>

00001532 <memset>:
    1532:	4402      	add	r2, r0
    1534:	4603      	mov	r3, r0
    1536:	4293      	cmp	r3, r2
    1538:	d100      	bne.n	153c <memset+0xa>
    153a:	4770      	bx	lr
    153c:	f803 1b01 	strb.w	r1, [r3], #1
    1540:	e7f9      	b.n	1536 <memset+0x4>
	...

00001544 <iprintf>:
    1544:	b40f      	push	{r0, r1, r2, r3}
    1546:	4b0a      	ldr	r3, [pc, #40]	; (1570 <iprintf+0x2c>)
    1548:	b513      	push	{r0, r1, r4, lr}
    154a:	681c      	ldr	r4, [r3, #0]
    154c:	b124      	cbz	r4, 1558 <iprintf+0x14>
    154e:	69a3      	ldr	r3, [r4, #24]
    1550:	b913      	cbnz	r3, 1558 <iprintf+0x14>
    1552:	4620      	mov	r0, r4
    1554:	f000 fb04 	bl	1b60 <__sinit>
    1558:	ab05      	add	r3, sp, #20
    155a:	9a04      	ldr	r2, [sp, #16]
    155c:	68a1      	ldr	r1, [r4, #8]
    155e:	9301      	str	r3, [sp, #4]
    1560:	4620      	mov	r0, r4
    1562:	f000 fce3 	bl	1f2c <_vfiprintf_r>
    1566:	b002      	add	sp, #8
    1568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    156c:	b004      	add	sp, #16
    156e:	4770      	bx	lr
    1570:	20000014 	.word	0x20000014

00001574 <_puts_r>:
    1574:	b570      	push	{r4, r5, r6, lr}
    1576:	460e      	mov	r6, r1
    1578:	4605      	mov	r5, r0
    157a:	b118      	cbz	r0, 1584 <_puts_r+0x10>
    157c:	6983      	ldr	r3, [r0, #24]
    157e:	b90b      	cbnz	r3, 1584 <_puts_r+0x10>
    1580:	f000 faee 	bl	1b60 <__sinit>
    1584:	69ab      	ldr	r3, [r5, #24]
    1586:	68ac      	ldr	r4, [r5, #8]
    1588:	b913      	cbnz	r3, 1590 <_puts_r+0x1c>
    158a:	4628      	mov	r0, r5
    158c:	f000 fae8 	bl	1b60 <__sinit>
    1590:	4b23      	ldr	r3, [pc, #140]	; (1620 <_puts_r+0xac>)
    1592:	429c      	cmp	r4, r3
    1594:	d117      	bne.n	15c6 <_puts_r+0x52>
    1596:	686c      	ldr	r4, [r5, #4]
    1598:	89a3      	ldrh	r3, [r4, #12]
    159a:	071b      	lsls	r3, r3, #28
    159c:	d51d      	bpl.n	15da <_puts_r+0x66>
    159e:	6923      	ldr	r3, [r4, #16]
    15a0:	b1db      	cbz	r3, 15da <_puts_r+0x66>
    15a2:	3e01      	subs	r6, #1
    15a4:	68a3      	ldr	r3, [r4, #8]
    15a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    15aa:	3b01      	subs	r3, #1
    15ac:	60a3      	str	r3, [r4, #8]
    15ae:	b9e9      	cbnz	r1, 15ec <_puts_r+0x78>
    15b0:	2b00      	cmp	r3, #0
    15b2:	da2e      	bge.n	1612 <_puts_r+0x9e>
    15b4:	4622      	mov	r2, r4
    15b6:	210a      	movs	r1, #10
    15b8:	4628      	mov	r0, r5
    15ba:	f000 f90d 	bl	17d8 <__swbuf_r>
    15be:	3001      	adds	r0, #1
    15c0:	d011      	beq.n	15e6 <_puts_r+0x72>
    15c2:	200a      	movs	r0, #10
    15c4:	bd70      	pop	{r4, r5, r6, pc}
    15c6:	4b17      	ldr	r3, [pc, #92]	; (1624 <_puts_r+0xb0>)
    15c8:	429c      	cmp	r4, r3
    15ca:	d101      	bne.n	15d0 <_puts_r+0x5c>
    15cc:	68ac      	ldr	r4, [r5, #8]
    15ce:	e7e3      	b.n	1598 <_puts_r+0x24>
    15d0:	4b15      	ldr	r3, [pc, #84]	; (1628 <_puts_r+0xb4>)
    15d2:	429c      	cmp	r4, r3
    15d4:	bf08      	it	eq
    15d6:	68ec      	ldreq	r4, [r5, #12]
    15d8:	e7de      	b.n	1598 <_puts_r+0x24>
    15da:	4621      	mov	r1, r4
    15dc:	4628      	mov	r0, r5
    15de:	f000 f94d 	bl	187c <__swsetup_r>
    15e2:	2800      	cmp	r0, #0
    15e4:	d0dd      	beq.n	15a2 <_puts_r+0x2e>
    15e6:	f04f 30ff 	mov.w	r0, #4294967295
    15ea:	bd70      	pop	{r4, r5, r6, pc}
    15ec:	2b00      	cmp	r3, #0
    15ee:	da04      	bge.n	15fa <_puts_r+0x86>
    15f0:	69a2      	ldr	r2, [r4, #24]
    15f2:	4293      	cmp	r3, r2
    15f4:	db06      	blt.n	1604 <_puts_r+0x90>
    15f6:	290a      	cmp	r1, #10
    15f8:	d004      	beq.n	1604 <_puts_r+0x90>
    15fa:	6823      	ldr	r3, [r4, #0]
    15fc:	1c5a      	adds	r2, r3, #1
    15fe:	6022      	str	r2, [r4, #0]
    1600:	7019      	strb	r1, [r3, #0]
    1602:	e7cf      	b.n	15a4 <_puts_r+0x30>
    1604:	4622      	mov	r2, r4
    1606:	4628      	mov	r0, r5
    1608:	f000 f8e6 	bl	17d8 <__swbuf_r>
    160c:	3001      	adds	r0, #1
    160e:	d1c9      	bne.n	15a4 <_puts_r+0x30>
    1610:	e7e9      	b.n	15e6 <_puts_r+0x72>
    1612:	6823      	ldr	r3, [r4, #0]
    1614:	200a      	movs	r0, #10
    1616:	1c5a      	adds	r2, r3, #1
    1618:	6022      	str	r2, [r4, #0]
    161a:	7018      	strb	r0, [r3, #0]
    161c:	bd70      	pop	{r4, r5, r6, pc}
    161e:	bf00      	nop
    1620:	000038e8 	.word	0x000038e8
    1624:	00003908 	.word	0x00003908
    1628:	000038c8 	.word	0x000038c8

0000162c <puts>:
    162c:	4b02      	ldr	r3, [pc, #8]	; (1638 <puts+0xc>)
    162e:	4601      	mov	r1, r0
    1630:	6818      	ldr	r0, [r3, #0]
    1632:	f7ff bf9f 	b.w	1574 <_puts_r>
    1636:	bf00      	nop
    1638:	20000014 	.word	0x20000014

0000163c <iscanf>:
    163c:	b40f      	push	{r0, r1, r2, r3}
    163e:	4b0a      	ldr	r3, [pc, #40]	; (1668 <iscanf+0x2c>)
    1640:	b513      	push	{r0, r1, r4, lr}
    1642:	681c      	ldr	r4, [r3, #0]
    1644:	b124      	cbz	r4, 1650 <iscanf+0x14>
    1646:	69a3      	ldr	r3, [r4, #24]
    1648:	b913      	cbnz	r3, 1650 <iscanf+0x14>
    164a:	4620      	mov	r0, r4
    164c:	f000 fa88 	bl	1b60 <__sinit>
    1650:	ab05      	add	r3, sp, #20
    1652:	9a04      	ldr	r2, [sp, #16]
    1654:	6861      	ldr	r1, [r4, #4]
    1656:	9301      	str	r3, [sp, #4]
    1658:	4620      	mov	r0, r4
    165a:	f001 f867 	bl	272c <_vfiscanf_r>
    165e:	b002      	add	sp, #8
    1660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1664:	b004      	add	sp, #16
    1666:	4770      	bx	lr
    1668:	20000014 	.word	0x20000014

0000166c <setbuf>:
    166c:	2900      	cmp	r1, #0
    166e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1672:	bf0c      	ite	eq
    1674:	2202      	moveq	r2, #2
    1676:	2200      	movne	r2, #0
    1678:	f000 b800 	b.w	167c <setvbuf>

0000167c <setvbuf>:
    167c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1680:	461d      	mov	r5, r3
    1682:	4b51      	ldr	r3, [pc, #324]	; (17c8 <setvbuf+0x14c>)
    1684:	681e      	ldr	r6, [r3, #0]
    1686:	4604      	mov	r4, r0
    1688:	460f      	mov	r7, r1
    168a:	4690      	mov	r8, r2
    168c:	b126      	cbz	r6, 1698 <setvbuf+0x1c>
    168e:	69b3      	ldr	r3, [r6, #24]
    1690:	b913      	cbnz	r3, 1698 <setvbuf+0x1c>
    1692:	4630      	mov	r0, r6
    1694:	f000 fa64 	bl	1b60 <__sinit>
    1698:	4b4c      	ldr	r3, [pc, #304]	; (17cc <setvbuf+0x150>)
    169a:	429c      	cmp	r4, r3
    169c:	d152      	bne.n	1744 <setvbuf+0xc8>
    169e:	6874      	ldr	r4, [r6, #4]
    16a0:	f1b8 0f02 	cmp.w	r8, #2
    16a4:	d006      	beq.n	16b4 <setvbuf+0x38>
    16a6:	f1b8 0f01 	cmp.w	r8, #1
    16aa:	f200 8089 	bhi.w	17c0 <setvbuf+0x144>
    16ae:	2d00      	cmp	r5, #0
    16b0:	f2c0 8086 	blt.w	17c0 <setvbuf+0x144>
    16b4:	4621      	mov	r1, r4
    16b6:	4630      	mov	r0, r6
    16b8:	f000 f9d6 	bl	1a68 <_fflush_r>
    16bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    16be:	b141      	cbz	r1, 16d2 <setvbuf+0x56>
    16c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    16c4:	4299      	cmp	r1, r3
    16c6:	d002      	beq.n	16ce <setvbuf+0x52>
    16c8:	4630      	mov	r0, r6
    16ca:	f000 fb5b 	bl	1d84 <_free_r>
    16ce:	2300      	movs	r3, #0
    16d0:	6363      	str	r3, [r4, #52]	; 0x34
    16d2:	2300      	movs	r3, #0
    16d4:	61a3      	str	r3, [r4, #24]
    16d6:	6063      	str	r3, [r4, #4]
    16d8:	89a3      	ldrh	r3, [r4, #12]
    16da:	061b      	lsls	r3, r3, #24
    16dc:	d503      	bpl.n	16e6 <setvbuf+0x6a>
    16de:	6921      	ldr	r1, [r4, #16]
    16e0:	4630      	mov	r0, r6
    16e2:	f000 fb4f 	bl	1d84 <_free_r>
    16e6:	89a3      	ldrh	r3, [r4, #12]
    16e8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    16ec:	f023 0303 	bic.w	r3, r3, #3
    16f0:	f1b8 0f02 	cmp.w	r8, #2
    16f4:	81a3      	strh	r3, [r4, #12]
    16f6:	d05d      	beq.n	17b4 <setvbuf+0x138>
    16f8:	ab01      	add	r3, sp, #4
    16fa:	466a      	mov	r2, sp
    16fc:	4621      	mov	r1, r4
    16fe:	4630      	mov	r0, r6
    1700:	f000 fad4 	bl	1cac <__swhatbuf_r>
    1704:	89a3      	ldrh	r3, [r4, #12]
    1706:	4318      	orrs	r0, r3
    1708:	81a0      	strh	r0, [r4, #12]
    170a:	bb2d      	cbnz	r5, 1758 <setvbuf+0xdc>
    170c:	9d00      	ldr	r5, [sp, #0]
    170e:	4628      	mov	r0, r5
    1710:	f000 fb30 	bl	1d74 <malloc>
    1714:	4607      	mov	r7, r0
    1716:	2800      	cmp	r0, #0
    1718:	d14e      	bne.n	17b8 <setvbuf+0x13c>
    171a:	f8dd 9000 	ldr.w	r9, [sp]
    171e:	45a9      	cmp	r9, r5
    1720:	d13c      	bne.n	179c <setvbuf+0x120>
    1722:	f04f 30ff 	mov.w	r0, #4294967295
    1726:	89a3      	ldrh	r3, [r4, #12]
    1728:	f043 0302 	orr.w	r3, r3, #2
    172c:	81a3      	strh	r3, [r4, #12]
    172e:	2300      	movs	r3, #0
    1730:	60a3      	str	r3, [r4, #8]
    1732:	f104 0347 	add.w	r3, r4, #71	; 0x47
    1736:	6023      	str	r3, [r4, #0]
    1738:	6123      	str	r3, [r4, #16]
    173a:	2301      	movs	r3, #1
    173c:	6163      	str	r3, [r4, #20]
    173e:	b003      	add	sp, #12
    1740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1744:	4b22      	ldr	r3, [pc, #136]	; (17d0 <setvbuf+0x154>)
    1746:	429c      	cmp	r4, r3
    1748:	d101      	bne.n	174e <setvbuf+0xd2>
    174a:	68b4      	ldr	r4, [r6, #8]
    174c:	e7a8      	b.n	16a0 <setvbuf+0x24>
    174e:	4b21      	ldr	r3, [pc, #132]	; (17d4 <setvbuf+0x158>)
    1750:	429c      	cmp	r4, r3
    1752:	bf08      	it	eq
    1754:	68f4      	ldreq	r4, [r6, #12]
    1756:	e7a3      	b.n	16a0 <setvbuf+0x24>
    1758:	2f00      	cmp	r7, #0
    175a:	d0d8      	beq.n	170e <setvbuf+0x92>
    175c:	69b3      	ldr	r3, [r6, #24]
    175e:	b913      	cbnz	r3, 1766 <setvbuf+0xea>
    1760:	4630      	mov	r0, r6
    1762:	f000 f9fd 	bl	1b60 <__sinit>
    1766:	f1b8 0f01 	cmp.w	r8, #1
    176a:	bf08      	it	eq
    176c:	89a3      	ldrheq	r3, [r4, #12]
    176e:	6027      	str	r7, [r4, #0]
    1770:	bf04      	itt	eq
    1772:	f043 0301 	orreq.w	r3, r3, #1
    1776:	81a3      	strheq	r3, [r4, #12]
    1778:	89a3      	ldrh	r3, [r4, #12]
    177a:	6127      	str	r7, [r4, #16]
    177c:	f013 0008 	ands.w	r0, r3, #8
    1780:	6165      	str	r5, [r4, #20]
    1782:	d01b      	beq.n	17bc <setvbuf+0x140>
    1784:	f013 0001 	ands.w	r0, r3, #1
    1788:	bf18      	it	ne
    178a:	426d      	negne	r5, r5
    178c:	f04f 0300 	mov.w	r3, #0
    1790:	bf1d      	ittte	ne
    1792:	60a3      	strne	r3, [r4, #8]
    1794:	61a5      	strne	r5, [r4, #24]
    1796:	4618      	movne	r0, r3
    1798:	60a5      	streq	r5, [r4, #8]
    179a:	e7d0      	b.n	173e <setvbuf+0xc2>
    179c:	4648      	mov	r0, r9
    179e:	f000 fae9 	bl	1d74 <malloc>
    17a2:	4607      	mov	r7, r0
    17a4:	2800      	cmp	r0, #0
    17a6:	d0bc      	beq.n	1722 <setvbuf+0xa6>
    17a8:	89a3      	ldrh	r3, [r4, #12]
    17aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    17ae:	81a3      	strh	r3, [r4, #12]
    17b0:	464d      	mov	r5, r9
    17b2:	e7d3      	b.n	175c <setvbuf+0xe0>
    17b4:	2000      	movs	r0, #0
    17b6:	e7b6      	b.n	1726 <setvbuf+0xaa>
    17b8:	46a9      	mov	r9, r5
    17ba:	e7f5      	b.n	17a8 <setvbuf+0x12c>
    17bc:	60a0      	str	r0, [r4, #8]
    17be:	e7be      	b.n	173e <setvbuf+0xc2>
    17c0:	f04f 30ff 	mov.w	r0, #4294967295
    17c4:	e7bb      	b.n	173e <setvbuf+0xc2>
    17c6:	bf00      	nop
    17c8:	20000014 	.word	0x20000014
    17cc:	000038e8 	.word	0x000038e8
    17d0:	00003908 	.word	0x00003908
    17d4:	000038c8 	.word	0x000038c8

000017d8 <__swbuf_r>:
    17d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17da:	460e      	mov	r6, r1
    17dc:	4614      	mov	r4, r2
    17de:	4605      	mov	r5, r0
    17e0:	b118      	cbz	r0, 17ea <__swbuf_r+0x12>
    17e2:	6983      	ldr	r3, [r0, #24]
    17e4:	b90b      	cbnz	r3, 17ea <__swbuf_r+0x12>
    17e6:	f000 f9bb 	bl	1b60 <__sinit>
    17ea:	4b21      	ldr	r3, [pc, #132]	; (1870 <__swbuf_r+0x98>)
    17ec:	429c      	cmp	r4, r3
    17ee:	d12a      	bne.n	1846 <__swbuf_r+0x6e>
    17f0:	686c      	ldr	r4, [r5, #4]
    17f2:	69a3      	ldr	r3, [r4, #24]
    17f4:	60a3      	str	r3, [r4, #8]
    17f6:	89a3      	ldrh	r3, [r4, #12]
    17f8:	071a      	lsls	r2, r3, #28
    17fa:	d52e      	bpl.n	185a <__swbuf_r+0x82>
    17fc:	6923      	ldr	r3, [r4, #16]
    17fe:	b363      	cbz	r3, 185a <__swbuf_r+0x82>
    1800:	6923      	ldr	r3, [r4, #16]
    1802:	6820      	ldr	r0, [r4, #0]
    1804:	1ac0      	subs	r0, r0, r3
    1806:	6963      	ldr	r3, [r4, #20]
    1808:	b2f6      	uxtb	r6, r6
    180a:	4298      	cmp	r0, r3
    180c:	4637      	mov	r7, r6
    180e:	db04      	blt.n	181a <__swbuf_r+0x42>
    1810:	4621      	mov	r1, r4
    1812:	4628      	mov	r0, r5
    1814:	f000 f928 	bl	1a68 <_fflush_r>
    1818:	bb28      	cbnz	r0, 1866 <__swbuf_r+0x8e>
    181a:	68a3      	ldr	r3, [r4, #8]
    181c:	3b01      	subs	r3, #1
    181e:	60a3      	str	r3, [r4, #8]
    1820:	6823      	ldr	r3, [r4, #0]
    1822:	1c5a      	adds	r2, r3, #1
    1824:	6022      	str	r2, [r4, #0]
    1826:	701e      	strb	r6, [r3, #0]
    1828:	6963      	ldr	r3, [r4, #20]
    182a:	3001      	adds	r0, #1
    182c:	4298      	cmp	r0, r3
    182e:	d004      	beq.n	183a <__swbuf_r+0x62>
    1830:	89a3      	ldrh	r3, [r4, #12]
    1832:	07db      	lsls	r3, r3, #31
    1834:	d519      	bpl.n	186a <__swbuf_r+0x92>
    1836:	2e0a      	cmp	r6, #10
    1838:	d117      	bne.n	186a <__swbuf_r+0x92>
    183a:	4621      	mov	r1, r4
    183c:	4628      	mov	r0, r5
    183e:	f000 f913 	bl	1a68 <_fflush_r>
    1842:	b190      	cbz	r0, 186a <__swbuf_r+0x92>
    1844:	e00f      	b.n	1866 <__swbuf_r+0x8e>
    1846:	4b0b      	ldr	r3, [pc, #44]	; (1874 <__swbuf_r+0x9c>)
    1848:	429c      	cmp	r4, r3
    184a:	d101      	bne.n	1850 <__swbuf_r+0x78>
    184c:	68ac      	ldr	r4, [r5, #8]
    184e:	e7d0      	b.n	17f2 <__swbuf_r+0x1a>
    1850:	4b09      	ldr	r3, [pc, #36]	; (1878 <__swbuf_r+0xa0>)
    1852:	429c      	cmp	r4, r3
    1854:	bf08      	it	eq
    1856:	68ec      	ldreq	r4, [r5, #12]
    1858:	e7cb      	b.n	17f2 <__swbuf_r+0x1a>
    185a:	4621      	mov	r1, r4
    185c:	4628      	mov	r0, r5
    185e:	f000 f80d 	bl	187c <__swsetup_r>
    1862:	2800      	cmp	r0, #0
    1864:	d0cc      	beq.n	1800 <__swbuf_r+0x28>
    1866:	f04f 37ff 	mov.w	r7, #4294967295
    186a:	4638      	mov	r0, r7
    186c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    186e:	bf00      	nop
    1870:	000038e8 	.word	0x000038e8
    1874:	00003908 	.word	0x00003908
    1878:	000038c8 	.word	0x000038c8

0000187c <__swsetup_r>:
    187c:	4b32      	ldr	r3, [pc, #200]	; (1948 <__swsetup_r+0xcc>)
    187e:	b570      	push	{r4, r5, r6, lr}
    1880:	681d      	ldr	r5, [r3, #0]
    1882:	4606      	mov	r6, r0
    1884:	460c      	mov	r4, r1
    1886:	b125      	cbz	r5, 1892 <__swsetup_r+0x16>
    1888:	69ab      	ldr	r3, [r5, #24]
    188a:	b913      	cbnz	r3, 1892 <__swsetup_r+0x16>
    188c:	4628      	mov	r0, r5
    188e:	f000 f967 	bl	1b60 <__sinit>
    1892:	4b2e      	ldr	r3, [pc, #184]	; (194c <__swsetup_r+0xd0>)
    1894:	429c      	cmp	r4, r3
    1896:	d10f      	bne.n	18b8 <__swsetup_r+0x3c>
    1898:	686c      	ldr	r4, [r5, #4]
    189a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    189e:	b29a      	uxth	r2, r3
    18a0:	0715      	lsls	r5, r2, #28
    18a2:	d42c      	bmi.n	18fe <__swsetup_r+0x82>
    18a4:	06d0      	lsls	r0, r2, #27
    18a6:	d411      	bmi.n	18cc <__swsetup_r+0x50>
    18a8:	2209      	movs	r2, #9
    18aa:	6032      	str	r2, [r6, #0]
    18ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    18b0:	81a3      	strh	r3, [r4, #12]
    18b2:	f04f 30ff 	mov.w	r0, #4294967295
    18b6:	bd70      	pop	{r4, r5, r6, pc}
    18b8:	4b25      	ldr	r3, [pc, #148]	; (1950 <__swsetup_r+0xd4>)
    18ba:	429c      	cmp	r4, r3
    18bc:	d101      	bne.n	18c2 <__swsetup_r+0x46>
    18be:	68ac      	ldr	r4, [r5, #8]
    18c0:	e7eb      	b.n	189a <__swsetup_r+0x1e>
    18c2:	4b24      	ldr	r3, [pc, #144]	; (1954 <__swsetup_r+0xd8>)
    18c4:	429c      	cmp	r4, r3
    18c6:	bf08      	it	eq
    18c8:	68ec      	ldreq	r4, [r5, #12]
    18ca:	e7e6      	b.n	189a <__swsetup_r+0x1e>
    18cc:	0751      	lsls	r1, r2, #29
    18ce:	d512      	bpl.n	18f6 <__swsetup_r+0x7a>
    18d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    18d2:	b141      	cbz	r1, 18e6 <__swsetup_r+0x6a>
    18d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    18d8:	4299      	cmp	r1, r3
    18da:	d002      	beq.n	18e2 <__swsetup_r+0x66>
    18dc:	4630      	mov	r0, r6
    18de:	f000 fa51 	bl	1d84 <_free_r>
    18e2:	2300      	movs	r3, #0
    18e4:	6363      	str	r3, [r4, #52]	; 0x34
    18e6:	89a3      	ldrh	r3, [r4, #12]
    18e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    18ec:	81a3      	strh	r3, [r4, #12]
    18ee:	2300      	movs	r3, #0
    18f0:	6063      	str	r3, [r4, #4]
    18f2:	6923      	ldr	r3, [r4, #16]
    18f4:	6023      	str	r3, [r4, #0]
    18f6:	89a3      	ldrh	r3, [r4, #12]
    18f8:	f043 0308 	orr.w	r3, r3, #8
    18fc:	81a3      	strh	r3, [r4, #12]
    18fe:	6923      	ldr	r3, [r4, #16]
    1900:	b94b      	cbnz	r3, 1916 <__swsetup_r+0x9a>
    1902:	89a3      	ldrh	r3, [r4, #12]
    1904:	f403 7320 	and.w	r3, r3, #640	; 0x280
    1908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    190c:	d003      	beq.n	1916 <__swsetup_r+0x9a>
    190e:	4621      	mov	r1, r4
    1910:	4630      	mov	r0, r6
    1912:	f000 f9ef 	bl	1cf4 <__smakebuf_r>
    1916:	89a2      	ldrh	r2, [r4, #12]
    1918:	f012 0301 	ands.w	r3, r2, #1
    191c:	d00c      	beq.n	1938 <__swsetup_r+0xbc>
    191e:	2300      	movs	r3, #0
    1920:	60a3      	str	r3, [r4, #8]
    1922:	6963      	ldr	r3, [r4, #20]
    1924:	425b      	negs	r3, r3
    1926:	61a3      	str	r3, [r4, #24]
    1928:	6923      	ldr	r3, [r4, #16]
    192a:	b953      	cbnz	r3, 1942 <__swsetup_r+0xc6>
    192c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1930:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    1934:	d1ba      	bne.n	18ac <__swsetup_r+0x30>
    1936:	bd70      	pop	{r4, r5, r6, pc}
    1938:	0792      	lsls	r2, r2, #30
    193a:	bf58      	it	pl
    193c:	6963      	ldrpl	r3, [r4, #20]
    193e:	60a3      	str	r3, [r4, #8]
    1940:	e7f2      	b.n	1928 <__swsetup_r+0xac>
    1942:	2000      	movs	r0, #0
    1944:	e7f7      	b.n	1936 <__swsetup_r+0xba>
    1946:	bf00      	nop
    1948:	20000014 	.word	0x20000014
    194c:	000038e8 	.word	0x000038e8
    1950:	00003908 	.word	0x00003908
    1954:	000038c8 	.word	0x000038c8

00001958 <__sflush_r>:
    1958:	898a      	ldrh	r2, [r1, #12]
    195a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    195e:	4605      	mov	r5, r0
    1960:	0710      	lsls	r0, r2, #28
    1962:	460c      	mov	r4, r1
    1964:	d45a      	bmi.n	1a1c <__sflush_r+0xc4>
    1966:	684b      	ldr	r3, [r1, #4]
    1968:	2b00      	cmp	r3, #0
    196a:	dc05      	bgt.n	1978 <__sflush_r+0x20>
    196c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    196e:	2b00      	cmp	r3, #0
    1970:	dc02      	bgt.n	1978 <__sflush_r+0x20>
    1972:	2000      	movs	r0, #0
    1974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    197a:	2e00      	cmp	r6, #0
    197c:	d0f9      	beq.n	1972 <__sflush_r+0x1a>
    197e:	2300      	movs	r3, #0
    1980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    1984:	682f      	ldr	r7, [r5, #0]
    1986:	602b      	str	r3, [r5, #0]
    1988:	d033      	beq.n	19f2 <__sflush_r+0x9a>
    198a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    198c:	89a3      	ldrh	r3, [r4, #12]
    198e:	075a      	lsls	r2, r3, #29
    1990:	d505      	bpl.n	199e <__sflush_r+0x46>
    1992:	6863      	ldr	r3, [r4, #4]
    1994:	1ac0      	subs	r0, r0, r3
    1996:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1998:	b10b      	cbz	r3, 199e <__sflush_r+0x46>
    199a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    199c:	1ac0      	subs	r0, r0, r3
    199e:	2300      	movs	r3, #0
    19a0:	4602      	mov	r2, r0
    19a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    19a4:	6a21      	ldr	r1, [r4, #32]
    19a6:	4628      	mov	r0, r5
    19a8:	47b0      	blx	r6
    19aa:	1c43      	adds	r3, r0, #1
    19ac:	89a3      	ldrh	r3, [r4, #12]
    19ae:	d106      	bne.n	19be <__sflush_r+0x66>
    19b0:	6829      	ldr	r1, [r5, #0]
    19b2:	291d      	cmp	r1, #29
    19b4:	d84b      	bhi.n	1a4e <__sflush_r+0xf6>
    19b6:	4a2b      	ldr	r2, [pc, #172]	; (1a64 <__sflush_r+0x10c>)
    19b8:	40ca      	lsrs	r2, r1
    19ba:	07d6      	lsls	r6, r2, #31
    19bc:	d547      	bpl.n	1a4e <__sflush_r+0xf6>
    19be:	2200      	movs	r2, #0
    19c0:	6062      	str	r2, [r4, #4]
    19c2:	04d9      	lsls	r1, r3, #19
    19c4:	6922      	ldr	r2, [r4, #16]
    19c6:	6022      	str	r2, [r4, #0]
    19c8:	d504      	bpl.n	19d4 <__sflush_r+0x7c>
    19ca:	1c42      	adds	r2, r0, #1
    19cc:	d101      	bne.n	19d2 <__sflush_r+0x7a>
    19ce:	682b      	ldr	r3, [r5, #0]
    19d0:	b903      	cbnz	r3, 19d4 <__sflush_r+0x7c>
    19d2:	6560      	str	r0, [r4, #84]	; 0x54
    19d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    19d6:	602f      	str	r7, [r5, #0]
    19d8:	2900      	cmp	r1, #0
    19da:	d0ca      	beq.n	1972 <__sflush_r+0x1a>
    19dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
    19e0:	4299      	cmp	r1, r3
    19e2:	d002      	beq.n	19ea <__sflush_r+0x92>
    19e4:	4628      	mov	r0, r5
    19e6:	f000 f9cd 	bl	1d84 <_free_r>
    19ea:	2000      	movs	r0, #0
    19ec:	6360      	str	r0, [r4, #52]	; 0x34
    19ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19f2:	6a21      	ldr	r1, [r4, #32]
    19f4:	2301      	movs	r3, #1
    19f6:	4628      	mov	r0, r5
    19f8:	47b0      	blx	r6
    19fa:	1c41      	adds	r1, r0, #1
    19fc:	d1c6      	bne.n	198c <__sflush_r+0x34>
    19fe:	682b      	ldr	r3, [r5, #0]
    1a00:	2b00      	cmp	r3, #0
    1a02:	d0c3      	beq.n	198c <__sflush_r+0x34>
    1a04:	2b1d      	cmp	r3, #29
    1a06:	d001      	beq.n	1a0c <__sflush_r+0xb4>
    1a08:	2b16      	cmp	r3, #22
    1a0a:	d101      	bne.n	1a10 <__sflush_r+0xb8>
    1a0c:	602f      	str	r7, [r5, #0]
    1a0e:	e7b0      	b.n	1972 <__sflush_r+0x1a>
    1a10:	89a3      	ldrh	r3, [r4, #12]
    1a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1a16:	81a3      	strh	r3, [r4, #12]
    1a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a1c:	690f      	ldr	r7, [r1, #16]
    1a1e:	2f00      	cmp	r7, #0
    1a20:	d0a7      	beq.n	1972 <__sflush_r+0x1a>
    1a22:	0793      	lsls	r3, r2, #30
    1a24:	680e      	ldr	r6, [r1, #0]
    1a26:	bf08      	it	eq
    1a28:	694b      	ldreq	r3, [r1, #20]
    1a2a:	600f      	str	r7, [r1, #0]
    1a2c:	bf18      	it	ne
    1a2e:	2300      	movne	r3, #0
    1a30:	eba6 0807 	sub.w	r8, r6, r7
    1a34:	608b      	str	r3, [r1, #8]
    1a36:	f1b8 0f00 	cmp.w	r8, #0
    1a3a:	dd9a      	ble.n	1972 <__sflush_r+0x1a>
    1a3c:	4643      	mov	r3, r8
    1a3e:	463a      	mov	r2, r7
    1a40:	6a21      	ldr	r1, [r4, #32]
    1a42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1a44:	4628      	mov	r0, r5
    1a46:	47b0      	blx	r6
    1a48:	2800      	cmp	r0, #0
    1a4a:	dc07      	bgt.n	1a5c <__sflush_r+0x104>
    1a4c:	89a3      	ldrh	r3, [r4, #12]
    1a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1a52:	81a3      	strh	r3, [r4, #12]
    1a54:	f04f 30ff 	mov.w	r0, #4294967295
    1a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a5c:	4407      	add	r7, r0
    1a5e:	eba8 0800 	sub.w	r8, r8, r0
    1a62:	e7e8      	b.n	1a36 <__sflush_r+0xde>
    1a64:	20400001 	.word	0x20400001

00001a68 <_fflush_r>:
    1a68:	b538      	push	{r3, r4, r5, lr}
    1a6a:	690b      	ldr	r3, [r1, #16]
    1a6c:	4605      	mov	r5, r0
    1a6e:	460c      	mov	r4, r1
    1a70:	b1db      	cbz	r3, 1aaa <_fflush_r+0x42>
    1a72:	b118      	cbz	r0, 1a7c <_fflush_r+0x14>
    1a74:	6983      	ldr	r3, [r0, #24]
    1a76:	b90b      	cbnz	r3, 1a7c <_fflush_r+0x14>
    1a78:	f000 f872 	bl	1b60 <__sinit>
    1a7c:	4b0c      	ldr	r3, [pc, #48]	; (1ab0 <_fflush_r+0x48>)
    1a7e:	429c      	cmp	r4, r3
    1a80:	d109      	bne.n	1a96 <_fflush_r+0x2e>
    1a82:	686c      	ldr	r4, [r5, #4]
    1a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1a88:	b17b      	cbz	r3, 1aaa <_fflush_r+0x42>
    1a8a:	4621      	mov	r1, r4
    1a8c:	4628      	mov	r0, r5
    1a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1a92:	f7ff bf61 	b.w	1958 <__sflush_r>
    1a96:	4b07      	ldr	r3, [pc, #28]	; (1ab4 <_fflush_r+0x4c>)
    1a98:	429c      	cmp	r4, r3
    1a9a:	d101      	bne.n	1aa0 <_fflush_r+0x38>
    1a9c:	68ac      	ldr	r4, [r5, #8]
    1a9e:	e7f1      	b.n	1a84 <_fflush_r+0x1c>
    1aa0:	4b05      	ldr	r3, [pc, #20]	; (1ab8 <_fflush_r+0x50>)
    1aa2:	429c      	cmp	r4, r3
    1aa4:	bf08      	it	eq
    1aa6:	68ec      	ldreq	r4, [r5, #12]
    1aa8:	e7ec      	b.n	1a84 <_fflush_r+0x1c>
    1aaa:	2000      	movs	r0, #0
    1aac:	bd38      	pop	{r3, r4, r5, pc}
    1aae:	bf00      	nop
    1ab0:	000038e8 	.word	0x000038e8
    1ab4:	00003908 	.word	0x00003908
    1ab8:	000038c8 	.word	0x000038c8

00001abc <fflush>:
    1abc:	4601      	mov	r1, r0
    1abe:	b920      	cbnz	r0, 1aca <fflush+0xe>
    1ac0:	4b04      	ldr	r3, [pc, #16]	; (1ad4 <fflush+0x18>)
    1ac2:	4905      	ldr	r1, [pc, #20]	; (1ad8 <fflush+0x1c>)
    1ac4:	6818      	ldr	r0, [r3, #0]
    1ac6:	f000 b8d3 	b.w	1c70 <_fwalk_reent>
    1aca:	4b04      	ldr	r3, [pc, #16]	; (1adc <fflush+0x20>)
    1acc:	6818      	ldr	r0, [r3, #0]
    1ace:	f7ff bfcb 	b.w	1a68 <_fflush_r>
    1ad2:	bf00      	nop
    1ad4:	000038c4 	.word	0x000038c4
    1ad8:	00001a69 	.word	0x00001a69
    1adc:	20000014 	.word	0x20000014

00001ae0 <_cleanup_r>:
    1ae0:	4901      	ldr	r1, [pc, #4]	; (1ae8 <_cleanup_r+0x8>)
    1ae2:	f000 b8c5 	b.w	1c70 <_fwalk_reent>
    1ae6:	bf00      	nop
    1ae8:	00001a69 	.word	0x00001a69

00001aec <std.isra.0>:
    1aec:	2300      	movs	r3, #0
    1aee:	b510      	push	{r4, lr}
    1af0:	4604      	mov	r4, r0
    1af2:	6003      	str	r3, [r0, #0]
    1af4:	6043      	str	r3, [r0, #4]
    1af6:	6083      	str	r3, [r0, #8]
    1af8:	8181      	strh	r1, [r0, #12]
    1afa:	6643      	str	r3, [r0, #100]	; 0x64
    1afc:	81c2      	strh	r2, [r0, #14]
    1afe:	6103      	str	r3, [r0, #16]
    1b00:	6143      	str	r3, [r0, #20]
    1b02:	6183      	str	r3, [r0, #24]
    1b04:	4619      	mov	r1, r3
    1b06:	2208      	movs	r2, #8
    1b08:	305c      	adds	r0, #92	; 0x5c
    1b0a:	f7ff fd12 	bl	1532 <memset>
    1b0e:	4b05      	ldr	r3, [pc, #20]	; (1b24 <std.isra.0+0x38>)
    1b10:	6263      	str	r3, [r4, #36]	; 0x24
    1b12:	4b05      	ldr	r3, [pc, #20]	; (1b28 <std.isra.0+0x3c>)
    1b14:	62a3      	str	r3, [r4, #40]	; 0x28
    1b16:	4b05      	ldr	r3, [pc, #20]	; (1b2c <std.isra.0+0x40>)
    1b18:	62e3      	str	r3, [r4, #44]	; 0x2c
    1b1a:	4b05      	ldr	r3, [pc, #20]	; (1b30 <std.isra.0+0x44>)
    1b1c:	6224      	str	r4, [r4, #32]
    1b1e:	6323      	str	r3, [r4, #48]	; 0x30
    1b20:	bd10      	pop	{r4, pc}
    1b22:	bf00      	nop
    1b24:	00002bd5 	.word	0x00002bd5
    1b28:	00002bf7 	.word	0x00002bf7
    1b2c:	00002c2f 	.word	0x00002c2f
    1b30:	00002c53 	.word	0x00002c53

00001b34 <__sfmoreglue>:
    1b34:	b570      	push	{r4, r5, r6, lr}
    1b36:	1e4a      	subs	r2, r1, #1
    1b38:	2568      	movs	r5, #104	; 0x68
    1b3a:	4355      	muls	r5, r2
    1b3c:	460e      	mov	r6, r1
    1b3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    1b42:	f000 f96d 	bl	1e20 <_malloc_r>
    1b46:	4604      	mov	r4, r0
    1b48:	b140      	cbz	r0, 1b5c <__sfmoreglue+0x28>
    1b4a:	2100      	movs	r1, #0
    1b4c:	e880 0042 	stmia.w	r0, {r1, r6}
    1b50:	300c      	adds	r0, #12
    1b52:	60a0      	str	r0, [r4, #8]
    1b54:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1b58:	f7ff fceb 	bl	1532 <memset>
    1b5c:	4620      	mov	r0, r4
    1b5e:	bd70      	pop	{r4, r5, r6, pc}

00001b60 <__sinit>:
    1b60:	6983      	ldr	r3, [r0, #24]
    1b62:	b510      	push	{r4, lr}
    1b64:	4604      	mov	r4, r0
    1b66:	bb33      	cbnz	r3, 1bb6 <__sinit+0x56>
    1b68:	6483      	str	r3, [r0, #72]	; 0x48
    1b6a:	64c3      	str	r3, [r0, #76]	; 0x4c
    1b6c:	6503      	str	r3, [r0, #80]	; 0x50
    1b6e:	4b12      	ldr	r3, [pc, #72]	; (1bb8 <__sinit+0x58>)
    1b70:	4a12      	ldr	r2, [pc, #72]	; (1bbc <__sinit+0x5c>)
    1b72:	681b      	ldr	r3, [r3, #0]
    1b74:	6282      	str	r2, [r0, #40]	; 0x28
    1b76:	4298      	cmp	r0, r3
    1b78:	bf04      	itt	eq
    1b7a:	2301      	moveq	r3, #1
    1b7c:	6183      	streq	r3, [r0, #24]
    1b7e:	f000 f81f 	bl	1bc0 <__sfp>
    1b82:	6060      	str	r0, [r4, #4]
    1b84:	4620      	mov	r0, r4
    1b86:	f000 f81b 	bl	1bc0 <__sfp>
    1b8a:	60a0      	str	r0, [r4, #8]
    1b8c:	4620      	mov	r0, r4
    1b8e:	f000 f817 	bl	1bc0 <__sfp>
    1b92:	2200      	movs	r2, #0
    1b94:	60e0      	str	r0, [r4, #12]
    1b96:	2104      	movs	r1, #4
    1b98:	6860      	ldr	r0, [r4, #4]
    1b9a:	f7ff ffa7 	bl	1aec <std.isra.0>
    1b9e:	2201      	movs	r2, #1
    1ba0:	2109      	movs	r1, #9
    1ba2:	68a0      	ldr	r0, [r4, #8]
    1ba4:	f7ff ffa2 	bl	1aec <std.isra.0>
    1ba8:	2202      	movs	r2, #2
    1baa:	2112      	movs	r1, #18
    1bac:	68e0      	ldr	r0, [r4, #12]
    1bae:	f7ff ff9d 	bl	1aec <std.isra.0>
    1bb2:	2301      	movs	r3, #1
    1bb4:	61a3      	str	r3, [r4, #24]
    1bb6:	bd10      	pop	{r4, pc}
    1bb8:	000038c4 	.word	0x000038c4
    1bbc:	00001ae1 	.word	0x00001ae1

00001bc0 <__sfp>:
    1bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bc2:	4b1c      	ldr	r3, [pc, #112]	; (1c34 <__sfp+0x74>)
    1bc4:	681e      	ldr	r6, [r3, #0]
    1bc6:	69b3      	ldr	r3, [r6, #24]
    1bc8:	4607      	mov	r7, r0
    1bca:	b913      	cbnz	r3, 1bd2 <__sfp+0x12>
    1bcc:	4630      	mov	r0, r6
    1bce:	f7ff ffc7 	bl	1b60 <__sinit>
    1bd2:	3648      	adds	r6, #72	; 0x48
    1bd4:	68b4      	ldr	r4, [r6, #8]
    1bd6:	6873      	ldr	r3, [r6, #4]
    1bd8:	3b01      	subs	r3, #1
    1bda:	d503      	bpl.n	1be4 <__sfp+0x24>
    1bdc:	6833      	ldr	r3, [r6, #0]
    1bde:	b133      	cbz	r3, 1bee <__sfp+0x2e>
    1be0:	6836      	ldr	r6, [r6, #0]
    1be2:	e7f7      	b.n	1bd4 <__sfp+0x14>
    1be4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    1be8:	b16d      	cbz	r5, 1c06 <__sfp+0x46>
    1bea:	3468      	adds	r4, #104	; 0x68
    1bec:	e7f4      	b.n	1bd8 <__sfp+0x18>
    1bee:	2104      	movs	r1, #4
    1bf0:	4638      	mov	r0, r7
    1bf2:	f7ff ff9f 	bl	1b34 <__sfmoreglue>
    1bf6:	6030      	str	r0, [r6, #0]
    1bf8:	2800      	cmp	r0, #0
    1bfa:	d1f1      	bne.n	1be0 <__sfp+0x20>
    1bfc:	230c      	movs	r3, #12
    1bfe:	603b      	str	r3, [r7, #0]
    1c00:	4604      	mov	r4, r0
    1c02:	4620      	mov	r0, r4
    1c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1c0a:	81e3      	strh	r3, [r4, #14]
    1c0c:	2301      	movs	r3, #1
    1c0e:	81a3      	strh	r3, [r4, #12]
    1c10:	6665      	str	r5, [r4, #100]	; 0x64
    1c12:	6025      	str	r5, [r4, #0]
    1c14:	60a5      	str	r5, [r4, #8]
    1c16:	6065      	str	r5, [r4, #4]
    1c18:	6125      	str	r5, [r4, #16]
    1c1a:	6165      	str	r5, [r4, #20]
    1c1c:	61a5      	str	r5, [r4, #24]
    1c1e:	2208      	movs	r2, #8
    1c20:	4629      	mov	r1, r5
    1c22:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    1c26:	f7ff fc84 	bl	1532 <memset>
    1c2a:	6365      	str	r5, [r4, #52]	; 0x34
    1c2c:	63a5      	str	r5, [r4, #56]	; 0x38
    1c2e:	64a5      	str	r5, [r4, #72]	; 0x48
    1c30:	64e5      	str	r5, [r4, #76]	; 0x4c
    1c32:	e7e6      	b.n	1c02 <__sfp+0x42>
    1c34:	000038c4 	.word	0x000038c4

00001c38 <_fwalk>:
    1c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c3c:	4688      	mov	r8, r1
    1c3e:	f100 0448 	add.w	r4, r0, #72	; 0x48
    1c42:	2600      	movs	r6, #0
    1c44:	b914      	cbnz	r4, 1c4c <_fwalk+0x14>
    1c46:	4630      	mov	r0, r6
    1c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c4c:	68a5      	ldr	r5, [r4, #8]
    1c4e:	6867      	ldr	r7, [r4, #4]
    1c50:	3f01      	subs	r7, #1
    1c52:	d501      	bpl.n	1c58 <_fwalk+0x20>
    1c54:	6824      	ldr	r4, [r4, #0]
    1c56:	e7f5      	b.n	1c44 <_fwalk+0xc>
    1c58:	89ab      	ldrh	r3, [r5, #12]
    1c5a:	2b01      	cmp	r3, #1
    1c5c:	d906      	bls.n	1c6c <_fwalk+0x34>
    1c5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    1c62:	3301      	adds	r3, #1
    1c64:	d002      	beq.n	1c6c <_fwalk+0x34>
    1c66:	4628      	mov	r0, r5
    1c68:	47c0      	blx	r8
    1c6a:	4306      	orrs	r6, r0
    1c6c:	3568      	adds	r5, #104	; 0x68
    1c6e:	e7ef      	b.n	1c50 <_fwalk+0x18>

00001c70 <_fwalk_reent>:
    1c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1c74:	4680      	mov	r8, r0
    1c76:	4689      	mov	r9, r1
    1c78:	f100 0448 	add.w	r4, r0, #72	; 0x48
    1c7c:	2600      	movs	r6, #0
    1c7e:	b914      	cbnz	r4, 1c86 <_fwalk_reent+0x16>
    1c80:	4630      	mov	r0, r6
    1c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1c86:	68a5      	ldr	r5, [r4, #8]
    1c88:	6867      	ldr	r7, [r4, #4]
    1c8a:	3f01      	subs	r7, #1
    1c8c:	d501      	bpl.n	1c92 <_fwalk_reent+0x22>
    1c8e:	6824      	ldr	r4, [r4, #0]
    1c90:	e7f5      	b.n	1c7e <_fwalk_reent+0xe>
    1c92:	89ab      	ldrh	r3, [r5, #12]
    1c94:	2b01      	cmp	r3, #1
    1c96:	d907      	bls.n	1ca8 <_fwalk_reent+0x38>
    1c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    1c9c:	3301      	adds	r3, #1
    1c9e:	d003      	beq.n	1ca8 <_fwalk_reent+0x38>
    1ca0:	4629      	mov	r1, r5
    1ca2:	4640      	mov	r0, r8
    1ca4:	47c8      	blx	r9
    1ca6:	4306      	orrs	r6, r0
    1ca8:	3568      	adds	r5, #104	; 0x68
    1caa:	e7ee      	b.n	1c8a <_fwalk_reent+0x1a>

00001cac <__swhatbuf_r>:
    1cac:	b570      	push	{r4, r5, r6, lr}
    1cae:	460e      	mov	r6, r1
    1cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1cb4:	2900      	cmp	r1, #0
    1cb6:	b090      	sub	sp, #64	; 0x40
    1cb8:	4614      	mov	r4, r2
    1cba:	461d      	mov	r5, r3
    1cbc:	da07      	bge.n	1cce <__swhatbuf_r+0x22>
    1cbe:	2300      	movs	r3, #0
    1cc0:	602b      	str	r3, [r5, #0]
    1cc2:	89b3      	ldrh	r3, [r6, #12]
    1cc4:	061a      	lsls	r2, r3, #24
    1cc6:	d410      	bmi.n	1cea <__swhatbuf_r+0x3e>
    1cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ccc:	e00e      	b.n	1cec <__swhatbuf_r+0x40>
    1cce:	aa01      	add	r2, sp, #4
    1cd0:	f001 f9b6 	bl	3040 <_fstat_r>
    1cd4:	2800      	cmp	r0, #0
    1cd6:	dbf2      	blt.n	1cbe <__swhatbuf_r+0x12>
    1cd8:	9a02      	ldr	r2, [sp, #8]
    1cda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    1cde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    1ce2:	425a      	negs	r2, r3
    1ce4:	415a      	adcs	r2, r3
    1ce6:	602a      	str	r2, [r5, #0]
    1ce8:	e7ee      	b.n	1cc8 <__swhatbuf_r+0x1c>
    1cea:	2340      	movs	r3, #64	; 0x40
    1cec:	2000      	movs	r0, #0
    1cee:	6023      	str	r3, [r4, #0]
    1cf0:	b010      	add	sp, #64	; 0x40
    1cf2:	bd70      	pop	{r4, r5, r6, pc}

00001cf4 <__smakebuf_r>:
    1cf4:	898b      	ldrh	r3, [r1, #12]
    1cf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1cf8:	079d      	lsls	r5, r3, #30
    1cfa:	4606      	mov	r6, r0
    1cfc:	460c      	mov	r4, r1
    1cfe:	d507      	bpl.n	1d10 <__smakebuf_r+0x1c>
    1d00:	f104 0347 	add.w	r3, r4, #71	; 0x47
    1d04:	6023      	str	r3, [r4, #0]
    1d06:	6123      	str	r3, [r4, #16]
    1d08:	2301      	movs	r3, #1
    1d0a:	6163      	str	r3, [r4, #20]
    1d0c:	b002      	add	sp, #8
    1d0e:	bd70      	pop	{r4, r5, r6, pc}
    1d10:	ab01      	add	r3, sp, #4
    1d12:	466a      	mov	r2, sp
    1d14:	f7ff ffca 	bl	1cac <__swhatbuf_r>
    1d18:	9900      	ldr	r1, [sp, #0]
    1d1a:	4605      	mov	r5, r0
    1d1c:	4630      	mov	r0, r6
    1d1e:	f000 f87f 	bl	1e20 <_malloc_r>
    1d22:	b948      	cbnz	r0, 1d38 <__smakebuf_r+0x44>
    1d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1d28:	059a      	lsls	r2, r3, #22
    1d2a:	d4ef      	bmi.n	1d0c <__smakebuf_r+0x18>
    1d2c:	f023 0303 	bic.w	r3, r3, #3
    1d30:	f043 0302 	orr.w	r3, r3, #2
    1d34:	81a3      	strh	r3, [r4, #12]
    1d36:	e7e3      	b.n	1d00 <__smakebuf_r+0xc>
    1d38:	4b0d      	ldr	r3, [pc, #52]	; (1d70 <__smakebuf_r+0x7c>)
    1d3a:	62b3      	str	r3, [r6, #40]	; 0x28
    1d3c:	89a3      	ldrh	r3, [r4, #12]
    1d3e:	6020      	str	r0, [r4, #0]
    1d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1d44:	81a3      	strh	r3, [r4, #12]
    1d46:	9b00      	ldr	r3, [sp, #0]
    1d48:	6163      	str	r3, [r4, #20]
    1d4a:	9b01      	ldr	r3, [sp, #4]
    1d4c:	6120      	str	r0, [r4, #16]
    1d4e:	b15b      	cbz	r3, 1d68 <__smakebuf_r+0x74>
    1d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1d54:	4630      	mov	r0, r6
    1d56:	f001 f985 	bl	3064 <_isatty_r>
    1d5a:	b128      	cbz	r0, 1d68 <__smakebuf_r+0x74>
    1d5c:	89a3      	ldrh	r3, [r4, #12]
    1d5e:	f023 0303 	bic.w	r3, r3, #3
    1d62:	f043 0301 	orr.w	r3, r3, #1
    1d66:	81a3      	strh	r3, [r4, #12]
    1d68:	89a3      	ldrh	r3, [r4, #12]
    1d6a:	431d      	orrs	r5, r3
    1d6c:	81a5      	strh	r5, [r4, #12]
    1d6e:	e7cd      	b.n	1d0c <__smakebuf_r+0x18>
    1d70:	00001ae1 	.word	0x00001ae1

00001d74 <malloc>:
    1d74:	4b02      	ldr	r3, [pc, #8]	; (1d80 <malloc+0xc>)
    1d76:	4601      	mov	r1, r0
    1d78:	6818      	ldr	r0, [r3, #0]
    1d7a:	f000 b851 	b.w	1e20 <_malloc_r>
    1d7e:	bf00      	nop
    1d80:	20000014 	.word	0x20000014

00001d84 <_free_r>:
    1d84:	b538      	push	{r3, r4, r5, lr}
    1d86:	4605      	mov	r5, r0
    1d88:	2900      	cmp	r1, #0
    1d8a:	d045      	beq.n	1e18 <_free_r+0x94>
    1d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1d90:	1f0c      	subs	r4, r1, #4
    1d92:	2b00      	cmp	r3, #0
    1d94:	bfb8      	it	lt
    1d96:	18e4      	addlt	r4, r4, r3
    1d98:	f001 f9fa 	bl	3190 <__malloc_lock>
    1d9c:	4a1f      	ldr	r2, [pc, #124]	; (1e1c <_free_r+0x98>)
    1d9e:	6813      	ldr	r3, [r2, #0]
    1da0:	4610      	mov	r0, r2
    1da2:	b933      	cbnz	r3, 1db2 <_free_r+0x2e>
    1da4:	6063      	str	r3, [r4, #4]
    1da6:	6014      	str	r4, [r2, #0]
    1da8:	4628      	mov	r0, r5
    1daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1dae:	f001 b9f0 	b.w	3192 <__malloc_unlock>
    1db2:	42a3      	cmp	r3, r4
    1db4:	d90c      	bls.n	1dd0 <_free_r+0x4c>
    1db6:	6821      	ldr	r1, [r4, #0]
    1db8:	1862      	adds	r2, r4, r1
    1dba:	4293      	cmp	r3, r2
    1dbc:	bf04      	itt	eq
    1dbe:	681a      	ldreq	r2, [r3, #0]
    1dc0:	685b      	ldreq	r3, [r3, #4]
    1dc2:	6063      	str	r3, [r4, #4]
    1dc4:	bf04      	itt	eq
    1dc6:	1852      	addeq	r2, r2, r1
    1dc8:	6022      	streq	r2, [r4, #0]
    1dca:	6004      	str	r4, [r0, #0]
    1dcc:	e7ec      	b.n	1da8 <_free_r+0x24>
    1dce:	4613      	mov	r3, r2
    1dd0:	685a      	ldr	r2, [r3, #4]
    1dd2:	b10a      	cbz	r2, 1dd8 <_free_r+0x54>
    1dd4:	42a2      	cmp	r2, r4
    1dd6:	d9fa      	bls.n	1dce <_free_r+0x4a>
    1dd8:	6819      	ldr	r1, [r3, #0]
    1dda:	1858      	adds	r0, r3, r1
    1ddc:	42a0      	cmp	r0, r4
    1dde:	d10b      	bne.n	1df8 <_free_r+0x74>
    1de0:	6820      	ldr	r0, [r4, #0]
    1de2:	4401      	add	r1, r0
    1de4:	1858      	adds	r0, r3, r1
    1de6:	4282      	cmp	r2, r0
    1de8:	6019      	str	r1, [r3, #0]
    1dea:	d1dd      	bne.n	1da8 <_free_r+0x24>
    1dec:	6810      	ldr	r0, [r2, #0]
    1dee:	6852      	ldr	r2, [r2, #4]
    1df0:	605a      	str	r2, [r3, #4]
    1df2:	4401      	add	r1, r0
    1df4:	6019      	str	r1, [r3, #0]
    1df6:	e7d7      	b.n	1da8 <_free_r+0x24>
    1df8:	d902      	bls.n	1e00 <_free_r+0x7c>
    1dfa:	230c      	movs	r3, #12
    1dfc:	602b      	str	r3, [r5, #0]
    1dfe:	e7d3      	b.n	1da8 <_free_r+0x24>
    1e00:	6820      	ldr	r0, [r4, #0]
    1e02:	1821      	adds	r1, r4, r0
    1e04:	428a      	cmp	r2, r1
    1e06:	bf04      	itt	eq
    1e08:	6811      	ldreq	r1, [r2, #0]
    1e0a:	6852      	ldreq	r2, [r2, #4]
    1e0c:	6062      	str	r2, [r4, #4]
    1e0e:	bf04      	itt	eq
    1e10:	1809      	addeq	r1, r1, r0
    1e12:	6021      	streq	r1, [r4, #0]
    1e14:	605c      	str	r4, [r3, #4]
    1e16:	e7c7      	b.n	1da8 <_free_r+0x24>
    1e18:	bd38      	pop	{r3, r4, r5, pc}
    1e1a:	bf00      	nop
    1e1c:	20000234 	.word	0x20000234

00001e20 <_malloc_r>:
    1e20:	b570      	push	{r4, r5, r6, lr}
    1e22:	1ccd      	adds	r5, r1, #3
    1e24:	f025 0503 	bic.w	r5, r5, #3
    1e28:	3508      	adds	r5, #8
    1e2a:	2d0c      	cmp	r5, #12
    1e2c:	bf38      	it	cc
    1e2e:	250c      	movcc	r5, #12
    1e30:	2d00      	cmp	r5, #0
    1e32:	4606      	mov	r6, r0
    1e34:	db01      	blt.n	1e3a <_malloc_r+0x1a>
    1e36:	42a9      	cmp	r1, r5
    1e38:	d903      	bls.n	1e42 <_malloc_r+0x22>
    1e3a:	230c      	movs	r3, #12
    1e3c:	6033      	str	r3, [r6, #0]
    1e3e:	2000      	movs	r0, #0
    1e40:	bd70      	pop	{r4, r5, r6, pc}
    1e42:	f001 f9a5 	bl	3190 <__malloc_lock>
    1e46:	4a23      	ldr	r2, [pc, #140]	; (1ed4 <_malloc_r+0xb4>)
    1e48:	6814      	ldr	r4, [r2, #0]
    1e4a:	4621      	mov	r1, r4
    1e4c:	b991      	cbnz	r1, 1e74 <_malloc_r+0x54>
    1e4e:	4c22      	ldr	r4, [pc, #136]	; (1ed8 <_malloc_r+0xb8>)
    1e50:	6823      	ldr	r3, [r4, #0]
    1e52:	b91b      	cbnz	r3, 1e5c <_malloc_r+0x3c>
    1e54:	4630      	mov	r0, r6
    1e56:	f000 fe7d 	bl	2b54 <_sbrk_r>
    1e5a:	6020      	str	r0, [r4, #0]
    1e5c:	4629      	mov	r1, r5
    1e5e:	4630      	mov	r0, r6
    1e60:	f000 fe78 	bl	2b54 <_sbrk_r>
    1e64:	1c43      	adds	r3, r0, #1
    1e66:	d126      	bne.n	1eb6 <_malloc_r+0x96>
    1e68:	230c      	movs	r3, #12
    1e6a:	6033      	str	r3, [r6, #0]
    1e6c:	4630      	mov	r0, r6
    1e6e:	f001 f990 	bl	3192 <__malloc_unlock>
    1e72:	e7e4      	b.n	1e3e <_malloc_r+0x1e>
    1e74:	680b      	ldr	r3, [r1, #0]
    1e76:	1b5b      	subs	r3, r3, r5
    1e78:	d41a      	bmi.n	1eb0 <_malloc_r+0x90>
    1e7a:	2b0b      	cmp	r3, #11
    1e7c:	d90f      	bls.n	1e9e <_malloc_r+0x7e>
    1e7e:	600b      	str	r3, [r1, #0]
    1e80:	50cd      	str	r5, [r1, r3]
    1e82:	18cc      	adds	r4, r1, r3
    1e84:	4630      	mov	r0, r6
    1e86:	f001 f984 	bl	3192 <__malloc_unlock>
    1e8a:	f104 000b 	add.w	r0, r4, #11
    1e8e:	1d23      	adds	r3, r4, #4
    1e90:	f020 0007 	bic.w	r0, r0, #7
    1e94:	1ac3      	subs	r3, r0, r3
    1e96:	d01b      	beq.n	1ed0 <_malloc_r+0xb0>
    1e98:	425a      	negs	r2, r3
    1e9a:	50e2      	str	r2, [r4, r3]
    1e9c:	bd70      	pop	{r4, r5, r6, pc}
    1e9e:	428c      	cmp	r4, r1
    1ea0:	bf0d      	iteet	eq
    1ea2:	6863      	ldreq	r3, [r4, #4]
    1ea4:	684b      	ldrne	r3, [r1, #4]
    1ea6:	6063      	strne	r3, [r4, #4]
    1ea8:	6013      	streq	r3, [r2, #0]
    1eaa:	bf18      	it	ne
    1eac:	460c      	movne	r4, r1
    1eae:	e7e9      	b.n	1e84 <_malloc_r+0x64>
    1eb0:	460c      	mov	r4, r1
    1eb2:	6849      	ldr	r1, [r1, #4]
    1eb4:	e7ca      	b.n	1e4c <_malloc_r+0x2c>
    1eb6:	1cc4      	adds	r4, r0, #3
    1eb8:	f024 0403 	bic.w	r4, r4, #3
    1ebc:	42a0      	cmp	r0, r4
    1ebe:	d005      	beq.n	1ecc <_malloc_r+0xac>
    1ec0:	1a21      	subs	r1, r4, r0
    1ec2:	4630      	mov	r0, r6
    1ec4:	f000 fe46 	bl	2b54 <_sbrk_r>
    1ec8:	3001      	adds	r0, #1
    1eca:	d0cd      	beq.n	1e68 <_malloc_r+0x48>
    1ecc:	6025      	str	r5, [r4, #0]
    1ece:	e7d9      	b.n	1e84 <_malloc_r+0x64>
    1ed0:	bd70      	pop	{r4, r5, r6, pc}
    1ed2:	bf00      	nop
    1ed4:	20000234 	.word	0x20000234
    1ed8:	20000238 	.word	0x20000238

00001edc <__sfputc_r>:
    1edc:	6893      	ldr	r3, [r2, #8]
    1ede:	3b01      	subs	r3, #1
    1ee0:	2b00      	cmp	r3, #0
    1ee2:	b410      	push	{r4}
    1ee4:	6093      	str	r3, [r2, #8]
    1ee6:	da08      	bge.n	1efa <__sfputc_r+0x1e>
    1ee8:	6994      	ldr	r4, [r2, #24]
    1eea:	42a3      	cmp	r3, r4
    1eec:	db02      	blt.n	1ef4 <__sfputc_r+0x18>
    1eee:	b2cb      	uxtb	r3, r1
    1ef0:	2b0a      	cmp	r3, #10
    1ef2:	d102      	bne.n	1efa <__sfputc_r+0x1e>
    1ef4:	bc10      	pop	{r4}
    1ef6:	f7ff bc6f 	b.w	17d8 <__swbuf_r>
    1efa:	6813      	ldr	r3, [r2, #0]
    1efc:	1c58      	adds	r0, r3, #1
    1efe:	6010      	str	r0, [r2, #0]
    1f00:	7019      	strb	r1, [r3, #0]
    1f02:	b2c8      	uxtb	r0, r1
    1f04:	bc10      	pop	{r4}
    1f06:	4770      	bx	lr

00001f08 <__sfputs_r>:
    1f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f0a:	4606      	mov	r6, r0
    1f0c:	460f      	mov	r7, r1
    1f0e:	4614      	mov	r4, r2
    1f10:	18d5      	adds	r5, r2, r3
    1f12:	42ac      	cmp	r4, r5
    1f14:	d101      	bne.n	1f1a <__sfputs_r+0x12>
    1f16:	2000      	movs	r0, #0
    1f18:	e007      	b.n	1f2a <__sfputs_r+0x22>
    1f1a:	463a      	mov	r2, r7
    1f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
    1f20:	4630      	mov	r0, r6
    1f22:	f7ff ffdb 	bl	1edc <__sfputc_r>
    1f26:	1c43      	adds	r3, r0, #1
    1f28:	d1f3      	bne.n	1f12 <__sfputs_r+0xa>
    1f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001f2c <_vfiprintf_r>:
    1f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f30:	b09d      	sub	sp, #116	; 0x74
    1f32:	460c      	mov	r4, r1
    1f34:	4617      	mov	r7, r2
    1f36:	9303      	str	r3, [sp, #12]
    1f38:	4606      	mov	r6, r0
    1f3a:	b118      	cbz	r0, 1f44 <_vfiprintf_r+0x18>
    1f3c:	6983      	ldr	r3, [r0, #24]
    1f3e:	b90b      	cbnz	r3, 1f44 <_vfiprintf_r+0x18>
    1f40:	f7ff fe0e 	bl	1b60 <__sinit>
    1f44:	4b7c      	ldr	r3, [pc, #496]	; (2138 <_vfiprintf_r+0x20c>)
    1f46:	429c      	cmp	r4, r3
    1f48:	d157      	bne.n	1ffa <_vfiprintf_r+0xce>
    1f4a:	6874      	ldr	r4, [r6, #4]
    1f4c:	89a3      	ldrh	r3, [r4, #12]
    1f4e:	0718      	lsls	r0, r3, #28
    1f50:	d55d      	bpl.n	200e <_vfiprintf_r+0xe2>
    1f52:	6923      	ldr	r3, [r4, #16]
    1f54:	2b00      	cmp	r3, #0
    1f56:	d05a      	beq.n	200e <_vfiprintf_r+0xe2>
    1f58:	2300      	movs	r3, #0
    1f5a:	9309      	str	r3, [sp, #36]	; 0x24
    1f5c:	2320      	movs	r3, #32
    1f5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    1f62:	2330      	movs	r3, #48	; 0x30
    1f64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    1f68:	f04f 0b01 	mov.w	fp, #1
    1f6c:	46b8      	mov	r8, r7
    1f6e:	4645      	mov	r5, r8
    1f70:	f815 3b01 	ldrb.w	r3, [r5], #1
    1f74:	2b00      	cmp	r3, #0
    1f76:	d155      	bne.n	2024 <_vfiprintf_r+0xf8>
    1f78:	ebb8 0a07 	subs.w	sl, r8, r7
    1f7c:	d00b      	beq.n	1f96 <_vfiprintf_r+0x6a>
    1f7e:	4653      	mov	r3, sl
    1f80:	463a      	mov	r2, r7
    1f82:	4621      	mov	r1, r4
    1f84:	4630      	mov	r0, r6
    1f86:	f7ff ffbf 	bl	1f08 <__sfputs_r>
    1f8a:	3001      	adds	r0, #1
    1f8c:	f000 80c4 	beq.w	2118 <_vfiprintf_r+0x1ec>
    1f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1f92:	4453      	add	r3, sl
    1f94:	9309      	str	r3, [sp, #36]	; 0x24
    1f96:	f898 3000 	ldrb.w	r3, [r8]
    1f9a:	2b00      	cmp	r3, #0
    1f9c:	f000 80bc 	beq.w	2118 <_vfiprintf_r+0x1ec>
    1fa0:	2300      	movs	r3, #0
    1fa2:	f04f 32ff 	mov.w	r2, #4294967295
    1fa6:	9304      	str	r3, [sp, #16]
    1fa8:	9307      	str	r3, [sp, #28]
    1faa:	9205      	str	r2, [sp, #20]
    1fac:	9306      	str	r3, [sp, #24]
    1fae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    1fb2:	931a      	str	r3, [sp, #104]	; 0x68
    1fb4:	2205      	movs	r2, #5
    1fb6:	7829      	ldrb	r1, [r5, #0]
    1fb8:	4860      	ldr	r0, [pc, #384]	; (213c <_vfiprintf_r+0x210>)
    1fba:	f001 f899 	bl	30f0 <memchr>
    1fbe:	f105 0801 	add.w	r8, r5, #1
    1fc2:	9b04      	ldr	r3, [sp, #16]
    1fc4:	2800      	cmp	r0, #0
    1fc6:	d131      	bne.n	202c <_vfiprintf_r+0x100>
    1fc8:	06d9      	lsls	r1, r3, #27
    1fca:	bf44      	itt	mi
    1fcc:	2220      	movmi	r2, #32
    1fce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1fd2:	071a      	lsls	r2, r3, #28
    1fd4:	bf44      	itt	mi
    1fd6:	222b      	movmi	r2, #43	; 0x2b
    1fd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1fdc:	782a      	ldrb	r2, [r5, #0]
    1fde:	2a2a      	cmp	r2, #42	; 0x2a
    1fe0:	d02c      	beq.n	203c <_vfiprintf_r+0x110>
    1fe2:	9a07      	ldr	r2, [sp, #28]
    1fe4:	2100      	movs	r1, #0
    1fe6:	200a      	movs	r0, #10
    1fe8:	46a8      	mov	r8, r5
    1fea:	3501      	adds	r5, #1
    1fec:	f898 3000 	ldrb.w	r3, [r8]
    1ff0:	3b30      	subs	r3, #48	; 0x30
    1ff2:	2b09      	cmp	r3, #9
    1ff4:	d96d      	bls.n	20d2 <_vfiprintf_r+0x1a6>
    1ff6:	b371      	cbz	r1, 2056 <_vfiprintf_r+0x12a>
    1ff8:	e026      	b.n	2048 <_vfiprintf_r+0x11c>
    1ffa:	4b51      	ldr	r3, [pc, #324]	; (2140 <_vfiprintf_r+0x214>)
    1ffc:	429c      	cmp	r4, r3
    1ffe:	d101      	bne.n	2004 <_vfiprintf_r+0xd8>
    2000:	68b4      	ldr	r4, [r6, #8]
    2002:	e7a3      	b.n	1f4c <_vfiprintf_r+0x20>
    2004:	4b4f      	ldr	r3, [pc, #316]	; (2144 <_vfiprintf_r+0x218>)
    2006:	429c      	cmp	r4, r3
    2008:	bf08      	it	eq
    200a:	68f4      	ldreq	r4, [r6, #12]
    200c:	e79e      	b.n	1f4c <_vfiprintf_r+0x20>
    200e:	4621      	mov	r1, r4
    2010:	4630      	mov	r0, r6
    2012:	f7ff fc33 	bl	187c <__swsetup_r>
    2016:	2800      	cmp	r0, #0
    2018:	d09e      	beq.n	1f58 <_vfiprintf_r+0x2c>
    201a:	f04f 30ff 	mov.w	r0, #4294967295
    201e:	b01d      	add	sp, #116	; 0x74
    2020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2024:	2b25      	cmp	r3, #37	; 0x25
    2026:	d0a7      	beq.n	1f78 <_vfiprintf_r+0x4c>
    2028:	46a8      	mov	r8, r5
    202a:	e7a0      	b.n	1f6e <_vfiprintf_r+0x42>
    202c:	4a43      	ldr	r2, [pc, #268]	; (213c <_vfiprintf_r+0x210>)
    202e:	1a80      	subs	r0, r0, r2
    2030:	fa0b f000 	lsl.w	r0, fp, r0
    2034:	4318      	orrs	r0, r3
    2036:	9004      	str	r0, [sp, #16]
    2038:	4645      	mov	r5, r8
    203a:	e7bb      	b.n	1fb4 <_vfiprintf_r+0x88>
    203c:	9a03      	ldr	r2, [sp, #12]
    203e:	1d11      	adds	r1, r2, #4
    2040:	6812      	ldr	r2, [r2, #0]
    2042:	9103      	str	r1, [sp, #12]
    2044:	2a00      	cmp	r2, #0
    2046:	db01      	blt.n	204c <_vfiprintf_r+0x120>
    2048:	9207      	str	r2, [sp, #28]
    204a:	e004      	b.n	2056 <_vfiprintf_r+0x12a>
    204c:	4252      	negs	r2, r2
    204e:	f043 0302 	orr.w	r3, r3, #2
    2052:	9207      	str	r2, [sp, #28]
    2054:	9304      	str	r3, [sp, #16]
    2056:	f898 3000 	ldrb.w	r3, [r8]
    205a:	2b2e      	cmp	r3, #46	; 0x2e
    205c:	d110      	bne.n	2080 <_vfiprintf_r+0x154>
    205e:	f898 3001 	ldrb.w	r3, [r8, #1]
    2062:	2b2a      	cmp	r3, #42	; 0x2a
    2064:	f108 0101 	add.w	r1, r8, #1
    2068:	d137      	bne.n	20da <_vfiprintf_r+0x1ae>
    206a:	9b03      	ldr	r3, [sp, #12]
    206c:	1d1a      	adds	r2, r3, #4
    206e:	681b      	ldr	r3, [r3, #0]
    2070:	9203      	str	r2, [sp, #12]
    2072:	2b00      	cmp	r3, #0
    2074:	bfb8      	it	lt
    2076:	f04f 33ff 	movlt.w	r3, #4294967295
    207a:	f108 0802 	add.w	r8, r8, #2
    207e:	9305      	str	r3, [sp, #20]
    2080:	4d31      	ldr	r5, [pc, #196]	; (2148 <_vfiprintf_r+0x21c>)
    2082:	f898 1000 	ldrb.w	r1, [r8]
    2086:	2203      	movs	r2, #3
    2088:	4628      	mov	r0, r5
    208a:	f001 f831 	bl	30f0 <memchr>
    208e:	b140      	cbz	r0, 20a2 <_vfiprintf_r+0x176>
    2090:	2340      	movs	r3, #64	; 0x40
    2092:	1b40      	subs	r0, r0, r5
    2094:	fa03 f000 	lsl.w	r0, r3, r0
    2098:	9b04      	ldr	r3, [sp, #16]
    209a:	4303      	orrs	r3, r0
    209c:	9304      	str	r3, [sp, #16]
    209e:	f108 0801 	add.w	r8, r8, #1
    20a2:	f898 1000 	ldrb.w	r1, [r8]
    20a6:	4829      	ldr	r0, [pc, #164]	; (214c <_vfiprintf_r+0x220>)
    20a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    20ac:	2206      	movs	r2, #6
    20ae:	f108 0701 	add.w	r7, r8, #1
    20b2:	f001 f81d 	bl	30f0 <memchr>
    20b6:	2800      	cmp	r0, #0
    20b8:	d034      	beq.n	2124 <_vfiprintf_r+0x1f8>
    20ba:	4b25      	ldr	r3, [pc, #148]	; (2150 <_vfiprintf_r+0x224>)
    20bc:	bb03      	cbnz	r3, 2100 <_vfiprintf_r+0x1d4>
    20be:	9b03      	ldr	r3, [sp, #12]
    20c0:	3307      	adds	r3, #7
    20c2:	f023 0307 	bic.w	r3, r3, #7
    20c6:	3308      	adds	r3, #8
    20c8:	9303      	str	r3, [sp, #12]
    20ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    20cc:	444b      	add	r3, r9
    20ce:	9309      	str	r3, [sp, #36]	; 0x24
    20d0:	e74c      	b.n	1f6c <_vfiprintf_r+0x40>
    20d2:	fb00 3202 	mla	r2, r0, r2, r3
    20d6:	2101      	movs	r1, #1
    20d8:	e786      	b.n	1fe8 <_vfiprintf_r+0xbc>
    20da:	2300      	movs	r3, #0
    20dc:	9305      	str	r3, [sp, #20]
    20de:	4618      	mov	r0, r3
    20e0:	250a      	movs	r5, #10
    20e2:	4688      	mov	r8, r1
    20e4:	3101      	adds	r1, #1
    20e6:	f898 2000 	ldrb.w	r2, [r8]
    20ea:	3a30      	subs	r2, #48	; 0x30
    20ec:	2a09      	cmp	r2, #9
    20ee:	d903      	bls.n	20f8 <_vfiprintf_r+0x1cc>
    20f0:	2b00      	cmp	r3, #0
    20f2:	d0c5      	beq.n	2080 <_vfiprintf_r+0x154>
    20f4:	9005      	str	r0, [sp, #20]
    20f6:	e7c3      	b.n	2080 <_vfiprintf_r+0x154>
    20f8:	fb05 2000 	mla	r0, r5, r0, r2
    20fc:	2301      	movs	r3, #1
    20fe:	e7f0      	b.n	20e2 <_vfiprintf_r+0x1b6>
    2100:	ab03      	add	r3, sp, #12
    2102:	9300      	str	r3, [sp, #0]
    2104:	4622      	mov	r2, r4
    2106:	4b13      	ldr	r3, [pc, #76]	; (2154 <_vfiprintf_r+0x228>)
    2108:	a904      	add	r1, sp, #16
    210a:	4630      	mov	r0, r6
    210c:	f3af 8000 	nop.w
    2110:	f1b0 3fff 	cmp.w	r0, #4294967295
    2114:	4681      	mov	r9, r0
    2116:	d1d8      	bne.n	20ca <_vfiprintf_r+0x19e>
    2118:	89a3      	ldrh	r3, [r4, #12]
    211a:	065b      	lsls	r3, r3, #25
    211c:	f53f af7d 	bmi.w	201a <_vfiprintf_r+0xee>
    2120:	9809      	ldr	r0, [sp, #36]	; 0x24
    2122:	e77c      	b.n	201e <_vfiprintf_r+0xf2>
    2124:	ab03      	add	r3, sp, #12
    2126:	9300      	str	r3, [sp, #0]
    2128:	4622      	mov	r2, r4
    212a:	4b0a      	ldr	r3, [pc, #40]	; (2154 <_vfiprintf_r+0x228>)
    212c:	a904      	add	r1, sp, #16
    212e:	4630      	mov	r0, r6
    2130:	f000 f888 	bl	2244 <_printf_i>
    2134:	e7ec      	b.n	2110 <_vfiprintf_r+0x1e4>
    2136:	bf00      	nop
    2138:	000038e8 	.word	0x000038e8
    213c:	00003928 	.word	0x00003928
    2140:	00003908 	.word	0x00003908
    2144:	000038c8 	.word	0x000038c8
    2148:	0000392e 	.word	0x0000392e
    214c:	00003932 	.word	0x00003932
    2150:	00000000 	.word	0x00000000
    2154:	00001f09 	.word	0x00001f09

00002158 <_printf_common>:
    2158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    215c:	4691      	mov	r9, r2
    215e:	461f      	mov	r7, r3
    2160:	688a      	ldr	r2, [r1, #8]
    2162:	690b      	ldr	r3, [r1, #16]
    2164:	f8dd 8020 	ldr.w	r8, [sp, #32]
    2168:	4293      	cmp	r3, r2
    216a:	bfb8      	it	lt
    216c:	4613      	movlt	r3, r2
    216e:	f8c9 3000 	str.w	r3, [r9]
    2172:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    2176:	4606      	mov	r6, r0
    2178:	460c      	mov	r4, r1
    217a:	b112      	cbz	r2, 2182 <_printf_common+0x2a>
    217c:	3301      	adds	r3, #1
    217e:	f8c9 3000 	str.w	r3, [r9]
    2182:	6823      	ldr	r3, [r4, #0]
    2184:	0699      	lsls	r1, r3, #26
    2186:	bf42      	ittt	mi
    2188:	f8d9 3000 	ldrmi.w	r3, [r9]
    218c:	3302      	addmi	r3, #2
    218e:	f8c9 3000 	strmi.w	r3, [r9]
    2192:	6825      	ldr	r5, [r4, #0]
    2194:	f015 0506 	ands.w	r5, r5, #6
    2198:	d107      	bne.n	21aa <_printf_common+0x52>
    219a:	f104 0a19 	add.w	sl, r4, #25
    219e:	68e3      	ldr	r3, [r4, #12]
    21a0:	f8d9 2000 	ldr.w	r2, [r9]
    21a4:	1a9b      	subs	r3, r3, r2
    21a6:	429d      	cmp	r5, r3
    21a8:	db29      	blt.n	21fe <_printf_common+0xa6>
    21aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    21ae:	6822      	ldr	r2, [r4, #0]
    21b0:	3300      	adds	r3, #0
    21b2:	bf18      	it	ne
    21b4:	2301      	movne	r3, #1
    21b6:	0692      	lsls	r2, r2, #26
    21b8:	d42e      	bmi.n	2218 <_printf_common+0xc0>
    21ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
    21be:	4639      	mov	r1, r7
    21c0:	4630      	mov	r0, r6
    21c2:	47c0      	blx	r8
    21c4:	3001      	adds	r0, #1
    21c6:	d021      	beq.n	220c <_printf_common+0xb4>
    21c8:	6823      	ldr	r3, [r4, #0]
    21ca:	68e5      	ldr	r5, [r4, #12]
    21cc:	f8d9 2000 	ldr.w	r2, [r9]
    21d0:	f003 0306 	and.w	r3, r3, #6
    21d4:	2b04      	cmp	r3, #4
    21d6:	bf08      	it	eq
    21d8:	1aad      	subeq	r5, r5, r2
    21da:	68a3      	ldr	r3, [r4, #8]
    21dc:	6922      	ldr	r2, [r4, #16]
    21de:	bf0c      	ite	eq
    21e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    21e4:	2500      	movne	r5, #0
    21e6:	4293      	cmp	r3, r2
    21e8:	bfc4      	itt	gt
    21ea:	1a9b      	subgt	r3, r3, r2
    21ec:	18ed      	addgt	r5, r5, r3
    21ee:	f04f 0900 	mov.w	r9, #0
    21f2:	341a      	adds	r4, #26
    21f4:	454d      	cmp	r5, r9
    21f6:	d11b      	bne.n	2230 <_printf_common+0xd8>
    21f8:	2000      	movs	r0, #0
    21fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    21fe:	2301      	movs	r3, #1
    2200:	4652      	mov	r2, sl
    2202:	4639      	mov	r1, r7
    2204:	4630      	mov	r0, r6
    2206:	47c0      	blx	r8
    2208:	3001      	adds	r0, #1
    220a:	d103      	bne.n	2214 <_printf_common+0xbc>
    220c:	f04f 30ff 	mov.w	r0, #4294967295
    2210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2214:	3501      	adds	r5, #1
    2216:	e7c2      	b.n	219e <_printf_common+0x46>
    2218:	18e1      	adds	r1, r4, r3
    221a:	1c5a      	adds	r2, r3, #1
    221c:	2030      	movs	r0, #48	; 0x30
    221e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    2222:	4422      	add	r2, r4
    2224:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    2228:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    222c:	3302      	adds	r3, #2
    222e:	e7c4      	b.n	21ba <_printf_common+0x62>
    2230:	2301      	movs	r3, #1
    2232:	4622      	mov	r2, r4
    2234:	4639      	mov	r1, r7
    2236:	4630      	mov	r0, r6
    2238:	47c0      	blx	r8
    223a:	3001      	adds	r0, #1
    223c:	d0e6      	beq.n	220c <_printf_common+0xb4>
    223e:	f109 0901 	add.w	r9, r9, #1
    2242:	e7d7      	b.n	21f4 <_printf_common+0x9c>

00002244 <_printf_i>:
    2244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2248:	4617      	mov	r7, r2
    224a:	7e0a      	ldrb	r2, [r1, #24]
    224c:	b085      	sub	sp, #20
    224e:	2a6e      	cmp	r2, #110	; 0x6e
    2250:	4698      	mov	r8, r3
    2252:	4606      	mov	r6, r0
    2254:	460c      	mov	r4, r1
    2256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2258:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    225c:	f000 80bc 	beq.w	23d8 <_printf_i+0x194>
    2260:	d81a      	bhi.n	2298 <_printf_i+0x54>
    2262:	2a63      	cmp	r2, #99	; 0x63
    2264:	d02e      	beq.n	22c4 <_printf_i+0x80>
    2266:	d80a      	bhi.n	227e <_printf_i+0x3a>
    2268:	2a00      	cmp	r2, #0
    226a:	f000 80c8 	beq.w	23fe <_printf_i+0x1ba>
    226e:	2a58      	cmp	r2, #88	; 0x58
    2270:	f000 808a 	beq.w	2388 <_printf_i+0x144>
    2274:	f104 0542 	add.w	r5, r4, #66	; 0x42
    2278:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    227c:	e02a      	b.n	22d4 <_printf_i+0x90>
    227e:	2a64      	cmp	r2, #100	; 0x64
    2280:	d001      	beq.n	2286 <_printf_i+0x42>
    2282:	2a69      	cmp	r2, #105	; 0x69
    2284:	d1f6      	bne.n	2274 <_printf_i+0x30>
    2286:	6821      	ldr	r1, [r4, #0]
    2288:	681a      	ldr	r2, [r3, #0]
    228a:	f011 0f80 	tst.w	r1, #128	; 0x80
    228e:	d023      	beq.n	22d8 <_printf_i+0x94>
    2290:	1d11      	adds	r1, r2, #4
    2292:	6019      	str	r1, [r3, #0]
    2294:	6813      	ldr	r3, [r2, #0]
    2296:	e027      	b.n	22e8 <_printf_i+0xa4>
    2298:	2a73      	cmp	r2, #115	; 0x73
    229a:	f000 80b4 	beq.w	2406 <_printf_i+0x1c2>
    229e:	d808      	bhi.n	22b2 <_printf_i+0x6e>
    22a0:	2a6f      	cmp	r2, #111	; 0x6f
    22a2:	d02a      	beq.n	22fa <_printf_i+0xb6>
    22a4:	2a70      	cmp	r2, #112	; 0x70
    22a6:	d1e5      	bne.n	2274 <_printf_i+0x30>
    22a8:	680a      	ldr	r2, [r1, #0]
    22aa:	f042 0220 	orr.w	r2, r2, #32
    22ae:	600a      	str	r2, [r1, #0]
    22b0:	e003      	b.n	22ba <_printf_i+0x76>
    22b2:	2a75      	cmp	r2, #117	; 0x75
    22b4:	d021      	beq.n	22fa <_printf_i+0xb6>
    22b6:	2a78      	cmp	r2, #120	; 0x78
    22b8:	d1dc      	bne.n	2274 <_printf_i+0x30>
    22ba:	2278      	movs	r2, #120	; 0x78
    22bc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    22c0:	496e      	ldr	r1, [pc, #440]	; (247c <_printf_i+0x238>)
    22c2:	e064      	b.n	238e <_printf_i+0x14a>
    22c4:	681a      	ldr	r2, [r3, #0]
    22c6:	f101 0542 	add.w	r5, r1, #66	; 0x42
    22ca:	1d11      	adds	r1, r2, #4
    22cc:	6019      	str	r1, [r3, #0]
    22ce:	6813      	ldr	r3, [r2, #0]
    22d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    22d4:	2301      	movs	r3, #1
    22d6:	e0a3      	b.n	2420 <_printf_i+0x1dc>
    22d8:	f011 0f40 	tst.w	r1, #64	; 0x40
    22dc:	f102 0104 	add.w	r1, r2, #4
    22e0:	6019      	str	r1, [r3, #0]
    22e2:	d0d7      	beq.n	2294 <_printf_i+0x50>
    22e4:	f9b2 3000 	ldrsh.w	r3, [r2]
    22e8:	2b00      	cmp	r3, #0
    22ea:	da03      	bge.n	22f4 <_printf_i+0xb0>
    22ec:	222d      	movs	r2, #45	; 0x2d
    22ee:	425b      	negs	r3, r3
    22f0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    22f4:	4962      	ldr	r1, [pc, #392]	; (2480 <_printf_i+0x23c>)
    22f6:	220a      	movs	r2, #10
    22f8:	e017      	b.n	232a <_printf_i+0xe6>
    22fa:	6820      	ldr	r0, [r4, #0]
    22fc:	6819      	ldr	r1, [r3, #0]
    22fe:	f010 0f80 	tst.w	r0, #128	; 0x80
    2302:	d003      	beq.n	230c <_printf_i+0xc8>
    2304:	1d08      	adds	r0, r1, #4
    2306:	6018      	str	r0, [r3, #0]
    2308:	680b      	ldr	r3, [r1, #0]
    230a:	e006      	b.n	231a <_printf_i+0xd6>
    230c:	f010 0f40 	tst.w	r0, #64	; 0x40
    2310:	f101 0004 	add.w	r0, r1, #4
    2314:	6018      	str	r0, [r3, #0]
    2316:	d0f7      	beq.n	2308 <_printf_i+0xc4>
    2318:	880b      	ldrh	r3, [r1, #0]
    231a:	4959      	ldr	r1, [pc, #356]	; (2480 <_printf_i+0x23c>)
    231c:	2a6f      	cmp	r2, #111	; 0x6f
    231e:	bf14      	ite	ne
    2320:	220a      	movne	r2, #10
    2322:	2208      	moveq	r2, #8
    2324:	2000      	movs	r0, #0
    2326:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    232a:	6865      	ldr	r5, [r4, #4]
    232c:	60a5      	str	r5, [r4, #8]
    232e:	2d00      	cmp	r5, #0
    2330:	f2c0 809c 	blt.w	246c <_printf_i+0x228>
    2334:	6820      	ldr	r0, [r4, #0]
    2336:	f020 0004 	bic.w	r0, r0, #4
    233a:	6020      	str	r0, [r4, #0]
    233c:	2b00      	cmp	r3, #0
    233e:	d13f      	bne.n	23c0 <_printf_i+0x17c>
    2340:	2d00      	cmp	r5, #0
    2342:	f040 8095 	bne.w	2470 <_printf_i+0x22c>
    2346:	4675      	mov	r5, lr
    2348:	2a08      	cmp	r2, #8
    234a:	d10b      	bne.n	2364 <_printf_i+0x120>
    234c:	6823      	ldr	r3, [r4, #0]
    234e:	07da      	lsls	r2, r3, #31
    2350:	d508      	bpl.n	2364 <_printf_i+0x120>
    2352:	6923      	ldr	r3, [r4, #16]
    2354:	6862      	ldr	r2, [r4, #4]
    2356:	429a      	cmp	r2, r3
    2358:	bfde      	ittt	le
    235a:	2330      	movle	r3, #48	; 0x30
    235c:	f805 3c01 	strble.w	r3, [r5, #-1]
    2360:	f105 35ff 	addle.w	r5, r5, #4294967295
    2364:	ebae 0305 	sub.w	r3, lr, r5
    2368:	6123      	str	r3, [r4, #16]
    236a:	f8cd 8000 	str.w	r8, [sp]
    236e:	463b      	mov	r3, r7
    2370:	aa03      	add	r2, sp, #12
    2372:	4621      	mov	r1, r4
    2374:	4630      	mov	r0, r6
    2376:	f7ff feef 	bl	2158 <_printf_common>
    237a:	3001      	adds	r0, #1
    237c:	d155      	bne.n	242a <_printf_i+0x1e6>
    237e:	f04f 30ff 	mov.w	r0, #4294967295
    2382:	b005      	add	sp, #20
    2384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2388:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    238c:	493c      	ldr	r1, [pc, #240]	; (2480 <_printf_i+0x23c>)
    238e:	6822      	ldr	r2, [r4, #0]
    2390:	6818      	ldr	r0, [r3, #0]
    2392:	f012 0f80 	tst.w	r2, #128	; 0x80
    2396:	f100 0504 	add.w	r5, r0, #4
    239a:	601d      	str	r5, [r3, #0]
    239c:	d001      	beq.n	23a2 <_printf_i+0x15e>
    239e:	6803      	ldr	r3, [r0, #0]
    23a0:	e002      	b.n	23a8 <_printf_i+0x164>
    23a2:	0655      	lsls	r5, r2, #25
    23a4:	d5fb      	bpl.n	239e <_printf_i+0x15a>
    23a6:	8803      	ldrh	r3, [r0, #0]
    23a8:	07d0      	lsls	r0, r2, #31
    23aa:	bf44      	itt	mi
    23ac:	f042 0220 	orrmi.w	r2, r2, #32
    23b0:	6022      	strmi	r2, [r4, #0]
    23b2:	b91b      	cbnz	r3, 23bc <_printf_i+0x178>
    23b4:	6822      	ldr	r2, [r4, #0]
    23b6:	f022 0220 	bic.w	r2, r2, #32
    23ba:	6022      	str	r2, [r4, #0]
    23bc:	2210      	movs	r2, #16
    23be:	e7b1      	b.n	2324 <_printf_i+0xe0>
    23c0:	4675      	mov	r5, lr
    23c2:	fbb3 f0f2 	udiv	r0, r3, r2
    23c6:	fb02 3310 	mls	r3, r2, r0, r3
    23ca:	5ccb      	ldrb	r3, [r1, r3]
    23cc:	f805 3d01 	strb.w	r3, [r5, #-1]!
    23d0:	4603      	mov	r3, r0
    23d2:	2800      	cmp	r0, #0
    23d4:	d1f5      	bne.n	23c2 <_printf_i+0x17e>
    23d6:	e7b7      	b.n	2348 <_printf_i+0x104>
    23d8:	6808      	ldr	r0, [r1, #0]
    23da:	681a      	ldr	r2, [r3, #0]
    23dc:	6949      	ldr	r1, [r1, #20]
    23de:	f010 0f80 	tst.w	r0, #128	; 0x80
    23e2:	d004      	beq.n	23ee <_printf_i+0x1aa>
    23e4:	1d10      	adds	r0, r2, #4
    23e6:	6018      	str	r0, [r3, #0]
    23e8:	6813      	ldr	r3, [r2, #0]
    23ea:	6019      	str	r1, [r3, #0]
    23ec:	e007      	b.n	23fe <_printf_i+0x1ba>
    23ee:	f010 0f40 	tst.w	r0, #64	; 0x40
    23f2:	f102 0004 	add.w	r0, r2, #4
    23f6:	6018      	str	r0, [r3, #0]
    23f8:	6813      	ldr	r3, [r2, #0]
    23fa:	d0f6      	beq.n	23ea <_printf_i+0x1a6>
    23fc:	8019      	strh	r1, [r3, #0]
    23fe:	2300      	movs	r3, #0
    2400:	6123      	str	r3, [r4, #16]
    2402:	4675      	mov	r5, lr
    2404:	e7b1      	b.n	236a <_printf_i+0x126>
    2406:	681a      	ldr	r2, [r3, #0]
    2408:	1d11      	adds	r1, r2, #4
    240a:	6019      	str	r1, [r3, #0]
    240c:	6815      	ldr	r5, [r2, #0]
    240e:	6862      	ldr	r2, [r4, #4]
    2410:	2100      	movs	r1, #0
    2412:	4628      	mov	r0, r5
    2414:	f000 fe6c 	bl	30f0 <memchr>
    2418:	b108      	cbz	r0, 241e <_printf_i+0x1da>
    241a:	1b40      	subs	r0, r0, r5
    241c:	6060      	str	r0, [r4, #4]
    241e:	6863      	ldr	r3, [r4, #4]
    2420:	6123      	str	r3, [r4, #16]
    2422:	2300      	movs	r3, #0
    2424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    2428:	e79f      	b.n	236a <_printf_i+0x126>
    242a:	6923      	ldr	r3, [r4, #16]
    242c:	462a      	mov	r2, r5
    242e:	4639      	mov	r1, r7
    2430:	4630      	mov	r0, r6
    2432:	47c0      	blx	r8
    2434:	3001      	adds	r0, #1
    2436:	d0a2      	beq.n	237e <_printf_i+0x13a>
    2438:	6823      	ldr	r3, [r4, #0]
    243a:	079b      	lsls	r3, r3, #30
    243c:	d507      	bpl.n	244e <_printf_i+0x20a>
    243e:	2500      	movs	r5, #0
    2440:	f104 0919 	add.w	r9, r4, #25
    2444:	68e3      	ldr	r3, [r4, #12]
    2446:	9a03      	ldr	r2, [sp, #12]
    2448:	1a9b      	subs	r3, r3, r2
    244a:	429d      	cmp	r5, r3
    244c:	db05      	blt.n	245a <_printf_i+0x216>
    244e:	68e0      	ldr	r0, [r4, #12]
    2450:	9b03      	ldr	r3, [sp, #12]
    2452:	4298      	cmp	r0, r3
    2454:	bfb8      	it	lt
    2456:	4618      	movlt	r0, r3
    2458:	e793      	b.n	2382 <_printf_i+0x13e>
    245a:	2301      	movs	r3, #1
    245c:	464a      	mov	r2, r9
    245e:	4639      	mov	r1, r7
    2460:	4630      	mov	r0, r6
    2462:	47c0      	blx	r8
    2464:	3001      	adds	r0, #1
    2466:	d08a      	beq.n	237e <_printf_i+0x13a>
    2468:	3501      	adds	r5, #1
    246a:	e7eb      	b.n	2444 <_printf_i+0x200>
    246c:	2b00      	cmp	r3, #0
    246e:	d1a7      	bne.n	23c0 <_printf_i+0x17c>
    2470:	780b      	ldrb	r3, [r1, #0]
    2472:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    2476:	f104 0542 	add.w	r5, r4, #66	; 0x42
    247a:	e765      	b.n	2348 <_printf_i+0x104>
    247c:	0000394a 	.word	0x0000394a
    2480:	00003939 	.word	0x00003939

00002484 <__svfiscanf_r>:
    2484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2488:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    248c:	f10d 080c 	add.w	r8, sp, #12
    2490:	9301      	str	r3, [sp, #4]
    2492:	2300      	movs	r3, #0
    2494:	9346      	str	r3, [sp, #280]	; 0x118
    2496:	9347      	str	r3, [sp, #284]	; 0x11c
    2498:	4ba0      	ldr	r3, [pc, #640]	; (271c <__svfiscanf_r+0x298>)
    249a:	93a2      	str	r3, [sp, #648]	; 0x288
    249c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 2724 <__svfiscanf_r+0x2a0>
    24a0:	4b9f      	ldr	r3, [pc, #636]	; (2720 <__svfiscanf_r+0x29c>)
    24a2:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
    24a6:	4606      	mov	r6, r0
    24a8:	460c      	mov	r4, r1
    24aa:	93a3      	str	r3, [sp, #652]	; 0x28c
    24ac:	4692      	mov	sl, r2
    24ae:	270a      	movs	r7, #10
    24b0:	f89a 3000 	ldrb.w	r3, [sl]
    24b4:	2b00      	cmp	r3, #0
    24b6:	f000 812f 	beq.w	2718 <__svfiscanf_r+0x294>
    24ba:	f000 fde7 	bl	308c <__locale_ctype_ptr>
    24be:	f89a b000 	ldrb.w	fp, [sl]
    24c2:	4458      	add	r0, fp
    24c4:	7843      	ldrb	r3, [r0, #1]
    24c6:	f013 0308 	ands.w	r3, r3, #8
    24ca:	d143      	bne.n	2554 <__svfiscanf_r+0xd0>
    24cc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    24d0:	f10a 0501 	add.w	r5, sl, #1
    24d4:	f040 8099 	bne.w	260a <__svfiscanf_r+0x186>
    24d8:	9345      	str	r3, [sp, #276]	; 0x114
    24da:	9343      	str	r3, [sp, #268]	; 0x10c
    24dc:	f89a 3001 	ldrb.w	r3, [sl, #1]
    24e0:	2b2a      	cmp	r3, #42	; 0x2a
    24e2:	d103      	bne.n	24ec <__svfiscanf_r+0x68>
    24e4:	2310      	movs	r3, #16
    24e6:	9343      	str	r3, [sp, #268]	; 0x10c
    24e8:	f10a 0502 	add.w	r5, sl, #2
    24ec:	7829      	ldrb	r1, [r5, #0]
    24ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    24f2:	2a09      	cmp	r2, #9
    24f4:	46aa      	mov	sl, r5
    24f6:	f105 0501 	add.w	r5, r5, #1
    24fa:	d941      	bls.n	2580 <__svfiscanf_r+0xfc>
    24fc:	2203      	movs	r2, #3
    24fe:	4889      	ldr	r0, [pc, #548]	; (2724 <__svfiscanf_r+0x2a0>)
    2500:	f000 fdf6 	bl	30f0 <memchr>
    2504:	b138      	cbz	r0, 2516 <__svfiscanf_r+0x92>
    2506:	eba0 0309 	sub.w	r3, r0, r9
    250a:	2001      	movs	r0, #1
    250c:	4098      	lsls	r0, r3
    250e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    2510:	4318      	orrs	r0, r3
    2512:	9043      	str	r0, [sp, #268]	; 0x10c
    2514:	46aa      	mov	sl, r5
    2516:	f89a 3000 	ldrb.w	r3, [sl]
    251a:	2b67      	cmp	r3, #103	; 0x67
    251c:	f10a 0501 	add.w	r5, sl, #1
    2520:	d84a      	bhi.n	25b8 <__svfiscanf_r+0x134>
    2522:	2b65      	cmp	r3, #101	; 0x65
    2524:	f080 80b7 	bcs.w	2696 <__svfiscanf_r+0x212>
    2528:	2b47      	cmp	r3, #71	; 0x47
    252a:	d82f      	bhi.n	258c <__svfiscanf_r+0x108>
    252c:	2b45      	cmp	r3, #69	; 0x45
    252e:	f080 80b2 	bcs.w	2696 <__svfiscanf_r+0x212>
    2532:	2b00      	cmp	r3, #0
    2534:	f000 8082 	beq.w	263c <__svfiscanf_r+0x1b8>
    2538:	2b25      	cmp	r3, #37	; 0x25
    253a:	d066      	beq.n	260a <__svfiscanf_r+0x186>
    253c:	2303      	movs	r3, #3
    253e:	9349      	str	r3, [sp, #292]	; 0x124
    2540:	9744      	str	r7, [sp, #272]	; 0x110
    2542:	e045      	b.n	25d0 <__svfiscanf_r+0x14c>
    2544:	9947      	ldr	r1, [sp, #284]	; 0x11c
    2546:	3101      	adds	r1, #1
    2548:	9147      	str	r1, [sp, #284]	; 0x11c
    254a:	6861      	ldr	r1, [r4, #4]
    254c:	3301      	adds	r3, #1
    254e:	3901      	subs	r1, #1
    2550:	6061      	str	r1, [r4, #4]
    2552:	6023      	str	r3, [r4, #0]
    2554:	6863      	ldr	r3, [r4, #4]
    2556:	2b00      	cmp	r3, #0
    2558:	dd0b      	ble.n	2572 <__svfiscanf_r+0xee>
    255a:	f000 fd97 	bl	308c <__locale_ctype_ptr>
    255e:	6823      	ldr	r3, [r4, #0]
    2560:	7819      	ldrb	r1, [r3, #0]
    2562:	4408      	add	r0, r1
    2564:	7841      	ldrb	r1, [r0, #1]
    2566:	070d      	lsls	r5, r1, #28
    2568:	d4ec      	bmi.n	2544 <__svfiscanf_r+0xc0>
    256a:	f10a 0501 	add.w	r5, sl, #1
    256e:	46aa      	mov	sl, r5
    2570:	e79e      	b.n	24b0 <__svfiscanf_r+0x2c>
    2572:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    2574:	4621      	mov	r1, r4
    2576:	4630      	mov	r0, r6
    2578:	4798      	blx	r3
    257a:	2800      	cmp	r0, #0
    257c:	d0ed      	beq.n	255a <__svfiscanf_r+0xd6>
    257e:	e7f4      	b.n	256a <__svfiscanf_r+0xe6>
    2580:	9b45      	ldr	r3, [sp, #276]	; 0x114
    2582:	fb07 1303 	mla	r3, r7, r3, r1
    2586:	3b30      	subs	r3, #48	; 0x30
    2588:	9345      	str	r3, [sp, #276]	; 0x114
    258a:	e7af      	b.n	24ec <__svfiscanf_r+0x68>
    258c:	2b5b      	cmp	r3, #91	; 0x5b
    258e:	d061      	beq.n	2654 <__svfiscanf_r+0x1d0>
    2590:	d80c      	bhi.n	25ac <__svfiscanf_r+0x128>
    2592:	2b58      	cmp	r3, #88	; 0x58
    2594:	d1d2      	bne.n	253c <__svfiscanf_r+0xb8>
    2596:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    2598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    259c:	9243      	str	r2, [sp, #268]	; 0x10c
    259e:	2210      	movs	r2, #16
    25a0:	9244      	str	r2, [sp, #272]	; 0x110
    25a2:	2b6f      	cmp	r3, #111	; 0x6f
    25a4:	bfb4      	ite	lt
    25a6:	2303      	movlt	r3, #3
    25a8:	2304      	movge	r3, #4
    25aa:	e010      	b.n	25ce <__svfiscanf_r+0x14a>
    25ac:	2b63      	cmp	r3, #99	; 0x63
    25ae:	d05c      	beq.n	266a <__svfiscanf_r+0x1e6>
    25b0:	2b64      	cmp	r3, #100	; 0x64
    25b2:	d1c3      	bne.n	253c <__svfiscanf_r+0xb8>
    25b4:	9744      	str	r7, [sp, #272]	; 0x110
    25b6:	e7f4      	b.n	25a2 <__svfiscanf_r+0x11e>
    25b8:	2b70      	cmp	r3, #112	; 0x70
    25ba:	d042      	beq.n	2642 <__svfiscanf_r+0x1be>
    25bc:	d81d      	bhi.n	25fa <__svfiscanf_r+0x176>
    25be:	2b6e      	cmp	r3, #110	; 0x6e
    25c0:	d059      	beq.n	2676 <__svfiscanf_r+0x1f2>
    25c2:	d843      	bhi.n	264c <__svfiscanf_r+0x1c8>
    25c4:	2b69      	cmp	r3, #105	; 0x69
    25c6:	d1b9      	bne.n	253c <__svfiscanf_r+0xb8>
    25c8:	2300      	movs	r3, #0
    25ca:	9344      	str	r3, [sp, #272]	; 0x110
    25cc:	2303      	movs	r3, #3
    25ce:	9349      	str	r3, [sp, #292]	; 0x124
    25d0:	6863      	ldr	r3, [r4, #4]
    25d2:	2b00      	cmp	r3, #0
    25d4:	dd61      	ble.n	269a <__svfiscanf_r+0x216>
    25d6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    25d8:	0659      	lsls	r1, r3, #25
    25da:	d56f      	bpl.n	26bc <__svfiscanf_r+0x238>
    25dc:	9b49      	ldr	r3, [sp, #292]	; 0x124
    25de:	2b02      	cmp	r3, #2
    25e0:	dc7c      	bgt.n	26dc <__svfiscanf_r+0x258>
    25e2:	ab01      	add	r3, sp, #4
    25e4:	4622      	mov	r2, r4
    25e6:	a943      	add	r1, sp, #268	; 0x10c
    25e8:	4630      	mov	r0, r6
    25ea:	f000 f8c7 	bl	277c <_scanf_chars>
    25ee:	2801      	cmp	r0, #1
    25f0:	f000 8092 	beq.w	2718 <__svfiscanf_r+0x294>
    25f4:	2802      	cmp	r0, #2
    25f6:	d1ba      	bne.n	256e <__svfiscanf_r+0xea>
    25f8:	e01d      	b.n	2636 <__svfiscanf_r+0x1b2>
    25fa:	2b75      	cmp	r3, #117	; 0x75
    25fc:	d0da      	beq.n	25b4 <__svfiscanf_r+0x130>
    25fe:	2b78      	cmp	r3, #120	; 0x78
    2600:	d0c9      	beq.n	2596 <__svfiscanf_r+0x112>
    2602:	2b73      	cmp	r3, #115	; 0x73
    2604:	d19a      	bne.n	253c <__svfiscanf_r+0xb8>
    2606:	2302      	movs	r3, #2
    2608:	e7e1      	b.n	25ce <__svfiscanf_r+0x14a>
    260a:	6863      	ldr	r3, [r4, #4]
    260c:	2b00      	cmp	r3, #0
    260e:	dd0c      	ble.n	262a <__svfiscanf_r+0x1a6>
    2610:	6823      	ldr	r3, [r4, #0]
    2612:	781a      	ldrb	r2, [r3, #0]
    2614:	4593      	cmp	fp, r2
    2616:	d17f      	bne.n	2718 <__svfiscanf_r+0x294>
    2618:	3301      	adds	r3, #1
    261a:	6862      	ldr	r2, [r4, #4]
    261c:	6023      	str	r3, [r4, #0]
    261e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    2620:	3a01      	subs	r2, #1
    2622:	3301      	adds	r3, #1
    2624:	6062      	str	r2, [r4, #4]
    2626:	9347      	str	r3, [sp, #284]	; 0x11c
    2628:	e7a1      	b.n	256e <__svfiscanf_r+0xea>
    262a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    262c:	4621      	mov	r1, r4
    262e:	4630      	mov	r0, r6
    2630:	4798      	blx	r3
    2632:	2800      	cmp	r0, #0
    2634:	d0ec      	beq.n	2610 <__svfiscanf_r+0x18c>
    2636:	9846      	ldr	r0, [sp, #280]	; 0x118
    2638:	2800      	cmp	r0, #0
    263a:	d163      	bne.n	2704 <__svfiscanf_r+0x280>
    263c:	f04f 30ff 	mov.w	r0, #4294967295
    2640:	e066      	b.n	2710 <__svfiscanf_r+0x28c>
    2642:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    2644:	f042 0220 	orr.w	r2, r2, #32
    2648:	9243      	str	r2, [sp, #268]	; 0x10c
    264a:	e7a4      	b.n	2596 <__svfiscanf_r+0x112>
    264c:	2308      	movs	r3, #8
    264e:	9344      	str	r3, [sp, #272]	; 0x110
    2650:	2304      	movs	r3, #4
    2652:	e7bc      	b.n	25ce <__svfiscanf_r+0x14a>
    2654:	4629      	mov	r1, r5
    2656:	4640      	mov	r0, r8
    2658:	f000 fa8c 	bl	2b74 <__sccl>
    265c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    265e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2662:	9343      	str	r3, [sp, #268]	; 0x10c
    2664:	4605      	mov	r5, r0
    2666:	2301      	movs	r3, #1
    2668:	e7b1      	b.n	25ce <__svfiscanf_r+0x14a>
    266a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    266c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2670:	9343      	str	r3, [sp, #268]	; 0x10c
    2672:	2300      	movs	r3, #0
    2674:	e7ab      	b.n	25ce <__svfiscanf_r+0x14a>
    2676:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    2678:	06d0      	lsls	r0, r2, #27
    267a:	f53f af78 	bmi.w	256e <__svfiscanf_r+0xea>
    267e:	f012 0f01 	tst.w	r2, #1
    2682:	9a01      	ldr	r2, [sp, #4]
    2684:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    2686:	f102 0104 	add.w	r1, r2, #4
    268a:	9101      	str	r1, [sp, #4]
    268c:	6812      	ldr	r2, [r2, #0]
    268e:	bf14      	ite	ne
    2690:	8013      	strhne	r3, [r2, #0]
    2692:	6013      	streq	r3, [r2, #0]
    2694:	e76b      	b.n	256e <__svfiscanf_r+0xea>
    2696:	2305      	movs	r3, #5
    2698:	e799      	b.n	25ce <__svfiscanf_r+0x14a>
    269a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    269c:	4621      	mov	r1, r4
    269e:	4630      	mov	r0, r6
    26a0:	4798      	blx	r3
    26a2:	2800      	cmp	r0, #0
    26a4:	d097      	beq.n	25d6 <__svfiscanf_r+0x152>
    26a6:	e7c6      	b.n	2636 <__svfiscanf_r+0x1b2>
    26a8:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    26aa:	3201      	adds	r2, #1
    26ac:	9247      	str	r2, [sp, #284]	; 0x11c
    26ae:	6862      	ldr	r2, [r4, #4]
    26b0:	3a01      	subs	r2, #1
    26b2:	2a00      	cmp	r2, #0
    26b4:	6062      	str	r2, [r4, #4]
    26b6:	dd0a      	ble.n	26ce <__svfiscanf_r+0x24a>
    26b8:	3301      	adds	r3, #1
    26ba:	6023      	str	r3, [r4, #0]
    26bc:	f000 fce6 	bl	308c <__locale_ctype_ptr>
    26c0:	6823      	ldr	r3, [r4, #0]
    26c2:	781a      	ldrb	r2, [r3, #0]
    26c4:	4410      	add	r0, r2
    26c6:	7842      	ldrb	r2, [r0, #1]
    26c8:	0712      	lsls	r2, r2, #28
    26ca:	d4ed      	bmi.n	26a8 <__svfiscanf_r+0x224>
    26cc:	e786      	b.n	25dc <__svfiscanf_r+0x158>
    26ce:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    26d0:	4621      	mov	r1, r4
    26d2:	4630      	mov	r0, r6
    26d4:	4798      	blx	r3
    26d6:	2800      	cmp	r0, #0
    26d8:	d0f0      	beq.n	26bc <__svfiscanf_r+0x238>
    26da:	e7ac      	b.n	2636 <__svfiscanf_r+0x1b2>
    26dc:	2b04      	cmp	r3, #4
    26de:	dc06      	bgt.n	26ee <__svfiscanf_r+0x26a>
    26e0:	ab01      	add	r3, sp, #4
    26e2:	4622      	mov	r2, r4
    26e4:	a943      	add	r1, sp, #268	; 0x10c
    26e6:	4630      	mov	r0, r6
    26e8:	f000 f8ac 	bl	2844 <_scanf_i>
    26ec:	e77f      	b.n	25ee <__svfiscanf_r+0x16a>
    26ee:	4b0e      	ldr	r3, [pc, #56]	; (2728 <__svfiscanf_r+0x2a4>)
    26f0:	2b00      	cmp	r3, #0
    26f2:	f43f af3c 	beq.w	256e <__svfiscanf_r+0xea>
    26f6:	ab01      	add	r3, sp, #4
    26f8:	4622      	mov	r2, r4
    26fa:	a943      	add	r1, sp, #268	; 0x10c
    26fc:	4630      	mov	r0, r6
    26fe:	f3af 8000 	nop.w
    2702:	e774      	b.n	25ee <__svfiscanf_r+0x16a>
    2704:	89a3      	ldrh	r3, [r4, #12]
    2706:	f013 0f40 	tst.w	r3, #64	; 0x40
    270a:	bf18      	it	ne
    270c:	f04f 30ff 	movne.w	r0, #4294967295
    2710:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    2714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2718:	9846      	ldr	r0, [sp, #280]	; 0x118
    271a:	e7f9      	b.n	2710 <__svfiscanf_r+0x28c>
    271c:	00002f19 	.word	0x00002f19
    2720:	00002a41 	.word	0x00002a41
    2724:	0000392e 	.word	0x0000392e
    2728:	00000000 	.word	0x00000000

0000272c <_vfiscanf_r>:
    272c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2730:	460c      	mov	r4, r1
    2732:	4616      	mov	r6, r2
    2734:	461f      	mov	r7, r3
    2736:	4605      	mov	r5, r0
    2738:	b118      	cbz	r0, 2742 <_vfiscanf_r+0x16>
    273a:	6983      	ldr	r3, [r0, #24]
    273c:	b90b      	cbnz	r3, 2742 <_vfiscanf_r+0x16>
    273e:	f7ff fa0f 	bl	1b60 <__sinit>
    2742:	4b0b      	ldr	r3, [pc, #44]	; (2770 <_vfiscanf_r+0x44>)
    2744:	429c      	cmp	r4, r3
    2746:	d108      	bne.n	275a <_vfiscanf_r+0x2e>
    2748:	686c      	ldr	r4, [r5, #4]
    274a:	463b      	mov	r3, r7
    274c:	4632      	mov	r2, r6
    274e:	4621      	mov	r1, r4
    2750:	4628      	mov	r0, r5
    2752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2756:	f7ff be95 	b.w	2484 <__svfiscanf_r>
    275a:	4b06      	ldr	r3, [pc, #24]	; (2774 <_vfiscanf_r+0x48>)
    275c:	429c      	cmp	r4, r3
    275e:	d101      	bne.n	2764 <_vfiscanf_r+0x38>
    2760:	68ac      	ldr	r4, [r5, #8]
    2762:	e7f2      	b.n	274a <_vfiscanf_r+0x1e>
    2764:	4b04      	ldr	r3, [pc, #16]	; (2778 <_vfiscanf_r+0x4c>)
    2766:	429c      	cmp	r4, r3
    2768:	bf08      	it	eq
    276a:	68ec      	ldreq	r4, [r5, #12]
    276c:	e7ed      	b.n	274a <_vfiscanf_r+0x1e>
    276e:	bf00      	nop
    2770:	000038e8 	.word	0x000038e8
    2774:	00003908 	.word	0x00003908
    2778:	000038c8 	.word	0x000038c8

0000277c <_scanf_chars>:
    277c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2780:	4615      	mov	r5, r2
    2782:	688a      	ldr	r2, [r1, #8]
    2784:	4680      	mov	r8, r0
    2786:	460c      	mov	r4, r1
    2788:	b932      	cbnz	r2, 2798 <_scanf_chars+0x1c>
    278a:	698a      	ldr	r2, [r1, #24]
    278c:	2a00      	cmp	r2, #0
    278e:	bf0c      	ite	eq
    2790:	2201      	moveq	r2, #1
    2792:	f04f 32ff 	movne.w	r2, #4294967295
    2796:	608a      	str	r2, [r1, #8]
    2798:	6822      	ldr	r2, [r4, #0]
    279a:	06d1      	lsls	r1, r2, #27
    279c:	bf5f      	itttt	pl
    279e:	681a      	ldrpl	r2, [r3, #0]
    27a0:	1d11      	addpl	r1, r2, #4
    27a2:	6019      	strpl	r1, [r3, #0]
    27a4:	6817      	ldrpl	r7, [r2, #0]
    27a6:	2600      	movs	r6, #0
    27a8:	69a3      	ldr	r3, [r4, #24]
    27aa:	b1db      	cbz	r3, 27e4 <_scanf_chars+0x68>
    27ac:	2b01      	cmp	r3, #1
    27ae:	d107      	bne.n	27c0 <_scanf_chars+0x44>
    27b0:	682b      	ldr	r3, [r5, #0]
    27b2:	6962      	ldr	r2, [r4, #20]
    27b4:	781b      	ldrb	r3, [r3, #0]
    27b6:	5cd3      	ldrb	r3, [r2, r3]
    27b8:	b9a3      	cbnz	r3, 27e4 <_scanf_chars+0x68>
    27ba:	2e00      	cmp	r6, #0
    27bc:	d132      	bne.n	2824 <_scanf_chars+0xa8>
    27be:	e006      	b.n	27ce <_scanf_chars+0x52>
    27c0:	2b02      	cmp	r3, #2
    27c2:	d007      	beq.n	27d4 <_scanf_chars+0x58>
    27c4:	2e00      	cmp	r6, #0
    27c6:	d12d      	bne.n	2824 <_scanf_chars+0xa8>
    27c8:	69a3      	ldr	r3, [r4, #24]
    27ca:	2b01      	cmp	r3, #1
    27cc:	d12a      	bne.n	2824 <_scanf_chars+0xa8>
    27ce:	2001      	movs	r0, #1
    27d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    27d4:	f000 fc5a 	bl	308c <__locale_ctype_ptr>
    27d8:	682b      	ldr	r3, [r5, #0]
    27da:	781b      	ldrb	r3, [r3, #0]
    27dc:	4418      	add	r0, r3
    27de:	7843      	ldrb	r3, [r0, #1]
    27e0:	071b      	lsls	r3, r3, #28
    27e2:	d4ef      	bmi.n	27c4 <_scanf_chars+0x48>
    27e4:	6823      	ldr	r3, [r4, #0]
    27e6:	06da      	lsls	r2, r3, #27
    27e8:	bf5e      	ittt	pl
    27ea:	682b      	ldrpl	r3, [r5, #0]
    27ec:	781b      	ldrbpl	r3, [r3, #0]
    27ee:	703b      	strbpl	r3, [r7, #0]
    27f0:	682a      	ldr	r2, [r5, #0]
    27f2:	686b      	ldr	r3, [r5, #4]
    27f4:	f102 0201 	add.w	r2, r2, #1
    27f8:	602a      	str	r2, [r5, #0]
    27fa:	68a2      	ldr	r2, [r4, #8]
    27fc:	f103 33ff 	add.w	r3, r3, #4294967295
    2800:	f102 32ff 	add.w	r2, r2, #4294967295
    2804:	606b      	str	r3, [r5, #4]
    2806:	f106 0601 	add.w	r6, r6, #1
    280a:	bf58      	it	pl
    280c:	3701      	addpl	r7, #1
    280e:	60a2      	str	r2, [r4, #8]
    2810:	b142      	cbz	r2, 2824 <_scanf_chars+0xa8>
    2812:	2b00      	cmp	r3, #0
    2814:	dcc8      	bgt.n	27a8 <_scanf_chars+0x2c>
    2816:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    281a:	4629      	mov	r1, r5
    281c:	4640      	mov	r0, r8
    281e:	4798      	blx	r3
    2820:	2800      	cmp	r0, #0
    2822:	d0c1      	beq.n	27a8 <_scanf_chars+0x2c>
    2824:	6823      	ldr	r3, [r4, #0]
    2826:	f013 0310 	ands.w	r3, r3, #16
    282a:	d105      	bne.n	2838 <_scanf_chars+0xbc>
    282c:	68e2      	ldr	r2, [r4, #12]
    282e:	3201      	adds	r2, #1
    2830:	60e2      	str	r2, [r4, #12]
    2832:	69a2      	ldr	r2, [r4, #24]
    2834:	b102      	cbz	r2, 2838 <_scanf_chars+0xbc>
    2836:	703b      	strb	r3, [r7, #0]
    2838:	6923      	ldr	r3, [r4, #16]
    283a:	441e      	add	r6, r3
    283c:	6126      	str	r6, [r4, #16]
    283e:	2000      	movs	r0, #0
    2840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002844 <_scanf_i>:
    2844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2848:	469a      	mov	sl, r3
    284a:	4b74      	ldr	r3, [pc, #464]	; (2a1c <_scanf_i+0x1d8>)
    284c:	460c      	mov	r4, r1
    284e:	4683      	mov	fp, r0
    2850:	4616      	mov	r6, r2
    2852:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2856:	b087      	sub	sp, #28
    2858:	ab03      	add	r3, sp, #12
    285a:	68a7      	ldr	r7, [r4, #8]
    285c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    2860:	4b6f      	ldr	r3, [pc, #444]	; (2a20 <_scanf_i+0x1dc>)
    2862:	69a1      	ldr	r1, [r4, #24]
    2864:	4a6f      	ldr	r2, [pc, #444]	; (2a24 <_scanf_i+0x1e0>)
    2866:	2903      	cmp	r1, #3
    2868:	bf18      	it	ne
    286a:	461a      	movne	r2, r3
    286c:	1e7b      	subs	r3, r7, #1
    286e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    2872:	bf84      	itt	hi
    2874:	f240 135d 	movwhi	r3, #349	; 0x15d
    2878:	60a3      	strhi	r3, [r4, #8]
    287a:	6823      	ldr	r3, [r4, #0]
    287c:	9200      	str	r2, [sp, #0]
    287e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    2882:	bf88      	it	hi
    2884:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    2888:	f104 091c 	add.w	r9, r4, #28
    288c:	6023      	str	r3, [r4, #0]
    288e:	bf8c      	ite	hi
    2890:	197f      	addhi	r7, r7, r5
    2892:	2700      	movls	r7, #0
    2894:	464b      	mov	r3, r9
    2896:	f04f 0800 	mov.w	r8, #0
    289a:	9301      	str	r3, [sp, #4]
    289c:	6831      	ldr	r1, [r6, #0]
    289e:	ab03      	add	r3, sp, #12
    28a0:	2202      	movs	r2, #2
    28a2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    28a6:	7809      	ldrb	r1, [r1, #0]
    28a8:	f000 fc22 	bl	30f0 <memchr>
    28ac:	9b01      	ldr	r3, [sp, #4]
    28ae:	b328      	cbz	r0, 28fc <_scanf_i+0xb8>
    28b0:	f1b8 0f01 	cmp.w	r8, #1
    28b4:	d156      	bne.n	2964 <_scanf_i+0x120>
    28b6:	6862      	ldr	r2, [r4, #4]
    28b8:	b92a      	cbnz	r2, 28c6 <_scanf_i+0x82>
    28ba:	2208      	movs	r2, #8
    28bc:	6062      	str	r2, [r4, #4]
    28be:	6822      	ldr	r2, [r4, #0]
    28c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    28c4:	6022      	str	r2, [r4, #0]
    28c6:	6822      	ldr	r2, [r4, #0]
    28c8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    28cc:	6022      	str	r2, [r4, #0]
    28ce:	68a2      	ldr	r2, [r4, #8]
    28d0:	1e51      	subs	r1, r2, #1
    28d2:	60a1      	str	r1, [r4, #8]
    28d4:	b192      	cbz	r2, 28fc <_scanf_i+0xb8>
    28d6:	6832      	ldr	r2, [r6, #0]
    28d8:	1c51      	adds	r1, r2, #1
    28da:	6031      	str	r1, [r6, #0]
    28dc:	7812      	ldrb	r2, [r2, #0]
    28de:	701a      	strb	r2, [r3, #0]
    28e0:	1c5d      	adds	r5, r3, #1
    28e2:	6873      	ldr	r3, [r6, #4]
    28e4:	3b01      	subs	r3, #1
    28e6:	2b00      	cmp	r3, #0
    28e8:	6073      	str	r3, [r6, #4]
    28ea:	dc06      	bgt.n	28fa <_scanf_i+0xb6>
    28ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    28f0:	4631      	mov	r1, r6
    28f2:	4658      	mov	r0, fp
    28f4:	4798      	blx	r3
    28f6:	2800      	cmp	r0, #0
    28f8:	d176      	bne.n	29e8 <_scanf_i+0x1a4>
    28fa:	462b      	mov	r3, r5
    28fc:	f108 0801 	add.w	r8, r8, #1
    2900:	f1b8 0f03 	cmp.w	r8, #3
    2904:	d1c9      	bne.n	289a <_scanf_i+0x56>
    2906:	6862      	ldr	r2, [r4, #4]
    2908:	b90a      	cbnz	r2, 290e <_scanf_i+0xca>
    290a:	220a      	movs	r2, #10
    290c:	6062      	str	r2, [r4, #4]
    290e:	6862      	ldr	r2, [r4, #4]
    2910:	4945      	ldr	r1, [pc, #276]	; (2a28 <_scanf_i+0x1e4>)
    2912:	6960      	ldr	r0, [r4, #20]
    2914:	9301      	str	r3, [sp, #4]
    2916:	1a89      	subs	r1, r1, r2
    2918:	f000 f92c 	bl	2b74 <__sccl>
    291c:	9b01      	ldr	r3, [sp, #4]
    291e:	f04f 0800 	mov.w	r8, #0
    2922:	461d      	mov	r5, r3
    2924:	68a3      	ldr	r3, [r4, #8]
    2926:	2b00      	cmp	r3, #0
    2928:	d038      	beq.n	299c <_scanf_i+0x158>
    292a:	6831      	ldr	r1, [r6, #0]
    292c:	6960      	ldr	r0, [r4, #20]
    292e:	780a      	ldrb	r2, [r1, #0]
    2930:	5c80      	ldrb	r0, [r0, r2]
    2932:	2800      	cmp	r0, #0
    2934:	d032      	beq.n	299c <_scanf_i+0x158>
    2936:	2a30      	cmp	r2, #48	; 0x30
    2938:	6822      	ldr	r2, [r4, #0]
    293a:	d121      	bne.n	2980 <_scanf_i+0x13c>
    293c:	0510      	lsls	r0, r2, #20
    293e:	d51f      	bpl.n	2980 <_scanf_i+0x13c>
    2940:	f108 0801 	add.w	r8, r8, #1
    2944:	b117      	cbz	r7, 294c <_scanf_i+0x108>
    2946:	3301      	adds	r3, #1
    2948:	3f01      	subs	r7, #1
    294a:	60a3      	str	r3, [r4, #8]
    294c:	6873      	ldr	r3, [r6, #4]
    294e:	3b01      	subs	r3, #1
    2950:	2b00      	cmp	r3, #0
    2952:	6073      	str	r3, [r6, #4]
    2954:	dd1b      	ble.n	298e <_scanf_i+0x14a>
    2956:	6833      	ldr	r3, [r6, #0]
    2958:	3301      	adds	r3, #1
    295a:	6033      	str	r3, [r6, #0]
    295c:	68a3      	ldr	r3, [r4, #8]
    295e:	3b01      	subs	r3, #1
    2960:	60a3      	str	r3, [r4, #8]
    2962:	e7df      	b.n	2924 <_scanf_i+0xe0>
    2964:	f1b8 0f02 	cmp.w	r8, #2
    2968:	d1b1      	bne.n	28ce <_scanf_i+0x8a>
    296a:	6822      	ldr	r2, [r4, #0]
    296c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    2970:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    2974:	d1c2      	bne.n	28fc <_scanf_i+0xb8>
    2976:	2110      	movs	r1, #16
    2978:	6061      	str	r1, [r4, #4]
    297a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    297e:	e7a5      	b.n	28cc <_scanf_i+0x88>
    2980:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    2984:	6022      	str	r2, [r4, #0]
    2986:	780b      	ldrb	r3, [r1, #0]
    2988:	702b      	strb	r3, [r5, #0]
    298a:	3501      	adds	r5, #1
    298c:	e7de      	b.n	294c <_scanf_i+0x108>
    298e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    2992:	4631      	mov	r1, r6
    2994:	4658      	mov	r0, fp
    2996:	4798      	blx	r3
    2998:	2800      	cmp	r0, #0
    299a:	d0df      	beq.n	295c <_scanf_i+0x118>
    299c:	6823      	ldr	r3, [r4, #0]
    299e:	05d9      	lsls	r1, r3, #23
    29a0:	d50c      	bpl.n	29bc <_scanf_i+0x178>
    29a2:	454d      	cmp	r5, r9
    29a4:	d908      	bls.n	29b8 <_scanf_i+0x174>
    29a6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    29aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    29ae:	4632      	mov	r2, r6
    29b0:	4658      	mov	r0, fp
    29b2:	4798      	blx	r3
    29b4:	1e6f      	subs	r7, r5, #1
    29b6:	463d      	mov	r5, r7
    29b8:	454d      	cmp	r5, r9
    29ba:	d02c      	beq.n	2a16 <_scanf_i+0x1d2>
    29bc:	6822      	ldr	r2, [r4, #0]
    29be:	f012 0210 	ands.w	r2, r2, #16
    29c2:	d11e      	bne.n	2a02 <_scanf_i+0x1be>
    29c4:	702a      	strb	r2, [r5, #0]
    29c6:	6863      	ldr	r3, [r4, #4]
    29c8:	9e00      	ldr	r6, [sp, #0]
    29ca:	4649      	mov	r1, r9
    29cc:	4658      	mov	r0, fp
    29ce:	47b0      	blx	r6
    29d0:	6822      	ldr	r2, [r4, #0]
    29d2:	f8da 3000 	ldr.w	r3, [sl]
    29d6:	f012 0f20 	tst.w	r2, #32
    29da:	d008      	beq.n	29ee <_scanf_i+0x1aa>
    29dc:	1d1a      	adds	r2, r3, #4
    29de:	f8ca 2000 	str.w	r2, [sl]
    29e2:	681b      	ldr	r3, [r3, #0]
    29e4:	6018      	str	r0, [r3, #0]
    29e6:	e009      	b.n	29fc <_scanf_i+0x1b8>
    29e8:	f04f 0800 	mov.w	r8, #0
    29ec:	e7d6      	b.n	299c <_scanf_i+0x158>
    29ee:	07d2      	lsls	r2, r2, #31
    29f0:	d5f4      	bpl.n	29dc <_scanf_i+0x198>
    29f2:	1d1a      	adds	r2, r3, #4
    29f4:	f8ca 2000 	str.w	r2, [sl]
    29f8:	681b      	ldr	r3, [r3, #0]
    29fa:	8018      	strh	r0, [r3, #0]
    29fc:	68e3      	ldr	r3, [r4, #12]
    29fe:	3301      	adds	r3, #1
    2a00:	60e3      	str	r3, [r4, #12]
    2a02:	eba5 0509 	sub.w	r5, r5, r9
    2a06:	44a8      	add	r8, r5
    2a08:	6925      	ldr	r5, [r4, #16]
    2a0a:	4445      	add	r5, r8
    2a0c:	6125      	str	r5, [r4, #16]
    2a0e:	2000      	movs	r0, #0
    2a10:	b007      	add	sp, #28
    2a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a16:	2001      	movs	r0, #1
    2a18:	e7fa      	b.n	2a10 <_scanf_i+0x1cc>
    2a1a:	bf00      	nop
    2a1c:	0000395c 	.word	0x0000395c
    2a20:	00002e7d 	.word	0x00002e7d
    2a24:	00002d5d 	.word	0x00002d5d
    2a28:	00003978 	.word	0x00003978

00002a2c <lflush>:
    2a2c:	8983      	ldrh	r3, [r0, #12]
    2a2e:	f003 0309 	and.w	r3, r3, #9
    2a32:	2b09      	cmp	r3, #9
    2a34:	d101      	bne.n	2a3a <lflush+0xe>
    2a36:	f7ff b841 	b.w	1abc <fflush>
    2a3a:	2000      	movs	r0, #0
    2a3c:	4770      	bx	lr
	...

00002a40 <__srefill_r>:
    2a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a42:	460c      	mov	r4, r1
    2a44:	4605      	mov	r5, r0
    2a46:	b118      	cbz	r0, 2a50 <__srefill_r+0x10>
    2a48:	6983      	ldr	r3, [r0, #24]
    2a4a:	b90b      	cbnz	r3, 2a50 <__srefill_r+0x10>
    2a4c:	f7ff f888 	bl	1b60 <__sinit>
    2a50:	4b3b      	ldr	r3, [pc, #236]	; (2b40 <__srefill_r+0x100>)
    2a52:	429c      	cmp	r4, r3
    2a54:	d10a      	bne.n	2a6c <__srefill_r+0x2c>
    2a56:	686c      	ldr	r4, [r5, #4]
    2a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    2a5c:	2300      	movs	r3, #0
    2a5e:	6063      	str	r3, [r4, #4]
    2a60:	b293      	uxth	r3, r2
    2a62:	069e      	lsls	r6, r3, #26
    2a64:	d50c      	bpl.n	2a80 <__srefill_r+0x40>
    2a66:	f04f 30ff 	mov.w	r0, #4294967295
    2a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a6c:	4b35      	ldr	r3, [pc, #212]	; (2b44 <__srefill_r+0x104>)
    2a6e:	429c      	cmp	r4, r3
    2a70:	d101      	bne.n	2a76 <__srefill_r+0x36>
    2a72:	68ac      	ldr	r4, [r5, #8]
    2a74:	e7f0      	b.n	2a58 <__srefill_r+0x18>
    2a76:	4b34      	ldr	r3, [pc, #208]	; (2b48 <__srefill_r+0x108>)
    2a78:	429c      	cmp	r4, r3
    2a7a:	bf08      	it	eq
    2a7c:	68ec      	ldreq	r4, [r5, #12]
    2a7e:	e7eb      	b.n	2a58 <__srefill_r+0x18>
    2a80:	0758      	lsls	r0, r3, #29
    2a82:	d448      	bmi.n	2b16 <__srefill_r+0xd6>
    2a84:	06d9      	lsls	r1, r3, #27
    2a86:	d405      	bmi.n	2a94 <__srefill_r+0x54>
    2a88:	2309      	movs	r3, #9
    2a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2a8e:	602b      	str	r3, [r5, #0]
    2a90:	81a2      	strh	r2, [r4, #12]
    2a92:	e7e8      	b.n	2a66 <__srefill_r+0x26>
    2a94:	071a      	lsls	r2, r3, #28
    2a96:	d50b      	bpl.n	2ab0 <__srefill_r+0x70>
    2a98:	4621      	mov	r1, r4
    2a9a:	4628      	mov	r0, r5
    2a9c:	f7fe ffe4 	bl	1a68 <_fflush_r>
    2aa0:	2800      	cmp	r0, #0
    2aa2:	d1e0      	bne.n	2a66 <__srefill_r+0x26>
    2aa4:	89a3      	ldrh	r3, [r4, #12]
    2aa6:	60a0      	str	r0, [r4, #8]
    2aa8:	f023 0308 	bic.w	r3, r3, #8
    2aac:	81a3      	strh	r3, [r4, #12]
    2aae:	61a0      	str	r0, [r4, #24]
    2ab0:	89a3      	ldrh	r3, [r4, #12]
    2ab2:	f043 0304 	orr.w	r3, r3, #4
    2ab6:	81a3      	strh	r3, [r4, #12]
    2ab8:	6923      	ldr	r3, [r4, #16]
    2aba:	b91b      	cbnz	r3, 2ac4 <__srefill_r+0x84>
    2abc:	4621      	mov	r1, r4
    2abe:	4628      	mov	r0, r5
    2ac0:	f7ff f918 	bl	1cf4 <__smakebuf_r>
    2ac4:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
    2ac8:	b2be      	uxth	r6, r7
    2aca:	07b3      	lsls	r3, r6, #30
    2acc:	d00f      	beq.n	2aee <__srefill_r+0xae>
    2ace:	2301      	movs	r3, #1
    2ad0:	81a3      	strh	r3, [r4, #12]
    2ad2:	4b1e      	ldr	r3, [pc, #120]	; (2b4c <__srefill_r+0x10c>)
    2ad4:	491e      	ldr	r1, [pc, #120]	; (2b50 <__srefill_r+0x110>)
    2ad6:	6818      	ldr	r0, [r3, #0]
    2ad8:	f006 0609 	and.w	r6, r6, #9
    2adc:	f7ff f8ac 	bl	1c38 <_fwalk>
    2ae0:	2e09      	cmp	r6, #9
    2ae2:	81a7      	strh	r7, [r4, #12]
    2ae4:	d103      	bne.n	2aee <__srefill_r+0xae>
    2ae6:	4621      	mov	r1, r4
    2ae8:	4628      	mov	r0, r5
    2aea:	f7fe ff35 	bl	1958 <__sflush_r>
    2aee:	6922      	ldr	r2, [r4, #16]
    2af0:	6022      	str	r2, [r4, #0]
    2af2:	6a66      	ldr	r6, [r4, #36]	; 0x24
    2af4:	6963      	ldr	r3, [r4, #20]
    2af6:	6a21      	ldr	r1, [r4, #32]
    2af8:	4628      	mov	r0, r5
    2afa:	47b0      	blx	r6
    2afc:	2800      	cmp	r0, #0
    2afe:	6060      	str	r0, [r4, #4]
    2b00:	dc1c      	bgt.n	2b3c <__srefill_r+0xfc>
    2b02:	89a3      	ldrh	r3, [r4, #12]
    2b04:	bf17      	itett	ne
    2b06:	2200      	movne	r2, #0
    2b08:	f043 0320 	orreq.w	r3, r3, #32
    2b0c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    2b10:	6062      	strne	r2, [r4, #4]
    2b12:	81a3      	strh	r3, [r4, #12]
    2b14:	e7a7      	b.n	2a66 <__srefill_r+0x26>
    2b16:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2b18:	2900      	cmp	r1, #0
    2b1a:	d0cd      	beq.n	2ab8 <__srefill_r+0x78>
    2b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2b20:	4299      	cmp	r1, r3
    2b22:	d002      	beq.n	2b2a <__srefill_r+0xea>
    2b24:	4628      	mov	r0, r5
    2b26:	f7ff f92d 	bl	1d84 <_free_r>
    2b2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2b2c:	6063      	str	r3, [r4, #4]
    2b2e:	2000      	movs	r0, #0
    2b30:	6360      	str	r0, [r4, #52]	; 0x34
    2b32:	2b00      	cmp	r3, #0
    2b34:	d0c0      	beq.n	2ab8 <__srefill_r+0x78>
    2b36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2b38:	6023      	str	r3, [r4, #0]
    2b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b3c:	2000      	movs	r0, #0
    2b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b40:	000038e8 	.word	0x000038e8
    2b44:	00003908 	.word	0x00003908
    2b48:	000038c8 	.word	0x000038c8
    2b4c:	000038c4 	.word	0x000038c4
    2b50:	00002a2d 	.word	0x00002a2d

00002b54 <_sbrk_r>:
    2b54:	b538      	push	{r3, r4, r5, lr}
    2b56:	4c06      	ldr	r4, [pc, #24]	; (2b70 <_sbrk_r+0x1c>)
    2b58:	2300      	movs	r3, #0
    2b5a:	4605      	mov	r5, r0
    2b5c:	4608      	mov	r0, r1
    2b5e:	6023      	str	r3, [r4, #0]
    2b60:	f7fd fe58 	bl	814 <_sbrk>
    2b64:	1c43      	adds	r3, r0, #1
    2b66:	d102      	bne.n	2b6e <_sbrk_r+0x1a>
    2b68:	6823      	ldr	r3, [r4, #0]
    2b6a:	b103      	cbz	r3, 2b6e <_sbrk_r+0x1a>
    2b6c:	602b      	str	r3, [r5, #0]
    2b6e:	bd38      	pop	{r3, r4, r5, pc}
    2b70:	200002a0 	.word	0x200002a0

00002b74 <__sccl>:
    2b74:	b570      	push	{r4, r5, r6, lr}
    2b76:	780b      	ldrb	r3, [r1, #0]
    2b78:	2b5e      	cmp	r3, #94	; 0x5e
    2b7a:	bf13      	iteet	ne
    2b7c:	1c4a      	addne	r2, r1, #1
    2b7e:	1c8a      	addeq	r2, r1, #2
    2b80:	784b      	ldrbeq	r3, [r1, #1]
    2b82:	2100      	movne	r1, #0
    2b84:	bf08      	it	eq
    2b86:	2101      	moveq	r1, #1
    2b88:	1e44      	subs	r4, r0, #1
    2b8a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
    2b8e:	f804 1f01 	strb.w	r1, [r4, #1]!
    2b92:	42a5      	cmp	r5, r4
    2b94:	d1fb      	bne.n	2b8e <__sccl+0x1a>
    2b96:	b913      	cbnz	r3, 2b9e <__sccl+0x2a>
    2b98:	3a01      	subs	r2, #1
    2b9a:	4610      	mov	r0, r2
    2b9c:	bd70      	pop	{r4, r5, r6, pc}
    2b9e:	f081 0401 	eor.w	r4, r1, #1
    2ba2:	54c4      	strb	r4, [r0, r3]
    2ba4:	4611      	mov	r1, r2
    2ba6:	780d      	ldrb	r5, [r1, #0]
    2ba8:	2d2d      	cmp	r5, #45	; 0x2d
    2baa:	f101 0201 	add.w	r2, r1, #1
    2bae:	d006      	beq.n	2bbe <__sccl+0x4a>
    2bb0:	2d5d      	cmp	r5, #93	; 0x5d
    2bb2:	d0f2      	beq.n	2b9a <__sccl+0x26>
    2bb4:	b90d      	cbnz	r5, 2bba <__sccl+0x46>
    2bb6:	460a      	mov	r2, r1
    2bb8:	e7ef      	b.n	2b9a <__sccl+0x26>
    2bba:	462b      	mov	r3, r5
    2bbc:	e7f1      	b.n	2ba2 <__sccl+0x2e>
    2bbe:	784e      	ldrb	r6, [r1, #1]
    2bc0:	2e5d      	cmp	r6, #93	; 0x5d
    2bc2:	d0fa      	beq.n	2bba <__sccl+0x46>
    2bc4:	42b3      	cmp	r3, r6
    2bc6:	dcf8      	bgt.n	2bba <__sccl+0x46>
    2bc8:	3102      	adds	r1, #2
    2bca:	3301      	adds	r3, #1
    2bcc:	429e      	cmp	r6, r3
    2bce:	54c4      	strb	r4, [r0, r3]
    2bd0:	dcfb      	bgt.n	2bca <__sccl+0x56>
    2bd2:	e7e8      	b.n	2ba6 <__sccl+0x32>

00002bd4 <__sread>:
    2bd4:	b510      	push	{r4, lr}
    2bd6:	460c      	mov	r4, r1
    2bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2bdc:	f000 fb00 	bl	31e0 <_read_r>
    2be0:	2800      	cmp	r0, #0
    2be2:	bfab      	itete	ge
    2be4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    2be6:	89a3      	ldrhlt	r3, [r4, #12]
    2be8:	181b      	addge	r3, r3, r0
    2bea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    2bee:	bfac      	ite	ge
    2bf0:	6563      	strge	r3, [r4, #84]	; 0x54
    2bf2:	81a3      	strhlt	r3, [r4, #12]
    2bf4:	bd10      	pop	{r4, pc}

00002bf6 <__swrite>:
    2bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bfa:	461f      	mov	r7, r3
    2bfc:	898b      	ldrh	r3, [r1, #12]
    2bfe:	05db      	lsls	r3, r3, #23
    2c00:	4605      	mov	r5, r0
    2c02:	460c      	mov	r4, r1
    2c04:	4616      	mov	r6, r2
    2c06:	d505      	bpl.n	2c14 <__swrite+0x1e>
    2c08:	2302      	movs	r3, #2
    2c0a:	2200      	movs	r2, #0
    2c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2c10:	f000 fa4a 	bl	30a8 <_lseek_r>
    2c14:	89a3      	ldrh	r3, [r4, #12]
    2c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    2c1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2c1e:	81a3      	strh	r3, [r4, #12]
    2c20:	4632      	mov	r2, r6
    2c22:	463b      	mov	r3, r7
    2c24:	4628      	mov	r0, r5
    2c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2c2a:	f000 b9e7 	b.w	2ffc <_write_r>

00002c2e <__sseek>:
    2c2e:	b510      	push	{r4, lr}
    2c30:	460c      	mov	r4, r1
    2c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2c36:	f000 fa37 	bl	30a8 <_lseek_r>
    2c3a:	1c43      	adds	r3, r0, #1
    2c3c:	89a3      	ldrh	r3, [r4, #12]
    2c3e:	bf15      	itete	ne
    2c40:	6560      	strne	r0, [r4, #84]	; 0x54
    2c42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    2c46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    2c4a:	81a3      	strheq	r3, [r4, #12]
    2c4c:	bf18      	it	ne
    2c4e:	81a3      	strhne	r3, [r4, #12]
    2c50:	bd10      	pop	{r4, pc}

00002c52 <__sclose>:
    2c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2c56:	f000 b9e3 	b.w	3020 <_close_r>

00002c5a <_strtol_l.isra.0>:
    2c5a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c5e:	4680      	mov	r8, r0
    2c60:	4689      	mov	r9, r1
    2c62:	4692      	mov	sl, r2
    2c64:	461f      	mov	r7, r3
    2c66:	468b      	mov	fp, r1
    2c68:	465d      	mov	r5, fp
    2c6a:	980a      	ldr	r0, [sp, #40]	; 0x28
    2c6c:	f815 4b01 	ldrb.w	r4, [r5], #1
    2c70:	f000 fa08 	bl	3084 <__locale_ctype_ptr_l>
    2c74:	4420      	add	r0, r4
    2c76:	7846      	ldrb	r6, [r0, #1]
    2c78:	f016 0608 	ands.w	r6, r6, #8
    2c7c:	d10b      	bne.n	2c96 <_strtol_l.isra.0+0x3c>
    2c7e:	2c2d      	cmp	r4, #45	; 0x2d
    2c80:	d10b      	bne.n	2c9a <_strtol_l.isra.0+0x40>
    2c82:	782c      	ldrb	r4, [r5, #0]
    2c84:	2601      	movs	r6, #1
    2c86:	f10b 0502 	add.w	r5, fp, #2
    2c8a:	b167      	cbz	r7, 2ca6 <_strtol_l.isra.0+0x4c>
    2c8c:	2f10      	cmp	r7, #16
    2c8e:	d114      	bne.n	2cba <_strtol_l.isra.0+0x60>
    2c90:	2c30      	cmp	r4, #48	; 0x30
    2c92:	d00a      	beq.n	2caa <_strtol_l.isra.0+0x50>
    2c94:	e011      	b.n	2cba <_strtol_l.isra.0+0x60>
    2c96:	46ab      	mov	fp, r5
    2c98:	e7e6      	b.n	2c68 <_strtol_l.isra.0+0xe>
    2c9a:	2c2b      	cmp	r4, #43	; 0x2b
    2c9c:	bf04      	itt	eq
    2c9e:	782c      	ldrbeq	r4, [r5, #0]
    2ca0:	f10b 0502 	addeq.w	r5, fp, #2
    2ca4:	e7f1      	b.n	2c8a <_strtol_l.isra.0+0x30>
    2ca6:	2c30      	cmp	r4, #48	; 0x30
    2ca8:	d127      	bne.n	2cfa <_strtol_l.isra.0+0xa0>
    2caa:	782b      	ldrb	r3, [r5, #0]
    2cac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    2cb0:	2b58      	cmp	r3, #88	; 0x58
    2cb2:	d14b      	bne.n	2d4c <_strtol_l.isra.0+0xf2>
    2cb4:	786c      	ldrb	r4, [r5, #1]
    2cb6:	2710      	movs	r7, #16
    2cb8:	3502      	adds	r5, #2
    2cba:	2e00      	cmp	r6, #0
    2cbc:	bf0c      	ite	eq
    2cbe:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    2cc2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    2cc6:	2200      	movs	r2, #0
    2cc8:	fbb1 fef7 	udiv	lr, r1, r7
    2ccc:	4610      	mov	r0, r2
    2cce:	fb07 1c1e 	mls	ip, r7, lr, r1
    2cd2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    2cd6:	2b09      	cmp	r3, #9
    2cd8:	d811      	bhi.n	2cfe <_strtol_l.isra.0+0xa4>
    2cda:	461c      	mov	r4, r3
    2cdc:	42a7      	cmp	r7, r4
    2cde:	dd1d      	ble.n	2d1c <_strtol_l.isra.0+0xc2>
    2ce0:	1c53      	adds	r3, r2, #1
    2ce2:	d007      	beq.n	2cf4 <_strtol_l.isra.0+0x9a>
    2ce4:	4586      	cmp	lr, r0
    2ce6:	d316      	bcc.n	2d16 <_strtol_l.isra.0+0xbc>
    2ce8:	d101      	bne.n	2cee <_strtol_l.isra.0+0x94>
    2cea:	45a4      	cmp	ip, r4
    2cec:	db13      	blt.n	2d16 <_strtol_l.isra.0+0xbc>
    2cee:	fb00 4007 	mla	r0, r0, r7, r4
    2cf2:	2201      	movs	r2, #1
    2cf4:	f815 4b01 	ldrb.w	r4, [r5], #1
    2cf8:	e7eb      	b.n	2cd2 <_strtol_l.isra.0+0x78>
    2cfa:	270a      	movs	r7, #10
    2cfc:	e7dd      	b.n	2cba <_strtol_l.isra.0+0x60>
    2cfe:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    2d02:	2b19      	cmp	r3, #25
    2d04:	d801      	bhi.n	2d0a <_strtol_l.isra.0+0xb0>
    2d06:	3c37      	subs	r4, #55	; 0x37
    2d08:	e7e8      	b.n	2cdc <_strtol_l.isra.0+0x82>
    2d0a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    2d0e:	2b19      	cmp	r3, #25
    2d10:	d804      	bhi.n	2d1c <_strtol_l.isra.0+0xc2>
    2d12:	3c57      	subs	r4, #87	; 0x57
    2d14:	e7e2      	b.n	2cdc <_strtol_l.isra.0+0x82>
    2d16:	f04f 32ff 	mov.w	r2, #4294967295
    2d1a:	e7eb      	b.n	2cf4 <_strtol_l.isra.0+0x9a>
    2d1c:	1c53      	adds	r3, r2, #1
    2d1e:	d108      	bne.n	2d32 <_strtol_l.isra.0+0xd8>
    2d20:	2322      	movs	r3, #34	; 0x22
    2d22:	f8c8 3000 	str.w	r3, [r8]
    2d26:	4608      	mov	r0, r1
    2d28:	f1ba 0f00 	cmp.w	sl, #0
    2d2c:	d107      	bne.n	2d3e <_strtol_l.isra.0+0xe4>
    2d2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d32:	b106      	cbz	r6, 2d36 <_strtol_l.isra.0+0xdc>
    2d34:	4240      	negs	r0, r0
    2d36:	f1ba 0f00 	cmp.w	sl, #0
    2d3a:	d00c      	beq.n	2d56 <_strtol_l.isra.0+0xfc>
    2d3c:	b122      	cbz	r2, 2d48 <_strtol_l.isra.0+0xee>
    2d3e:	3d01      	subs	r5, #1
    2d40:	f8ca 5000 	str.w	r5, [sl]
    2d44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d48:	464d      	mov	r5, r9
    2d4a:	e7f9      	b.n	2d40 <_strtol_l.isra.0+0xe6>
    2d4c:	2430      	movs	r4, #48	; 0x30
    2d4e:	2f00      	cmp	r7, #0
    2d50:	d1b3      	bne.n	2cba <_strtol_l.isra.0+0x60>
    2d52:	2708      	movs	r7, #8
    2d54:	e7b1      	b.n	2cba <_strtol_l.isra.0+0x60>
    2d56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00002d5c <_strtol_r>:
    2d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2d5e:	4c06      	ldr	r4, [pc, #24]	; (2d78 <_strtol_r+0x1c>)
    2d60:	4d06      	ldr	r5, [pc, #24]	; (2d7c <_strtol_r+0x20>)
    2d62:	6824      	ldr	r4, [r4, #0]
    2d64:	6a24      	ldr	r4, [r4, #32]
    2d66:	2c00      	cmp	r4, #0
    2d68:	bf08      	it	eq
    2d6a:	462c      	moveq	r4, r5
    2d6c:	9400      	str	r4, [sp, #0]
    2d6e:	f7ff ff74 	bl	2c5a <_strtol_l.isra.0>
    2d72:	b003      	add	sp, #12
    2d74:	bd30      	pop	{r4, r5, pc}
    2d76:	bf00      	nop
    2d78:	20000014 	.word	0x20000014
    2d7c:	20000078 	.word	0x20000078

00002d80 <_strtoul_l.isra.0>:
    2d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d84:	4680      	mov	r8, r0
    2d86:	4689      	mov	r9, r1
    2d88:	4692      	mov	sl, r2
    2d8a:	461e      	mov	r6, r3
    2d8c:	460f      	mov	r7, r1
    2d8e:	463d      	mov	r5, r7
    2d90:	9808      	ldr	r0, [sp, #32]
    2d92:	f815 4b01 	ldrb.w	r4, [r5], #1
    2d96:	f000 f975 	bl	3084 <__locale_ctype_ptr_l>
    2d9a:	4420      	add	r0, r4
    2d9c:	7843      	ldrb	r3, [r0, #1]
    2d9e:	f013 0308 	ands.w	r3, r3, #8
    2da2:	d10a      	bne.n	2dba <_strtoul_l.isra.0+0x3a>
    2da4:	2c2d      	cmp	r4, #45	; 0x2d
    2da6:	d10a      	bne.n	2dbe <_strtoul_l.isra.0+0x3e>
    2da8:	782c      	ldrb	r4, [r5, #0]
    2daa:	2301      	movs	r3, #1
    2dac:	1cbd      	adds	r5, r7, #2
    2dae:	b15e      	cbz	r6, 2dc8 <_strtoul_l.isra.0+0x48>
    2db0:	2e10      	cmp	r6, #16
    2db2:	d113      	bne.n	2ddc <_strtoul_l.isra.0+0x5c>
    2db4:	2c30      	cmp	r4, #48	; 0x30
    2db6:	d009      	beq.n	2dcc <_strtoul_l.isra.0+0x4c>
    2db8:	e010      	b.n	2ddc <_strtoul_l.isra.0+0x5c>
    2dba:	462f      	mov	r7, r5
    2dbc:	e7e7      	b.n	2d8e <_strtoul_l.isra.0+0xe>
    2dbe:	2c2b      	cmp	r4, #43	; 0x2b
    2dc0:	bf04      	itt	eq
    2dc2:	782c      	ldrbeq	r4, [r5, #0]
    2dc4:	1cbd      	addeq	r5, r7, #2
    2dc6:	e7f2      	b.n	2dae <_strtoul_l.isra.0+0x2e>
    2dc8:	2c30      	cmp	r4, #48	; 0x30
    2dca:	d125      	bne.n	2e18 <_strtoul_l.isra.0+0x98>
    2dcc:	782a      	ldrb	r2, [r5, #0]
    2dce:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    2dd2:	2a58      	cmp	r2, #88	; 0x58
    2dd4:	d14a      	bne.n	2e6c <_strtoul_l.isra.0+0xec>
    2dd6:	786c      	ldrb	r4, [r5, #1]
    2dd8:	2610      	movs	r6, #16
    2dda:	3502      	adds	r5, #2
    2ddc:	f04f 31ff 	mov.w	r1, #4294967295
    2de0:	2700      	movs	r7, #0
    2de2:	fbb1 f1f6 	udiv	r1, r1, r6
    2de6:	fb06 fe01 	mul.w	lr, r6, r1
    2dea:	ea6f 0e0e 	mvn.w	lr, lr
    2dee:	4638      	mov	r0, r7
    2df0:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    2df4:	2a09      	cmp	r2, #9
    2df6:	d811      	bhi.n	2e1c <_strtoul_l.isra.0+0x9c>
    2df8:	4614      	mov	r4, r2
    2dfa:	42a6      	cmp	r6, r4
    2dfc:	dd1d      	ble.n	2e3a <_strtoul_l.isra.0+0xba>
    2dfe:	2f00      	cmp	r7, #0
    2e00:	db18      	blt.n	2e34 <_strtoul_l.isra.0+0xb4>
    2e02:	4281      	cmp	r1, r0
    2e04:	d316      	bcc.n	2e34 <_strtoul_l.isra.0+0xb4>
    2e06:	d101      	bne.n	2e0c <_strtoul_l.isra.0+0x8c>
    2e08:	45a6      	cmp	lr, r4
    2e0a:	db13      	blt.n	2e34 <_strtoul_l.isra.0+0xb4>
    2e0c:	fb00 4006 	mla	r0, r0, r6, r4
    2e10:	2701      	movs	r7, #1
    2e12:	f815 4b01 	ldrb.w	r4, [r5], #1
    2e16:	e7eb      	b.n	2df0 <_strtoul_l.isra.0+0x70>
    2e18:	260a      	movs	r6, #10
    2e1a:	e7df      	b.n	2ddc <_strtoul_l.isra.0+0x5c>
    2e1c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
    2e20:	2a19      	cmp	r2, #25
    2e22:	d801      	bhi.n	2e28 <_strtoul_l.isra.0+0xa8>
    2e24:	3c37      	subs	r4, #55	; 0x37
    2e26:	e7e8      	b.n	2dfa <_strtoul_l.isra.0+0x7a>
    2e28:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    2e2c:	2a19      	cmp	r2, #25
    2e2e:	d804      	bhi.n	2e3a <_strtoul_l.isra.0+0xba>
    2e30:	3c57      	subs	r4, #87	; 0x57
    2e32:	e7e2      	b.n	2dfa <_strtoul_l.isra.0+0x7a>
    2e34:	f04f 37ff 	mov.w	r7, #4294967295
    2e38:	e7eb      	b.n	2e12 <_strtoul_l.isra.0+0x92>
    2e3a:	2f00      	cmp	r7, #0
    2e3c:	da09      	bge.n	2e52 <_strtoul_l.isra.0+0xd2>
    2e3e:	2322      	movs	r3, #34	; 0x22
    2e40:	f8c8 3000 	str.w	r3, [r8]
    2e44:	f04f 30ff 	mov.w	r0, #4294967295
    2e48:	f1ba 0f00 	cmp.w	sl, #0
    2e4c:	d107      	bne.n	2e5e <_strtoul_l.isra.0+0xde>
    2e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e52:	b103      	cbz	r3, 2e56 <_strtoul_l.isra.0+0xd6>
    2e54:	4240      	negs	r0, r0
    2e56:	f1ba 0f00 	cmp.w	sl, #0
    2e5a:	d00c      	beq.n	2e76 <_strtoul_l.isra.0+0xf6>
    2e5c:	b127      	cbz	r7, 2e68 <_strtoul_l.isra.0+0xe8>
    2e5e:	3d01      	subs	r5, #1
    2e60:	f8ca 5000 	str.w	r5, [sl]
    2e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e68:	464d      	mov	r5, r9
    2e6a:	e7f9      	b.n	2e60 <_strtoul_l.isra.0+0xe0>
    2e6c:	2430      	movs	r4, #48	; 0x30
    2e6e:	2e00      	cmp	r6, #0
    2e70:	d1b4      	bne.n	2ddc <_strtoul_l.isra.0+0x5c>
    2e72:	2608      	movs	r6, #8
    2e74:	e7b2      	b.n	2ddc <_strtoul_l.isra.0+0x5c>
    2e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00002e7c <_strtoul_r>:
    2e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2e7e:	4c06      	ldr	r4, [pc, #24]	; (2e98 <_strtoul_r+0x1c>)
    2e80:	4d06      	ldr	r5, [pc, #24]	; (2e9c <_strtoul_r+0x20>)
    2e82:	6824      	ldr	r4, [r4, #0]
    2e84:	6a24      	ldr	r4, [r4, #32]
    2e86:	2c00      	cmp	r4, #0
    2e88:	bf08      	it	eq
    2e8a:	462c      	moveq	r4, r5
    2e8c:	9400      	str	r4, [sp, #0]
    2e8e:	f7ff ff77 	bl	2d80 <_strtoul_l.isra.0>
    2e92:	b003      	add	sp, #12
    2e94:	bd30      	pop	{r4, r5, pc}
    2e96:	bf00      	nop
    2e98:	20000014 	.word	0x20000014
    2e9c:	20000078 	.word	0x20000078

00002ea0 <__submore>:
    2ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ea4:	460c      	mov	r4, r1
    2ea6:	6b49      	ldr	r1, [r1, #52]	; 0x34
    2ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2eac:	4299      	cmp	r1, r3
    2eae:	d11e      	bne.n	2eee <__submore+0x4e>
    2eb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2eb4:	f7fe ffb4 	bl	1e20 <_malloc_r>
    2eb8:	b918      	cbnz	r0, 2ec2 <__submore+0x22>
    2eba:	f04f 30ff 	mov.w	r0, #4294967295
    2ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2ec6:	63a3      	str	r3, [r4, #56]	; 0x38
    2ec8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    2ecc:	6360      	str	r0, [r4, #52]	; 0x34
    2ece:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    2ed2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    2ed6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    2eda:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    2ede:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    2ee2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    2ee6:	6020      	str	r0, [r4, #0]
    2ee8:	2000      	movs	r0, #0
    2eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2eee:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    2ef0:	0077      	lsls	r7, r6, #1
    2ef2:	463a      	mov	r2, r7
    2ef4:	f000 f94e 	bl	3194 <_realloc_r>
    2ef8:	4605      	mov	r5, r0
    2efa:	2800      	cmp	r0, #0
    2efc:	d0dd      	beq.n	2eba <__submore+0x1a>
    2efe:	eb00 0806 	add.w	r8, r0, r6
    2f02:	4601      	mov	r1, r0
    2f04:	4632      	mov	r2, r6
    2f06:	4640      	mov	r0, r8
    2f08:	f7fe fb08 	bl	151c <memcpy>
    2f0c:	f8c4 8000 	str.w	r8, [r4]
    2f10:	6365      	str	r5, [r4, #52]	; 0x34
    2f12:	63a7      	str	r7, [r4, #56]	; 0x38
    2f14:	e7e8      	b.n	2ee8 <__submore+0x48>
	...

00002f18 <_ungetc_r>:
    2f18:	1c4b      	adds	r3, r1, #1
    2f1a:	b570      	push	{r4, r5, r6, lr}
    2f1c:	4606      	mov	r6, r0
    2f1e:	460d      	mov	r5, r1
    2f20:	4614      	mov	r4, r2
    2f22:	d103      	bne.n	2f2c <_ungetc_r+0x14>
    2f24:	f04f 35ff 	mov.w	r5, #4294967295
    2f28:	4628      	mov	r0, r5
    2f2a:	bd70      	pop	{r4, r5, r6, pc}
    2f2c:	b118      	cbz	r0, 2f36 <_ungetc_r+0x1e>
    2f2e:	6983      	ldr	r3, [r0, #24]
    2f30:	b90b      	cbnz	r3, 2f36 <_ungetc_r+0x1e>
    2f32:	f7fe fe15 	bl	1b60 <__sinit>
    2f36:	4b2e      	ldr	r3, [pc, #184]	; (2ff0 <_ungetc_r+0xd8>)
    2f38:	429c      	cmp	r4, r3
    2f3a:	d12c      	bne.n	2f96 <_ungetc_r+0x7e>
    2f3c:	6874      	ldr	r4, [r6, #4]
    2f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2f42:	f023 0320 	bic.w	r3, r3, #32
    2f46:	81a3      	strh	r3, [r4, #12]
    2f48:	b29b      	uxth	r3, r3
    2f4a:	0759      	lsls	r1, r3, #29
    2f4c:	d413      	bmi.n	2f76 <_ungetc_r+0x5e>
    2f4e:	06da      	lsls	r2, r3, #27
    2f50:	d5e8      	bpl.n	2f24 <_ungetc_r+0xc>
    2f52:	071b      	lsls	r3, r3, #28
    2f54:	d50b      	bpl.n	2f6e <_ungetc_r+0x56>
    2f56:	4621      	mov	r1, r4
    2f58:	4630      	mov	r0, r6
    2f5a:	f7fe fd85 	bl	1a68 <_fflush_r>
    2f5e:	2800      	cmp	r0, #0
    2f60:	d1e0      	bne.n	2f24 <_ungetc_r+0xc>
    2f62:	89a3      	ldrh	r3, [r4, #12]
    2f64:	60a0      	str	r0, [r4, #8]
    2f66:	f023 0308 	bic.w	r3, r3, #8
    2f6a:	81a3      	strh	r3, [r4, #12]
    2f6c:	61a0      	str	r0, [r4, #24]
    2f6e:	89a3      	ldrh	r3, [r4, #12]
    2f70:	f043 0304 	orr.w	r3, r3, #4
    2f74:	81a3      	strh	r3, [r4, #12]
    2f76:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2f78:	6862      	ldr	r2, [r4, #4]
    2f7a:	b2ed      	uxtb	r5, r5
    2f7c:	b1e3      	cbz	r3, 2fb8 <_ungetc_r+0xa0>
    2f7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2f80:	429a      	cmp	r2, r3
    2f82:	da12      	bge.n	2faa <_ungetc_r+0x92>
    2f84:	6823      	ldr	r3, [r4, #0]
    2f86:	1e5a      	subs	r2, r3, #1
    2f88:	6022      	str	r2, [r4, #0]
    2f8a:	f803 5c01 	strb.w	r5, [r3, #-1]
    2f8e:	6863      	ldr	r3, [r4, #4]
    2f90:	3301      	adds	r3, #1
    2f92:	6063      	str	r3, [r4, #4]
    2f94:	e7c8      	b.n	2f28 <_ungetc_r+0x10>
    2f96:	4b17      	ldr	r3, [pc, #92]	; (2ff4 <_ungetc_r+0xdc>)
    2f98:	429c      	cmp	r4, r3
    2f9a:	d101      	bne.n	2fa0 <_ungetc_r+0x88>
    2f9c:	68b4      	ldr	r4, [r6, #8]
    2f9e:	e7ce      	b.n	2f3e <_ungetc_r+0x26>
    2fa0:	4b15      	ldr	r3, [pc, #84]	; (2ff8 <_ungetc_r+0xe0>)
    2fa2:	429c      	cmp	r4, r3
    2fa4:	bf08      	it	eq
    2fa6:	68f4      	ldreq	r4, [r6, #12]
    2fa8:	e7c9      	b.n	2f3e <_ungetc_r+0x26>
    2faa:	4621      	mov	r1, r4
    2fac:	4630      	mov	r0, r6
    2fae:	f7ff ff77 	bl	2ea0 <__submore>
    2fb2:	2800      	cmp	r0, #0
    2fb4:	d0e6      	beq.n	2f84 <_ungetc_r+0x6c>
    2fb6:	e7b5      	b.n	2f24 <_ungetc_r+0xc>
    2fb8:	6921      	ldr	r1, [r4, #16]
    2fba:	6823      	ldr	r3, [r4, #0]
    2fbc:	b151      	cbz	r1, 2fd4 <_ungetc_r+0xbc>
    2fbe:	4299      	cmp	r1, r3
    2fc0:	d208      	bcs.n	2fd4 <_ungetc_r+0xbc>
    2fc2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    2fc6:	428d      	cmp	r5, r1
    2fc8:	d104      	bne.n	2fd4 <_ungetc_r+0xbc>
    2fca:	3b01      	subs	r3, #1
    2fcc:	3201      	adds	r2, #1
    2fce:	6023      	str	r3, [r4, #0]
    2fd0:	6062      	str	r2, [r4, #4]
    2fd2:	e7a9      	b.n	2f28 <_ungetc_r+0x10>
    2fd4:	63e3      	str	r3, [r4, #60]	; 0x3c
    2fd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2fda:	6363      	str	r3, [r4, #52]	; 0x34
    2fdc:	2303      	movs	r3, #3
    2fde:	63a3      	str	r3, [r4, #56]	; 0x38
    2fe0:	4623      	mov	r3, r4
    2fe2:	6422      	str	r2, [r4, #64]	; 0x40
    2fe4:	f803 5f46 	strb.w	r5, [r3, #70]!
    2fe8:	6023      	str	r3, [r4, #0]
    2fea:	2301      	movs	r3, #1
    2fec:	e7d1      	b.n	2f92 <_ungetc_r+0x7a>
    2fee:	bf00      	nop
    2ff0:	000038e8 	.word	0x000038e8
    2ff4:	00003908 	.word	0x00003908
    2ff8:	000038c8 	.word	0x000038c8

00002ffc <_write_r>:
    2ffc:	b538      	push	{r3, r4, r5, lr}
    2ffe:	4c07      	ldr	r4, [pc, #28]	; (301c <_write_r+0x20>)
    3000:	4605      	mov	r5, r0
    3002:	4608      	mov	r0, r1
    3004:	4611      	mov	r1, r2
    3006:	2200      	movs	r2, #0
    3008:	6022      	str	r2, [r4, #0]
    300a:	461a      	mov	r2, r3
    300c:	f7fe fa06 	bl	141c <_write>
    3010:	1c43      	adds	r3, r0, #1
    3012:	d102      	bne.n	301a <_write_r+0x1e>
    3014:	6823      	ldr	r3, [r4, #0]
    3016:	b103      	cbz	r3, 301a <_write_r+0x1e>
    3018:	602b      	str	r3, [r5, #0]
    301a:	bd38      	pop	{r3, r4, r5, pc}
    301c:	200002a0 	.word	0x200002a0

00003020 <_close_r>:
    3020:	b538      	push	{r3, r4, r5, lr}
    3022:	4c06      	ldr	r4, [pc, #24]	; (303c <_close_r+0x1c>)
    3024:	2300      	movs	r3, #0
    3026:	4605      	mov	r5, r0
    3028:	4608      	mov	r0, r1
    302a:	6023      	str	r3, [r4, #0]
    302c:	f7fd fc04 	bl	838 <_close>
    3030:	1c43      	adds	r3, r0, #1
    3032:	d102      	bne.n	303a <_close_r+0x1a>
    3034:	6823      	ldr	r3, [r4, #0]
    3036:	b103      	cbz	r3, 303a <_close_r+0x1a>
    3038:	602b      	str	r3, [r5, #0]
    303a:	bd38      	pop	{r3, r4, r5, pc}
    303c:	200002a0 	.word	0x200002a0

00003040 <_fstat_r>:
    3040:	b538      	push	{r3, r4, r5, lr}
    3042:	4c07      	ldr	r4, [pc, #28]	; (3060 <_fstat_r+0x20>)
    3044:	2300      	movs	r3, #0
    3046:	4605      	mov	r5, r0
    3048:	4608      	mov	r0, r1
    304a:	4611      	mov	r1, r2
    304c:	6023      	str	r3, [r4, #0]
    304e:	f7fd fbf6 	bl	83e <_fstat>
    3052:	1c43      	adds	r3, r0, #1
    3054:	d102      	bne.n	305c <_fstat_r+0x1c>
    3056:	6823      	ldr	r3, [r4, #0]
    3058:	b103      	cbz	r3, 305c <_fstat_r+0x1c>
    305a:	602b      	str	r3, [r5, #0]
    305c:	bd38      	pop	{r3, r4, r5, pc}
    305e:	bf00      	nop
    3060:	200002a0 	.word	0x200002a0

00003064 <_isatty_r>:
    3064:	b538      	push	{r3, r4, r5, lr}
    3066:	4c06      	ldr	r4, [pc, #24]	; (3080 <_isatty_r+0x1c>)
    3068:	2300      	movs	r3, #0
    306a:	4605      	mov	r5, r0
    306c:	4608      	mov	r0, r1
    306e:	6023      	str	r3, [r4, #0]
    3070:	f7fd fbea 	bl	848 <_isatty>
    3074:	1c43      	adds	r3, r0, #1
    3076:	d102      	bne.n	307e <_isatty_r+0x1a>
    3078:	6823      	ldr	r3, [r4, #0]
    307a:	b103      	cbz	r3, 307e <_isatty_r+0x1a>
    307c:	602b      	str	r3, [r5, #0]
    307e:	bd38      	pop	{r3, r4, r5, pc}
    3080:	200002a0 	.word	0x200002a0

00003084 <__locale_ctype_ptr_l>:
    3084:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    3088:	4770      	bx	lr
	...

0000308c <__locale_ctype_ptr>:
    308c:	4b04      	ldr	r3, [pc, #16]	; (30a0 <__locale_ctype_ptr+0x14>)
    308e:	4a05      	ldr	r2, [pc, #20]	; (30a4 <__locale_ctype_ptr+0x18>)
    3090:	681b      	ldr	r3, [r3, #0]
    3092:	6a1b      	ldr	r3, [r3, #32]
    3094:	2b00      	cmp	r3, #0
    3096:	bf08      	it	eq
    3098:	4613      	moveq	r3, r2
    309a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    309e:	4770      	bx	lr
    30a0:	20000014 	.word	0x20000014
    30a4:	20000078 	.word	0x20000078

000030a8 <_lseek_r>:
    30a8:	b538      	push	{r3, r4, r5, lr}
    30aa:	4c07      	ldr	r4, [pc, #28]	; (30c8 <_lseek_r+0x20>)
    30ac:	4605      	mov	r5, r0
    30ae:	4608      	mov	r0, r1
    30b0:	4611      	mov	r1, r2
    30b2:	2200      	movs	r2, #0
    30b4:	6022      	str	r2, [r4, #0]
    30b6:	461a      	mov	r2, r3
    30b8:	f7fd fbc8 	bl	84c <_lseek>
    30bc:	1c43      	adds	r3, r0, #1
    30be:	d102      	bne.n	30c6 <_lseek_r+0x1e>
    30c0:	6823      	ldr	r3, [r4, #0]
    30c2:	b103      	cbz	r3, 30c6 <_lseek_r+0x1e>
    30c4:	602b      	str	r3, [r5, #0]
    30c6:	bd38      	pop	{r3, r4, r5, pc}
    30c8:	200002a0 	.word	0x200002a0

000030cc <__ascii_mbtowc>:
    30cc:	b082      	sub	sp, #8
    30ce:	b901      	cbnz	r1, 30d2 <__ascii_mbtowc+0x6>
    30d0:	a901      	add	r1, sp, #4
    30d2:	b142      	cbz	r2, 30e6 <__ascii_mbtowc+0x1a>
    30d4:	b14b      	cbz	r3, 30ea <__ascii_mbtowc+0x1e>
    30d6:	7813      	ldrb	r3, [r2, #0]
    30d8:	600b      	str	r3, [r1, #0]
    30da:	7812      	ldrb	r2, [r2, #0]
    30dc:	1c10      	adds	r0, r2, #0
    30de:	bf18      	it	ne
    30e0:	2001      	movne	r0, #1
    30e2:	b002      	add	sp, #8
    30e4:	4770      	bx	lr
    30e6:	4610      	mov	r0, r2
    30e8:	e7fb      	b.n	30e2 <__ascii_mbtowc+0x16>
    30ea:	f06f 0001 	mvn.w	r0, #1
    30ee:	e7f8      	b.n	30e2 <__ascii_mbtowc+0x16>

000030f0 <memchr>:
    30f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    30f4:	2a10      	cmp	r2, #16
    30f6:	db2b      	blt.n	3150 <memchr+0x60>
    30f8:	f010 0f07 	tst.w	r0, #7
    30fc:	d008      	beq.n	3110 <memchr+0x20>
    30fe:	f810 3b01 	ldrb.w	r3, [r0], #1
    3102:	3a01      	subs	r2, #1
    3104:	428b      	cmp	r3, r1
    3106:	d02d      	beq.n	3164 <memchr+0x74>
    3108:	f010 0f07 	tst.w	r0, #7
    310c:	b342      	cbz	r2, 3160 <memchr+0x70>
    310e:	d1f6      	bne.n	30fe <memchr+0xe>
    3110:	b4f0      	push	{r4, r5, r6, r7}
    3112:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    3116:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    311a:	f022 0407 	bic.w	r4, r2, #7
    311e:	f07f 0700 	mvns.w	r7, #0
    3122:	2300      	movs	r3, #0
    3124:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    3128:	3c08      	subs	r4, #8
    312a:	ea85 0501 	eor.w	r5, r5, r1
    312e:	ea86 0601 	eor.w	r6, r6, r1
    3132:	fa85 f547 	uadd8	r5, r5, r7
    3136:	faa3 f587 	sel	r5, r3, r7
    313a:	fa86 f647 	uadd8	r6, r6, r7
    313e:	faa5 f687 	sel	r6, r5, r7
    3142:	b98e      	cbnz	r6, 3168 <memchr+0x78>
    3144:	d1ee      	bne.n	3124 <memchr+0x34>
    3146:	bcf0      	pop	{r4, r5, r6, r7}
    3148:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    314c:	f002 0207 	and.w	r2, r2, #7
    3150:	b132      	cbz	r2, 3160 <memchr+0x70>
    3152:	f810 3b01 	ldrb.w	r3, [r0], #1
    3156:	3a01      	subs	r2, #1
    3158:	ea83 0301 	eor.w	r3, r3, r1
    315c:	b113      	cbz	r3, 3164 <memchr+0x74>
    315e:	d1f8      	bne.n	3152 <memchr+0x62>
    3160:	2000      	movs	r0, #0
    3162:	4770      	bx	lr
    3164:	3801      	subs	r0, #1
    3166:	4770      	bx	lr
    3168:	2d00      	cmp	r5, #0
    316a:	bf06      	itte	eq
    316c:	4635      	moveq	r5, r6
    316e:	3803      	subeq	r0, #3
    3170:	3807      	subne	r0, #7
    3172:	f015 0f01 	tst.w	r5, #1
    3176:	d107      	bne.n	3188 <memchr+0x98>
    3178:	3001      	adds	r0, #1
    317a:	f415 7f80 	tst.w	r5, #256	; 0x100
    317e:	bf02      	ittt	eq
    3180:	3001      	addeq	r0, #1
    3182:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    3186:	3001      	addeq	r0, #1
    3188:	bcf0      	pop	{r4, r5, r6, r7}
    318a:	3801      	subs	r0, #1
    318c:	4770      	bx	lr
    318e:	bf00      	nop

00003190 <__malloc_lock>:
    3190:	4770      	bx	lr

00003192 <__malloc_unlock>:
    3192:	4770      	bx	lr

00003194 <_realloc_r>:
    3194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3196:	4607      	mov	r7, r0
    3198:	4614      	mov	r4, r2
    319a:	460e      	mov	r6, r1
    319c:	b921      	cbnz	r1, 31a8 <_realloc_r+0x14>
    319e:	4611      	mov	r1, r2
    31a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    31a4:	f7fe be3c 	b.w	1e20 <_malloc_r>
    31a8:	b922      	cbnz	r2, 31b4 <_realloc_r+0x20>
    31aa:	f7fe fdeb 	bl	1d84 <_free_r>
    31ae:	4625      	mov	r5, r4
    31b0:	4628      	mov	r0, r5
    31b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31b4:	f000 f833 	bl	321e <_malloc_usable_size_r>
    31b8:	4284      	cmp	r4, r0
    31ba:	d90f      	bls.n	31dc <_realloc_r+0x48>
    31bc:	4621      	mov	r1, r4
    31be:	4638      	mov	r0, r7
    31c0:	f7fe fe2e 	bl	1e20 <_malloc_r>
    31c4:	4605      	mov	r5, r0
    31c6:	2800      	cmp	r0, #0
    31c8:	d0f2      	beq.n	31b0 <_realloc_r+0x1c>
    31ca:	4631      	mov	r1, r6
    31cc:	4622      	mov	r2, r4
    31ce:	f7fe f9a5 	bl	151c <memcpy>
    31d2:	4631      	mov	r1, r6
    31d4:	4638      	mov	r0, r7
    31d6:	f7fe fdd5 	bl	1d84 <_free_r>
    31da:	e7e9      	b.n	31b0 <_realloc_r+0x1c>
    31dc:	4635      	mov	r5, r6
    31de:	e7e7      	b.n	31b0 <_realloc_r+0x1c>

000031e0 <_read_r>:
    31e0:	b538      	push	{r3, r4, r5, lr}
    31e2:	4c07      	ldr	r4, [pc, #28]	; (3200 <_read_r+0x20>)
    31e4:	4605      	mov	r5, r0
    31e6:	4608      	mov	r0, r1
    31e8:	4611      	mov	r1, r2
    31ea:	2200      	movs	r2, #0
    31ec:	6022      	str	r2, [r4, #0]
    31ee:	461a      	mov	r2, r3
    31f0:	f7fe f904 	bl	13fc <_read>
    31f4:	1c43      	adds	r3, r0, #1
    31f6:	d102      	bne.n	31fe <_read_r+0x1e>
    31f8:	6823      	ldr	r3, [r4, #0]
    31fa:	b103      	cbz	r3, 31fe <_read_r+0x1e>
    31fc:	602b      	str	r3, [r5, #0]
    31fe:	bd38      	pop	{r3, r4, r5, pc}
    3200:	200002a0 	.word	0x200002a0

00003204 <__ascii_wctomb>:
    3204:	b149      	cbz	r1, 321a <__ascii_wctomb+0x16>
    3206:	2aff      	cmp	r2, #255	; 0xff
    3208:	bf85      	ittet	hi
    320a:	238a      	movhi	r3, #138	; 0x8a
    320c:	6003      	strhi	r3, [r0, #0]
    320e:	700a      	strbls	r2, [r1, #0]
    3210:	f04f 30ff 	movhi.w	r0, #4294967295
    3214:	bf98      	it	ls
    3216:	2001      	movls	r0, #1
    3218:	4770      	bx	lr
    321a:	4608      	mov	r0, r1
    321c:	4770      	bx	lr

0000321e <_malloc_usable_size_r>:
    321e:	f851 0c04 	ldr.w	r0, [r1, #-4]
    3222:	2800      	cmp	r0, #0
    3224:	f1a0 0004 	sub.w	r0, r0, #4
    3228:	bfbc      	itt	lt
    322a:	580b      	ldrlt	r3, [r1, r0]
    322c:	18c0      	addlt	r0, r0, r3
    322e:	4770      	bx	lr
    3230:	682f2e2e 	.word	0x682f2e2e
    3234:	732f6c61 	.word	0x732f6c61
    3238:	682f6372 	.word	0x682f6372
    323c:	635f6c61 	.word	0x635f6c61
    3240:	615f6e61 	.word	0x615f6e61
    3244:	636e7973 	.word	0x636e7973
    3248:	0000632e 	.word	0x0000632e
    324c:	682f2e2e 	.word	0x682f2e2e
    3250:	732f6c61 	.word	0x732f6c61
    3254:	682f6372 	.word	0x682f6372
    3258:	695f6c61 	.word	0x695f6c61
    325c:	00632e6f 	.word	0x00632e6f
    3260:	682f2e2e 	.word	0x682f2e2e
    3264:	732f6c61 	.word	0x732f6c61
    3268:	682f6372 	.word	0x682f6372
    326c:	755f6c61 	.word	0x755f6c61
    3270:	74726173 	.word	0x74726173
    3274:	6e79735f 	.word	0x6e79735f
    3278:	00632e63 	.word	0x00632e63
    327c:	03020100 	.word	0x03020100
    3280:	07060504 	.word	0x07060504
    3284:	14100c08 	.word	0x14100c08
    3288:	40302018 	.word	0x40302018
    328c:	40003000 	.word	0x40003000
    3290:	40003400 	.word	0x40003400
    3294:	41012000 	.word	0x41012000
    3298:	41014000 	.word	0x41014000
    329c:	43000000 	.word	0x43000000
    32a0:	43000400 	.word	0x43000400
    32a4:	43000800 	.word	0x43000800
    32a8:	43000c00 	.word	0x43000c00

000032ac <_i2cms>:
	...
    32c4:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    32d4:	65735f6c 6d6f6372 0000632e 41432020     l_sercom.c..  CA
    32e4:	7254204e 6d736e61 69737369 64206e6f     N Transmission d
    32f4:	20656e6f 0000000d 43200d0a 4d204e41     one ...... CAN M
    3304:	61737365 72206567 69656365 20646576     essage received 
    3314:	6854202e 65722065 76696563 64206465     . The received d
    3324:	20617461 203a7369 0000000d 64252020     ata is: ....  %d
    3334:	00000000 756e654d 0a0d3a20 2d2d2020     ....Menu :..  --
    3344:	6c655320 20746365 20656874 69746361      Select the acti
    3354:	0d3a6e6f 3020200a 6553203a 74732074     on:..  0: Set st
    3364:	61646e61 66206472 65746c69 44492072     andard filter ID
    3374:	203a3020 35347830 73202c41 65726f74      0: 0x45A, store
    3384:	746e6920 7852206f 66756220 2e726566      into Rx buffer.
    3394:	200a0d20 203a3120 20746553 6e617473      ..  1: Set stan
    33a4:	64726164 6c696620 20726574 31204449     dard filter ID 1
    33b4:	7830203a 2c393634 6f747320 69206572     : 0x469, store i
    33c4:	206f746e 46207852 204f4649 0d202e30     nto Rx FIFO 0. .
    33d4:	3220200a 6553203a 4620646e 74732044     .  2: Send FD st
    33e4:	61646e61 6d206472 61737365 77206567     andard message w
    33f4:	20687469 203a4449 35347830 6e612041     ith ID: 0x45A an
    3404:	34362064 74796220 61642065 30206174     d 64 byte data 0
    3414:	206f7420 202e3336 20200a0d 53203a33      to 63. ..  3: S
    3424:	20646e65 73204446 646e6174 20647261     end FD standard 
    3434:	7373656d 20656761 68746977 3a444920     message with ID:
    3444:	34783020 61203936 3620646e 79622034      0x469 and 64 by
    3454:	64206574 20617461 20383231 31206f74     te data 128 to 1
    3464:	202e3139 20200a0d 53203a34 65207465     91. ..  4: Set e
    3474:	6e657478 20646564 746c6966 49207265     xtended filter I
    3484:	3a302044 31783020 30303030 2c354130     D 0: 0x100000A5,
    3494:	6f747320 69206572 206f746e 62207852      store into Rx b
    34a4:	65666675 0d202e72 3520200a 6553203a     uffer. ..  5: Se
    34b4:	78652074 646e6574 66206465 65746c69     t extended filte
    34c4:	44492072 203a3120 30317830 30303030     r ID 1: 0x100000
    34d4:	202c3639 726f7473 6e692065 52206f74     96, store into R
    34e4:	49462078 31204f46 0a0d202e 3a362020     x FIFO 1. ..  6:
    34f4:	6e655320 44462064 74786520 65646e65      Send FD extende
    3504:	656d2064 67617373 69772065 49206874     d message with I
    3514:	30203a44 30303178 41303030 6e612035     D: 0x100000A5 an
    3524:	34362064 74796220 61642065 30206174     d 64 byte data 0
    3534:	206f7420 202e3336 20200a0d 53203a37      to 63. ..  7: S
    3544:	20646e65 65204446 6e657478 20646564     end FD extended 
    3554:	7373656d 20656761 68746977 3a444920     message with ID:
    3564:	31783020 30303030 20363930 20646e61      0x10000096 and 
    3574:	62203436 20657479 61746164 38323120     64 byte data 128
    3584:	206f7420 2e313931 200a0d20 203a6120      to 191. ..  a: 
    3594:	646e6553 726f6e20 206c616d 6e617473     Send normal stan
    35a4:	64726164 73656d20 65676173 74697720     dard message wit
    35b4:	44492068 7830203a 20393634 20646e61     h ID: 0x469 and 
    35c4:	79622038 64206574 20617461 6f742030     8 byte data 0 to
    35d4:	202e3720 20200a0d 44203a68 6c707369      7. ..  h: Displ
    35e4:	6d207961 20756e65 000d0a0d 00006325     ay menu ....%c..
    35f4:	3a302020 74655320 61747320 7261646e       0: Set standar
    3604:	69662064 7265746c 20444920 30203a30     d filter ID 0: 0
    3614:	41353478 7473202c 2065726f 6f746e69     x45A, store into
    3624:	20785220 66667562 202e7265 0000000d      Rx buffer. ....
    3634:	3a312020 74655320 61747320 7261646e       1: Set standar
    3644:	69662064 7265746c 20444920 30203a31     d filter ID 1: 0
    3654:	39363478 7473202c 2065726f 6f746e69     x469, store into
    3664:	20785220 4f464946 202e3020 0000000d      Rx FIFO 0. ....
    3674:	3a322020 6e655320 74732064 61646e61       2: Send standa
    3684:	6d206472 61737365 77206567 20687469     rd message with 
    3694:	203a4449 35347830 6e612041 34362064     ID: 0x45A and 64
    36a4:	74796220 61642065 30206174 206f7420      byte data 0 to 
    36b4:	202e3336 0000000d 3a332020 6e655320     63. ....  3: Sen
    36c4:	74732064 61646e61 6d206472 61737365     d standard messa
    36d4:	77206567 20687469 203a4449 36347830     ge with ID: 0x46
    36e4:	6e612039 34362064 74796220 61642065     9 and 64 byte da
    36f4:	31206174 74203832 3931206f 0d202e31     ta 128 to 191. .
    3704:	00000000 3a342020 74655320 74786520     ....  4: Set ext
    3714:	65646e65 69662064 7265746c 20444920     ended filter ID 
    3724:	30203a30 30303178 41303030 73202c35     0: 0x100000A5, s
    3734:	65726f74 746e6920 7852206f 66756220     tore into Rx buf
    3744:	2e726566 00000d20 3a352020 74655320     fer. ...  5: Set
    3754:	74786520 65646e65 69662064 7265746c      extended filter
    3764:	20444920 30203a31 30303178 39303030      ID 1: 0x1000009
    3774:	73202c36 65726f74 746e6920 7852206f     6, store into Rx
    3784:	46494620 2e31204f 00000d20 3a362020      FIFO 1. ...  6:
    3794:	6e655320 78652064 646e6574 6d206465      Send extended m
    37a4:	61737365 77206567 20687469 203a4449     essage with ID: 
    37b4:	30317830 30303030 61203541 3620646e     0x100000A5 and 6
    37c4:	79622034 64206574 20617461 6f742030     4 byte data 0 to
    37d4:	2e333620 00000d20 3a372020 6e655320      63. ...  7: Sen
    37e4:	78652064 646e6574 6d206465 61737365     d extended messa
    37f4:	77206567 20687469 203a4449 30317830     ge with ID: 0x10
    3804:	30303030 61203639 3620646e 79622034     000096 and 64 by
    3814:	64206574 20617461 20383231 31206f74     te data 128 to 1
    3824:	202e3139 0000000d 3a612020 6e655320     91. ....  a: Sen
    3834:	6f6e2064 6c616d72 61747320 7261646e     d normal standar
    3844:	656d2064 67617373 69772065 49206874     d message with I
    3854:	30203a44 39363478 646e6120 62203820     D: 0x469 and 8 b
    3864:	20657479 61746164 74203020 2e37206f     yte data 0 to 7.
    3874:	00000d20 3a612020 6e655320 6f6e2064      ...  a: Send no
    3884:	6c616d72 61747320 7261646e 656d2064     rmal standard me
    3894:	67617373 69772065 49206874 30203a44     ssage with ID: 0
    38a4:	41353478 646e6120 62203820 20657479     x45A and 8 byte 
    38b4:	61746164 74203020 2e37206f 00000d20     data 0 to 7. ...

000038c4 <_global_impure_ptr>:
    38c4:	20000018                                ... 

000038c8 <__sf_fake_stderr>:
	...

000038e8 <__sf_fake_stdin>:
	...

00003908 <__sf_fake_stdout>:
	...
    3928:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3938:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3948:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3958:	00006665 0000397a 0000397d 00003980     ef..z9..}9...9..
    3968:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
    3978:	2d2b005d 00303000 43005878 534f5000     ].+-.00.xX.C.POS
    3988:	2e005849 20200000                                IX...

0000398d <_ctype_>:
    398d:	20202000 20202020 28282020 20282828     .         ((((( 
    399d:	20202020 20202020 20202020 20202020                     
    39ad:	10108820 10101010 10101010 10101010      ...............
    39bd:	04040410 04040404 10040404 10101010     ................
    39cd:	41411010 41414141 01010101 01010101     ..AAAAAA........
    39dd:	01010101 01010101 01010101 10101010     ................
    39ed:	42421010 42424242 02020202 02020202     ..BBBBBB........
    39fd:	02020202 02020202 02020202 10101010     ................
    3a0d:	00000020 00000000 00000000 00000000      ...............
	...

00003a90 <_init>:
    3a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a92:	bf00      	nop
    3a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3a96:	bc08      	pop	{r3}
    3a98:	469e      	mov	lr, r3
    3a9a:	4770      	bx	lr

00003a9c <__init_array_start>:
    3a9c:	00000289 	.word	0x00000289

00003aa0 <_fini>:
    3aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3aa2:	bf00      	nop
    3aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3aa6:	bc08      	pop	{r3}
    3aa8:	469e      	mov	lr, r3
    3aaa:	4770      	bx	lr

00003aac <__fini_array_start>:
    3aac:	00000265 	.word	0x00000265
